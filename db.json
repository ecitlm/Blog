{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495673676065},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495673676067},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495673676068},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495673676069},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495673676070},{"_id":"themes/next/_config.yml","hash":"a41f6008165a11cc96ae2e50f181679989018d4f","modified":1497235906658},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1495673676078},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1495673676071},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495673676074},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1495673676076},{"_id":"source/_posts/PhalApi框架笔记.md","hash":"0ac309b5b6fb14097ba49bd6dcd3cbe4e1604897","modified":1499336944811},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1495673676210},{"_id":"source/_posts/GitHubShare.md","hash":"9beef0eae314f3066ecdbe6e8c2a80c051d73a0b","modified":1480472465756},{"_id":"source/_posts/git.md","hash":"363a407687c34e958386d56203af92940bd3c2de","modified":1495673675699},{"_id":"source/_posts/Linux-to-node.md","hash":"1a52316c7bac43691bb969eb95cb0932fdf0b93b","modified":1496370258430},{"_id":"source/_posts/jquery_to_js.md","hash":"6aba9895f18dfa9344b7af80e279d17cd2389815","modified":1484617766132},{"_id":"source/_posts/javascript-code.md","hash":"853f947aeefd7ff8b354d6a0cb14251ed33b8151","modified":1481504785814},{"_id":"source/_posts/mobile-responsive.md","hash":"a5e3c73f75dbb437defdc58bdb9b897f2fae1760","modified":1497231338207},{"_id":"source/_posts/javascript_base.md","hash":"7029a0b72bf9f56d0e739b6cf527560681f184fb","modified":1484617312255},{"_id":"source/_posts/node_mysql.md","hash":"deb0c35065d93e3c89ebd1f9c4d09346d94b4fde","modified":1495415762469},{"_id":"source/_posts/php_cross.md","hash":"b9e04f2129d62affab4cbfa322bf0dca1a39a530","modified":1497231338208},{"_id":"source/_posts/sublime插件.md","hash":"b49f6c150aafbeef3460bc6706f4bc6d3b3caa3a","modified":1499336944812},{"_id":"source/_posts/jsmodule.md","hash":"818450258f617ee2e6280e2cdd6f4ea3a0139224","modified":1480475129556},{"_id":"source/_posts/js_code_style.md","hash":"b9268d6b69451fdc9606d67e52f7653a3fa449e6","modified":1495673675701},{"_id":"source/_posts/phpQuery.md","hash":"8b6ce55d3e67c2951594ade688b904bfbb4d4d56","modified":1496370258430},{"_id":"source/_posts/vuejs.md","hash":"9f0a132bb973e55a80b7df6515b61dfdf3460482","modified":1495673675717},{"_id":"source/categories/index.md","hash":"696a1fe8c49e292e927c2b3bcb70dc9ac35bfedd","modified":1480399176867},{"_id":"source/_posts/web-share.md","hash":"57abe6a9a2caf893a9eb5d0746e5c7b939f5ca92","modified":1481504950440},{"_id":"source/tags/index.md","hash":"f50a122ab0ae8a99c1af1843240f63fb7f4b461b","modified":1480396976849},{"_id":"source/img/head.jpg","hash":"7faa1a60a0eaf950157ab13c390a94dbfe874daa","modified":1478138512112},{"_id":"source/about/index.md","hash":"9de002a8fa8b97f86c5cd65db62b245e53bc10fe","modified":1496370258432},{"_id":"source/_posts/wx-page.md","hash":"c23970da8f9acf2af81c6580314ee5dcab31f76a","modified":1481504785904},{"_id":"themes/next/languages/default.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1495673676079},{"_id":"themes/next/languages/en.yml","hash":"fd80465a08f151f88de67780709497b2d1995f45","modified":1495673676080},{"_id":"themes/next/languages/zh-CN.yml","hash":"fd80465a08f151f88de67780709497b2d1995f45","modified":1495673676081},{"_id":"themes/next/languages/zh-Hans.yml","hash":"e037cf23a751b9ba1f31ae4b9916184f16496a9f","modified":1495673676082},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1495673676204},{"_id":"themes/next/layout/_layout.swig","hash":"85bbad70bb66b992d72075bd4e4f0136d91ad972","modified":1496390413356},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1495673676202},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1495673676207},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1495673676203},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1495673676211},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1495673676206},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1495673676209},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676582},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495673676086},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495673676087},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1495673676205},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"6fd02b40ff3311ad10ba3d8e25e9dfb79083175c","modified":1495675045901},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1495674357491},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1495673676112},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a6be2a73c939b0a3ee9e70ab3d938235745fd36","modified":1495675177300},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495673676117},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0b42ed43211a4216458825da9394072725dbdff7","modified":1497231338209},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495673676120},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1495673676116},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495673676115},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1495673676126},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495673676127},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1495673676129},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495673676138},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495673676139},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495673676140},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1495673676118},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495673676212},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495673676213},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495673676215},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495673676216},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1495673676125},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1495673676163},{"_id":"themes/next/layout/_partials/head.swig","hash":"6f3d7440b90de71f66670ceb9632cc5ec20b5f50","modified":1495677284422},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495673676582},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495673676605},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495673676601},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495673676606},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495673676608},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495673676610},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495673676616},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495673676618},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495673676611},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495673676613},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495673676615},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495673676619},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495673676620},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676142},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676142},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676288},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676287},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676291},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676541},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495673676581},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495673676622},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495673676612},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1495673676085},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495673676123},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1495673676130},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495673676132},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1495673676131},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495673676134},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495673676083},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495673676124},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495673676141},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495673676143},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1495673676145},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1495673676153},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495673676135},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495673676136},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495673676137},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1495673676158},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495673676157},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"615e1f318c15ed8aa599111fd6517df7144ec790","modified":1497231338210},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495673676290},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495673676160},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495673676540},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495673676159},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495673676162},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495673676291},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1495673676542},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1495673676625},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1495673676580},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495673676623},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1495673676626},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495673676629},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495673676627},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1495673676630},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495673676632},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1495673676639},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1495673676640},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1495673676633},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495673676666},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495673676634},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495673676670},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495673676667},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495673676674},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495673676675},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495673676676},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495673676677},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495673676697},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495673676668},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495673676700},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495673676705},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1495673676673},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495673676703},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495673676704},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495673676706},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495673676707},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495673676712},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495673676716},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495673676699},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495673676711},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1495673676147},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495673676719},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495673676149},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495673676150},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1495673676151},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495673676152},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495673676717},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495673676146},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1495673676148},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1495673676154},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495673676155},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495673676156},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1495673676217},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495673676219},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1495673676220},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495673676263},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495673676218},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495673676237},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1495673676280},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495673676278},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495673676283},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495673676292},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1495673676281},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495673676296},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495673676282},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495673676286},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495673676299},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495673676297},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1495673676298},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495673676305},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495673676305},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495673676307},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495673676308},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495673676491},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1495673676494},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1495673676495},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495673676295},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495673676300},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495673676524},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1495673676538},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1495673676631},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495673676642},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1495673676521},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1495673676523},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1495673676525},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495673676644},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495673676649},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495673676651},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495673676646},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495673676664},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495673676653},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495673676662},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495673676672},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495673676671},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495673676680},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1495673676679},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1495673676681},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495673676665},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1495673676685},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1495673676684},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495673676708},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495673676710},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1495673676694},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495673676715},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495673676223},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495673676224},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495673676221},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495673676227},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495673676228},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1495673676225},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495673676231},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495673676232},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495673676234},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495673676233},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495673676226},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1495673676229},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495673676230},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495673676239},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495673676235},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495673676241},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1495673676238},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1495673676243},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1495675091973},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1495673676240},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495673676247},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1495673676242},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495673676249},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1495673676244},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495673676251},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495673676246},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1495673676253},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495673676255},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1495673676248},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c5433bd0b90e209cf637dd855d807ee2fc5955c3","modified":1495675212436},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1495673676258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495673676252},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495673676256},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495673676257},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1495673676266},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495673676261},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495673676262},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1495673676269},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495673676264},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495673676272},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495673676267},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495673676268},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495673676275},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1495673676271},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1495673676277},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495673676301},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1495673676302},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1495673676492},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1495673676273},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1495673676276},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495673676274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495673676657},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1495673676696},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495673676655},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495673676658},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1495673676693},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495673676660},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495673676659},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495673676661},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495673676638},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1495673676690},{"_id":"source/_posts/vue-new.md","hash":"72dcf5b1aa8b45f1fbf427da99ddb490507259c6","modified":1499337239946},{"_id":"public/categories/index.html","hash":"4503b2eda744f795eaf39ef0c638a94a3c751a01","modified":1499337287369},{"_id":"public/tags/index.html","hash":"2306ed0ea3cbdfa4d8e758856ce3ccba893344b6","modified":1499337290167},{"_id":"public/about/index.html","hash":"347d270fff46fceb196d0721662281e3f964931a","modified":1499337290175},{"_id":"public/archives/2016/09/index.html","hash":"aa34e91618eb752d761efec1a9d0ea5f31ae9771","modified":1499337290175},{"_id":"public/archives/2016/11/index.html","hash":"7f9405b493b62c71beb175e03f75ec568fca0764","modified":1499337290175},{"_id":"public/archives/2016/index.html","hash":"031203ef6be160ab7f5c5dda083dc78f628929cc","modified":1499337290175},{"_id":"public/archives/2016/12/index.html","hash":"8d524c7459d0d1515b607973bb0f4b8bbb66fd1e","modified":1499337290175},{"_id":"public/archives/2017/02/index.html","hash":"44c1c1f39c42dcff89ac10e00a0c42de2433ee6a","modified":1499337290175},{"_id":"public/archives/2017/01/index.html","hash":"a8764ab3ee31111c2eb55e27a09d3049a6d80fbe","modified":1499337290175},{"_id":"public/archives/2017/05/index.html","hash":"3aa1ddc12e88aba63672644fd19b19d14be6f6f1","modified":1499337290175},{"_id":"public/categories/php/index.html","hash":"84650948f11a85bc9ad0458d32b5b9eeb84a8d7e","modified":1499337290176},{"_id":"public/categories/web/index.html","hash":"098b1d34f7bf78cee2b7c0689b9f8be415969e74","modified":1499337290176},{"_id":"public/categories/git/index.html","hash":"d7a8c2aae7a798f5a2d595a65ade8ab13e93b182","modified":1499337290176},{"_id":"public/categories/javascript/index.html","hash":"87e582b6e1569e911060821c2e1e31cf3396967a","modified":1499337290176},{"_id":"public/categories/Vue-js/index.html","hash":"c7d92228d3788af268c855270ba02fcfc6f10bcc","modified":1499337290176},{"_id":"public/categories/Node/index.html","hash":"7b4b9d86de43deffe9285a35ec2e987c99e2e7ab","modified":1499337290176},{"_id":"public/categories/Blog/index.html","hash":"953862d2c53e4a8a758c2b90483d29b48923d442","modified":1499337290176},{"_id":"public/tags/web/index.html","hash":"6fe45d981f29b86433c0dbb520558e1b0cc2201a","modified":1499337290176},{"_id":"public/tags/node/index.html","hash":"f179fafe8401e0365280e3a42d26e22645de4247","modified":1499337290176},{"_id":"public/tags/GitHub/index.html","hash":"827d9de72a45cb93cfcccac15ccf23f08b982239","modified":1499337290176},{"_id":"public/tags/css/index.html","hash":"2d00755188ad5c0e84e7ef9af3b9a2e58dd52646","modified":1499337290176},{"_id":"public/tags/ThinkPHP/index.html","hash":"56557715e357a58ab4aef4ec6a483ed20be333e5","modified":1499337290176},{"_id":"public/tags/php/index.html","hash":"77c0c62d7f3c144ae5661963e0308d5e92b1c2f9","modified":1499337290176},{"_id":"public/tags/Vue-js/index.html","hash":"2258de6a56888a61e99a93d53ac583798d0a8a17","modified":1499337290176},{"_id":"public/tags/CSS/index.html","hash":"0e7e1d7297529928ef7ca57f22c25635e9305dc8","modified":1499337290176},{"_id":"public/tags/share/index.html","hash":"48cda116b54112223575cd7e34c3489e8a74f77e","modified":1499337290176},{"_id":"public/tags/git/index.html","hash":"66be7770cd98e4860ec5b4b819ae07b7e062f2d0","modified":1499337290176},{"_id":"public/tags/javascript/index.html","hash":"14591e52dd0f1730978c2d94e9507f182cc32a63","modified":1499337290176},{"_id":"public/2017/05/Linux-to-node/index.html","hash":"0434366ac1ac1e364e763cbf5694b88a2cfa7af5","modified":1499337290176},{"_id":"public/2017/05/node_mysql/index.html","hash":"bf529285b3abf811fb57a3b55bdaaf3da9a7af13","modified":1499337290177},{"_id":"public/2017/05/phpQuery/index.html","hash":"670a87bfa6b9df99413ba6e61dbada5a44035c65","modified":1499337290177},{"_id":"public/2017/01/jquery_to_js/index.html","hash":"488997ad2fe9916ff83fbd8f72ab672da79abaea","modified":1499337290177},{"_id":"public/2017/02/js_code_style/index.html","hash":"8678d8c84be73cfd2dccad3fce9ff745f68d0051","modified":1499337290177},{"_id":"public/2016/12/javascript_base/index.html","hash":"47c6c28e3731bfb2343b48b013f7f4a7167f523d","modified":1499337290177},{"_id":"public/2016/11/jsmodule/index.html","hash":"8e040f0cd65afb8babbc4ed6b96ca8f8dec14531","modified":1499337290177},{"_id":"public/2016/11/javascript-code/index.html","hash":"674279730e00990243a8e0f3baad870c4d1e0b95","modified":1499337290177},{"_id":"public/2016/11/web-share/index.html","hash":"d0d003e535835e29d7b87f601dd9aab1908b91db","modified":1499337290177},{"_id":"public/2016/12/wx-page/index.html","hash":"af05653a08eed4a83acff528dc7764854e79af37","modified":1499337290177},{"_id":"public/2016/12/vuejs/index.html","hash":"2e73c5b4db8f0e8046dd69bc516b5bff93ca6fac","modified":1499337290177},{"_id":"public/2016/12/git/index.html","hash":"d89f77071394b8ac61a0fca96aa09b24660c75f2","modified":1499337290177},{"_id":"public/2016/09/GitHubShare/index.html","hash":"5da10e2cca259295a482cd0c305a689b33fba84b","modified":1499337290177},{"_id":"public/archives/index.html","hash":"b1a8d04d941fb5673f85e3d9ddd57a9e3e46a962","modified":1499337290177},{"_id":"public/archives/page/2/index.html","hash":"0ede681717bac8834b1c3dbb21a088d68fcebfe4","modified":1499337290177},{"_id":"public/archives/2017/index.html","hash":"0707c9942dde4f5414769904d028560e8e1be174","modified":1499337290177},{"_id":"public/index.html","hash":"30a0d597e1676cfd2150a5161954207059dd2b9d","modified":1499337290177},{"_id":"public/page/2/index.html","hash":"d5f9b957cb284aee59c92c37f88d0e613c7e00cf","modified":1499337290177},{"_id":"public/archives/2017/03/index.html","hash":"27fc3e905ff0947219db93407d3de31882c1823c","modified":1499337290188},{"_id":"public/archives/2017/06/index.html","hash":"6d796907dfe1f0b810efde221593f17576a47b69","modified":1499337290188},{"_id":"public/categories/vue/index.html","hash":"b1f37d00746545014a07f5e817edac1dbe274ba4","modified":1499337290188},{"_id":"public/tags/js/index.html","hash":"fae46078564ed8281605a54b6dfc4e2291b0b631","modified":1499337290188},{"_id":"public/tags/Vue/index.html","hash":"04748e1b1c2bba463ad4f3ad3944428986826198","modified":1499337290188},{"_id":"public/2017/06/sublime插件/index.html","hash":"d4a78f85d555f6454db2318db0632328db2c30a4","modified":1499337290189},{"_id":"public/2017/06/vue-new/index.html","hash":"5e357cef92e406b9b3b472027df8251383974dfa","modified":1499337290189},{"_id":"public/2017/06/PhalApi框架笔记/index.html","hash":"1680d38f7ae04e4d02a4e7cdfb0debe390792e70","modified":1499337290189},{"_id":"public/2017/03/mobile-responsive/index.html","hash":"dd1f10a1cca2ea7d3ba8a19c572a9bbb1472a559","modified":1499337290192},{"_id":"public/2017/05/php_cross/index.html","hash":"8dc0c365e2446a9459079a69fe6dd756431ba7dc","modified":1499337290193}],"Category":[{"name":"php","_id":"cj4sal68e0004ek5b6jtl41at"},{"name":"web","_id":"cj4sal68w000aek5biaustsif"},{"name":"git","_id":"cj4sal692000gek5b95nyban2"},{"name":"Node","_id":"cj4sal698000lek5b9wuxjg4n"},{"name":"javascript","_id":"cj4sal69g000sek5bx6n1wrmk"},{"name":"Blog","_id":"cj4sal69z0016ek5bpniq5vmj"},{"name":"Vue.js","_id":"cj4sal6af001qek5bxxluh1vs"},{"name":"vue","_id":"cj4sap7n10001ls5bk0eizfaj"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-29T05:58:59.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-29 13:58:59\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-29T05:59:36.867Z","path":"categories/index.html","layout":"page","_id":"cj4sal6880001ek5bscl99jv0","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-29T05:20:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-29 13:20:25\ntype: \"tags\"\n\n---\n","updated":"2016-11-29T05:22:56.849Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj4sal68c0003ek5bos1f0yuq","content":"","excerpt":"","more":""},{"title":"About Me","date":"2017-01-17T01:45:55.000Z","_content":"\n\n\n\n\n# 刘明 / LiuMing\n\n####   Web开发工程师\n 广东 深圳，男，26岁\n 东华理工大学 软件工程\n Email: ecitlm@163.com\n Coding: [Coding](https://coding.net/u/ecit)\n\n\n##### 座右铭 : 地上本没有路,走的人多了,也便成了路\n\n--------------------------------\n\n\n\n>###  简介\n\n一位想着后端的前端开发工程师, 目前就职于深圳从事web开发工程师一职.  从事IT行业三年,慢慢的发觉Coding已是生活不可缺少的一部分,工作之余喜欢阅读文学类书籍，\n\n\n>### 技能\n\n1. HTML+CSS  Javascript  Vue.js  Jquery Node\n1. MySQL\n1. PHP\n1. Linux\n1. Git / SVN\n1. Photoshop\n\n-------\n\n","source":"about/index.md","raw":"\n---\ntitle: About Me\ndate: 2017-1-17 09:45:55\n---\n\n\n\n\n\n# 刘明 / LiuMing\n\n####   Web开发工程师\n 广东 深圳，男，26岁\n 东华理工大学 软件工程\n Email: ecitlm@163.com\n Coding: [Coding](https://coding.net/u/ecit)\n\n\n##### 座右铭 : 地上本没有路,走的人多了,也便成了路\n\n--------------------------------\n\n\n\n>###  简介\n\n一位想着后端的前端开发工程师, 目前就职于深圳从事web开发工程师一职.  从事IT行业三年,慢慢的发觉Coding已是生活不可缺少的一部分,工作之余喜欢阅读文学类书籍，\n\n\n>### 技能\n\n1. HTML+CSS  Javascript  Vue.js  Jquery Node\n1. MySQL\n1. PHP\n1. Linux\n1. Git / SVN\n1. Photoshop\n\n-------\n\n","updated":"2017-06-02T02:24:18.432Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj4sal68l0007ek5bn5qvvhbt","content":"<h1 id=\"刘明-LiuMing\"><a href=\"#刘明-LiuMing\" class=\"headerlink\" title=\"刘明 / LiuMing\"></a>刘明 / LiuMing</h1><h4 id=\"Web开发工程师\"><a href=\"#Web开发工程师\" class=\"headerlink\" title=\"Web开发工程师\"></a>Web开发工程师</h4><p> 广东 深圳，男，26岁<br> 东华理工大学 软件工程<br> Email: ecitlm@163.com<br> Coding: <a href=\"https://coding.net/u/ecit\" target=\"_blank\" rel=\"external\">Coding</a></p>\n<h5 id=\"座右铭-地上本没有路-走的人多了-也便成了路\"><a href=\"#座右铭-地上本没有路-走的人多了-也便成了路\" class=\"headerlink\" title=\"座右铭 : 地上本没有路,走的人多了,也便成了路\"></a>座右铭 : 地上本没有路,走的人多了,也便成了路</h5><hr>\n<blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3></blockquote>\n<p>一位想着后端的前端开发工程师, 目前就职于深圳从事web开发工程师一职.  从事IT行业三年,慢慢的发觉Coding已是生活不可缺少的一部分,工作之余喜欢阅读文学类书籍，</p>\n<blockquote>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3></blockquote>\n<ol>\n<li>HTML+CSS  Javascript  Vue.js  Jquery Node</li>\n<li>MySQL</li>\n<li>PHP</li>\n<li>Linux</li>\n<li>Git / SVN</li>\n<li>Photoshop</li>\n</ol>\n<hr>\n","excerpt":"","more":"<h1 id=\"刘明-LiuMing\"><a href=\"#刘明-LiuMing\" class=\"headerlink\" title=\"刘明 / LiuMing\"></a>刘明 / LiuMing</h1><h4 id=\"Web开发工程师\"><a href=\"#Web开发工程师\" class=\"headerlink\" title=\"Web开发工程师\"></a>Web开发工程师</h4><p> 广东 深圳，男，26岁<br> 东华理工大学 软件工程<br> Email: ecitlm@163.com<br> Coding: <a href=\"https://coding.net/u/ecit\">Coding</a></p>\n<h5 id=\"座右铭-地上本没有路-走的人多了-也便成了路\"><a href=\"#座右铭-地上本没有路-走的人多了-也便成了路\" class=\"headerlink\" title=\"座右铭 : 地上本没有路,走的人多了,也便成了路\"></a>座右铭 : 地上本没有路,走的人多了,也便成了路</h5><hr>\n<blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3></blockquote>\n<p>一位想着后端的前端开发工程师, 目前就职于深圳从事web开发工程师一职.  从事IT行业三年,慢慢的发觉Coding已是生活不可缺少的一部分,工作之余喜欢阅读文学类书籍，</p>\n<blockquote>\n<h3 id=\"技能\"><a href=\"#技能\" class=\"headerlink\" title=\"技能\"></a>技能</h3></blockquote>\n<ol>\n<li>HTML+CSS  Javascript  Vue.js  Jquery Node</li>\n<li>MySQL</li>\n<li>PHP</li>\n<li>Linux</li>\n<li>Git / SVN</li>\n<li>Photoshop</li>\n</ol>\n<hr>\n"}],"Post":[{"title":"PhapApi框架使用小记","date":"2017-06-11T10:17:28.000Z","comments":1,"keywords":null,"description":"PhapApi框架使用小记,PhalApi是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services","_content":"\n\n### 什么是PhapApi\n>[PhalApi](https://github.com/phalapi/phalapi/)是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services，\n\n```\n.\n│\n├── PhalApi         //PhalApi框架，后期可以整包升级\n│\n│\n├── Public          //对外访问目录，建议隐藏PHP实现\n│   └── demo        //Demo服务访问入口\n│\n│\n├── Config          //项目接口公共配置，主要有：app.php, sys.php, dbs.php\n├── Data            //项目接口公共数据\n├── Language        //项目接口公共翻译\n├── Runtime         //项目接口运行文件目录，用于存放日记，可软链到别的区\n│\n│\n└── Demo            //应用接口服务，名称自取，可多组\n    ├── Api             //接口响应层\n    ├── Domain          //接口领域层\n    ├── Model           //接口持久层\n    └── Tests           //接口单元测试\n```\n\n\n### PhalApi核心思想\n>核心思想：DI依赖注入\n\n###PhalApi框架三层结构Api+Domain+Model模式\n\n1.1 Api层\n它会通过控制器把请求转发到service层作处理，并将处理结果在页面展示，所以Api更像担当控制器(C)的作用。\n\n1.2 Domain层\n\nDomain层主要负责的是具体的业务实现,如数据获取，一个Domain方法就是一个小的业务具体实现(注意尽量把业务划分得细一点方便通用)\n\n1.3 Model层\n\n数据库操作单独提炼出来统一处理\n\n### PhalApi通用公共函数和 拦截器过滤器\n\n> 公用函数和拦截器\n\n1 公共函数\n\n首先在我们的根目录建立一个文件夹叫做general通用的意思,里面分别有两个文件夹Common(受TP的影响)和Intercept两个文件,我们在里面放入我们自己的文件,当然需要按照正确的规则比如Common_Base等\n\n 然后我们要使用的话当然要注册我们这个general文件作为自带加载文件,然后注册自己需要用的类,如下在入口文件`index.php`进行注入\n\n```\n/** ---------------- 通用方法加载 ---------------- **/\n//加载项目通用文件\nDI()->loader->addDirs('General');\n//通用函数基础类\nDI()->base = new Common_Base();\n\n```\n\n2 拦截器\nPhalApi已经有自带的拦截器，使用时一样需要先注入\n ![PhalApi结构](https://dn-coding-net-production-pp.qbox.me/6b117d2e-ce35-47f8-b084-3c6b15ee4d13.png) \n\n>加入我们需要对`token`进行校验，一些方法是需要验证，有些方法又是不需要验证 `token`.我们需要怎么实现呢?\n\n可以在项目目录 `Config/app.php`进行定义一个数组，数组包括的是需要验证`token`的类方法名\n\n```\n   /**\n     * 需要带Token的接口\n     */\n    apiTokenRules' => array(\n        'User.info',\n        'User.updateInfo',\n    )\n```\n我们定义好相关需要校验`token`的数组，在 Filter下面的 `SimpleToken` 来进行校验,所有的接口访问都会走改注册了的token校验方法,我们就需要在校验方法里面做过滤拦截,\n```\npublic function check() {\n        $service = DI()->request->get('service');\n        $app=DI()->config->get('app');\n        $app = json_decode(json_encode($app),true);\n        $apiTokenRules = $app['apiTokenRules'];\n        if (in_array($service,$apiTokenRules)) {\n            $allParams = DI()->request->getAll();\n            $token = isset($allParams['token']) ? $allParams['token'] : '';\n            $user_id = $allParams['user_id'];\n            if (empty($user_id)){\n                throw new PhalApi_Exception_BadRequest('缺少必要参数user_id');\n            }\n            $service_token = DI()->cache->get($user_id.'token');\n            if (empty($service_token)){\n                throw new PhalApi_Exception_BadRequest('请重新登录',99);\n            }else{\n                if (strcmp($token,$service_token) !== 0){\n                    DI()->logger->debug('Wrong Token', array('needToken' => $service_token));\n                    throw new PhalApi_Exception_BadRequest('Token错误，请重新登录',99);\n                }else{\n                    DI()->cache->set($user_id.'token',$service_token,24*60*60);\n                }\n            }\n        }\n    }\n```\n\n\n### PhalApi 第三方SDK使用集成方法\n>参考大神的OSC@GIT仓库  https://github.com/phalapi/phalapi-library ，仓库有比较多的SDK包 供下载使用 `git clone https://github.com/phalapi/phalapi-library.git`\n\n以短信SMS 容联云短信服务器拓展为例\n>配置方式非常简单只需要把拓展下载下来放入Library文件内即可,然后就可以使用如下方法进行实例,文件名称以`Lite.php` 为准,再到根目录进行注入使用,\n\n```\nDI()->sms= new SMS_Lite();\n```\n\n\n\n参看PhapApi\nhttps://github.com/phalapi/phalapi/\nhttps://www.phalapi.net/\n\n\n\n\n\n\n","source":"_posts/PhalApi框架笔记.md","raw":"---\ntitle: PhapApi框架使用小记\ndate: 2017-06-11 18:17:28\ncomments: true\ncategories: php\ntags: [php]\nkeywords: \ndescription: PhapApi框架使用小记,PhalApi是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services\n\n---\n\n\n### 什么是PhapApi\n>[PhalApi](https://github.com/phalapi/phalapi/)是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services，\n\n```\n.\n│\n├── PhalApi         //PhalApi框架，后期可以整包升级\n│\n│\n├── Public          //对外访问目录，建议隐藏PHP实现\n│   └── demo        //Demo服务访问入口\n│\n│\n├── Config          //项目接口公共配置，主要有：app.php, sys.php, dbs.php\n├── Data            //项目接口公共数据\n├── Language        //项目接口公共翻译\n├── Runtime         //项目接口运行文件目录，用于存放日记，可软链到别的区\n│\n│\n└── Demo            //应用接口服务，名称自取，可多组\n    ├── Api             //接口响应层\n    ├── Domain          //接口领域层\n    ├── Model           //接口持久层\n    └── Tests           //接口单元测试\n```\n\n\n### PhalApi核心思想\n>核心思想：DI依赖注入\n\n###PhalApi框架三层结构Api+Domain+Model模式\n\n1.1 Api层\n它会通过控制器把请求转发到service层作处理，并将处理结果在页面展示，所以Api更像担当控制器(C)的作用。\n\n1.2 Domain层\n\nDomain层主要负责的是具体的业务实现,如数据获取，一个Domain方法就是一个小的业务具体实现(注意尽量把业务划分得细一点方便通用)\n\n1.3 Model层\n\n数据库操作单独提炼出来统一处理\n\n### PhalApi通用公共函数和 拦截器过滤器\n\n> 公用函数和拦截器\n\n1 公共函数\n\n首先在我们的根目录建立一个文件夹叫做general通用的意思,里面分别有两个文件夹Common(受TP的影响)和Intercept两个文件,我们在里面放入我们自己的文件,当然需要按照正确的规则比如Common_Base等\n\n 然后我们要使用的话当然要注册我们这个general文件作为自带加载文件,然后注册自己需要用的类,如下在入口文件`index.php`进行注入\n\n```\n/** ---------------- 通用方法加载 ---------------- **/\n//加载项目通用文件\nDI()->loader->addDirs('General');\n//通用函数基础类\nDI()->base = new Common_Base();\n\n```\n\n2 拦截器\nPhalApi已经有自带的拦截器，使用时一样需要先注入\n ![PhalApi结构](https://dn-coding-net-production-pp.qbox.me/6b117d2e-ce35-47f8-b084-3c6b15ee4d13.png) \n\n>加入我们需要对`token`进行校验，一些方法是需要验证，有些方法又是不需要验证 `token`.我们需要怎么实现呢?\n\n可以在项目目录 `Config/app.php`进行定义一个数组，数组包括的是需要验证`token`的类方法名\n\n```\n   /**\n     * 需要带Token的接口\n     */\n    apiTokenRules' => array(\n        'User.info',\n        'User.updateInfo',\n    )\n```\n我们定义好相关需要校验`token`的数组，在 Filter下面的 `SimpleToken` 来进行校验,所有的接口访问都会走改注册了的token校验方法,我们就需要在校验方法里面做过滤拦截,\n```\npublic function check() {\n        $service = DI()->request->get('service');\n        $app=DI()->config->get('app');\n        $app = json_decode(json_encode($app),true);\n        $apiTokenRules = $app['apiTokenRules'];\n        if (in_array($service,$apiTokenRules)) {\n            $allParams = DI()->request->getAll();\n            $token = isset($allParams['token']) ? $allParams['token'] : '';\n            $user_id = $allParams['user_id'];\n            if (empty($user_id)){\n                throw new PhalApi_Exception_BadRequest('缺少必要参数user_id');\n            }\n            $service_token = DI()->cache->get($user_id.'token');\n            if (empty($service_token)){\n                throw new PhalApi_Exception_BadRequest('请重新登录',99);\n            }else{\n                if (strcmp($token,$service_token) !== 0){\n                    DI()->logger->debug('Wrong Token', array('needToken' => $service_token));\n                    throw new PhalApi_Exception_BadRequest('Token错误，请重新登录',99);\n                }else{\n                    DI()->cache->set($user_id.'token',$service_token,24*60*60);\n                }\n            }\n        }\n    }\n```\n\n\n### PhalApi 第三方SDK使用集成方法\n>参考大神的OSC@GIT仓库  https://github.com/phalapi/phalapi-library ，仓库有比较多的SDK包 供下载使用 `git clone https://github.com/phalapi/phalapi-library.git`\n\n以短信SMS 容联云短信服务器拓展为例\n>配置方式非常简单只需要把拓展下载下来放入Library文件内即可,然后就可以使用如下方法进行实例,文件名称以`Lite.php` 为准,再到根目录进行注入使用,\n\n```\nDI()->sms= new SMS_Lite();\n```\n\n\n\n参看PhapApi\nhttps://github.com/phalapi/phalapi/\nhttps://www.phalapi.net/\n\n\n\n\n\n\n","slug":"PhalApi框架笔记","published":1,"updated":"2017-07-06T10:29:04.811Z","layout":"post","photos":[],"link":"","_id":"cj4sal6840000ek5b3uldh4yh","content":"<h3 id=\"什么是PhapApi\"><a href=\"#什么是PhapApi\" class=\"headerlink\" title=\"什么是PhapApi\"></a>什么是PhapApi</h3><blockquote>\n<p><a href=\"https://github.com/phalapi/phalapi/\" target=\"_blank\" rel=\"external\">PhalApi</a>是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services，</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">│</div><div class=\"line\">├── PhalApi         <span class=\"comment\">//PhalApi框架，后期可以整包升级</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">├── <span class=\"keyword\">Public</span>          <span class=\"comment\">//对外访问目录，建议隐藏PHP实现</span></div><div class=\"line\">│   └── demo        <span class=\"comment\">//Demo服务访问入口</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">├── Config          <span class=\"comment\">//项目接口公共配置，主要有：app.php, sys.php, dbs.php</span></div><div class=\"line\">├── Data            <span class=\"comment\">//项目接口公共数据</span></div><div class=\"line\">├── Language        <span class=\"comment\">//项目接口公共翻译</span></div><div class=\"line\">├── <span class=\"keyword\">Runtime</span>         <span class=\"comment\">//项目接口运行文件目录，用于存放日记，可软链到别的区</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">└── Demo            <span class=\"comment\">//应用接口服务，名称自取，可多组</span></div><div class=\"line\">    ├── Api             <span class=\"comment\">//接口响应层</span></div><div class=\"line\">    ├── Domain          <span class=\"comment\">//接口领域层</span></div><div class=\"line\">    ├── Model           <span class=\"comment\">//接口持久层</span></div><div class=\"line\">    └── Tests           <span class=\"comment\">//接口单元测试</span></div></pre></td></tr></table></figure>\n<h3 id=\"PhalApi核心思想\"><a href=\"#PhalApi核心思想\" class=\"headerlink\" title=\"PhalApi核心思想\"></a>PhalApi核心思想</h3><blockquote>\n<p>核心思想：DI依赖注入</p>\n</blockquote>\n<p>###PhalApi框架三层结构Api+Domain+Model模式</p>\n<p>1.1 Api层<br>它会通过控制器把请求转发到service层作处理，并将处理结果在页面展示，所以Api更像担当控制器(C)的作用。</p>\n<p>1.2 Domain层</p>\n<p>Domain层主要负责的是具体的业务实现,如数据获取，一个Domain方法就是一个小的业务具体实现(注意尽量把业务划分得细一点方便通用)</p>\n<p>1.3 Model层</p>\n<p>数据库操作单独提炼出来统一处理</p>\n<h3 id=\"PhalApi通用公共函数和-拦截器过滤器\"><a href=\"#PhalApi通用公共函数和-拦截器过滤器\" class=\"headerlink\" title=\"PhalApi通用公共函数和 拦截器过滤器\"></a>PhalApi通用公共函数和 拦截器过滤器</h3><blockquote>\n<p>公用函数和拦截器</p>\n</blockquote>\n<p>1 公共函数</p>\n<p>首先在我们的根目录建立一个文件夹叫做general通用的意思,里面分别有两个文件夹Common(受TP的影响)和Intercept两个文件,我们在里面放入我们自己的文件,当然需要按照正确的规则比如Common_Base等</p>\n<p> 然后我们要使用的话当然要注册我们这个general文件作为自带加载文件,然后注册自己需要用的类,如下在入口文件<code>index.php</code>进行注入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** ---------------- 通用方法加载 ---------------- **/</span></div><div class=\"line\"><span class=\"comment\">//加载项目通用文件</span></div><div class=\"line\">DI()-&gt;loader-&gt;addDirs(<span class=\"string\">'General'</span>);</div><div class=\"line\"><span class=\"comment\">//通用函数基础类</span></div><div class=\"line\">DI()-&gt;base = <span class=\"keyword\">new</span> Common_Base();</div></pre></td></tr></table></figure>\n<p>2 拦截器<br>PhalApi已经有自带的拦截器，使用时一样需要先注入<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/6b117d2e-ce35-47f8-b084-3c6b15ee4d13.png\" alt=\"PhalApi结构\"> </p>\n<blockquote>\n<p>加入我们需要对<code>token</code>进行校验，一些方法是需要验证，有些方法又是不需要验证 <code>token</code>.我们需要怎么实现呢?</p>\n</blockquote>\n<p>可以在项目目录 <code>Config/app.php</code>进行定义一个数组，数组包括的是需要验证<code>token</code>的类方法名</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">  * 需要带<span class=\"type\">Token</span>的接口</div><div class=\"line\">  */</div><div class=\"line\"> apiTokenRules' =&gt; <span class=\"built_in\">array</span>(</div><div class=\"line\">     <span class=\"symbol\">'User</span>.info',</div><div class=\"line\">     <span class=\"symbol\">'User</span>.updateInfo',</div><div class=\"line\"> )</div></pre></td></tr></table></figure>\n<p>我们定义好相关需要校验<code>token</code>的数组，在 Filter下面的 <code>SimpleToken</code> 来进行校验,所有的接口访问都会走改注册了的token校验方法,我们就需要在校验方法里面做过滤拦截,<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        $service = DI()-&gt;request-&gt;get(<span class=\"string\">'service'</span>);</div><div class=\"line\">        $app=DI()-&gt;config-&gt;get(<span class=\"string\">'app'</span>);</div><div class=\"line\">        $app = json_decode(json_encode($app),<span class=\"keyword\">true</span>);</div><div class=\"line\">        $apiTokenRules = $app[<span class=\"string\">'apiTokenRules'</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($service,$apiTokenRules)) &#123;</div><div class=\"line\">            $allParams = DI()-&gt;request-&gt;getAll();</div><div class=\"line\">            $token = <span class=\"keyword\">isset</span>($allParams[<span class=\"string\">'token'</span>]) ? $allParams[<span class=\"string\">'token'</span>] : <span class=\"string\">''</span>;</div><div class=\"line\">            $user_id = $allParams[<span class=\"string\">'user_id'</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($user_id))&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'缺少必要参数user_id'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            $service_token = DI()-&gt;cache-&gt;get($user_id.<span class=\"string\">'token'</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($service_token))&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'请重新登录'</span>,<span class=\"number\">99</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (strcmp($token,$service_token) !== <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                    DI()-&gt;logger-&gt;debug(<span class=\"string\">'Wrong Token'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'needToken'</span> =&gt; $service_token));</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'Token错误，请重新登录'</span>,<span class=\"number\">99</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    DI()-&gt;cache-&gt;set($user_id.<span class=\"string\">'token'</span>,$service_token,<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"PhalApi-第三方SDK使用集成方法\"><a href=\"#PhalApi-第三方SDK使用集成方法\" class=\"headerlink\" title=\"PhalApi 第三方SDK使用集成方法\"></a>PhalApi 第三方SDK使用集成方法</h3><blockquote>\n<p>参考大神的OSC@GIT仓库  <a href=\"https://github.com/phalapi/phalapi-library\" target=\"_blank\" rel=\"external\">https://github.com/phalapi/phalapi-library</a> ，仓库有比较多的SDK包 供下载使用 <code>git clone https://github.com/phalapi/phalapi-library.git</code></p>\n</blockquote>\n<p>以短信SMS 容联云短信服务器拓展为例</p>\n<blockquote>\n<p>配置方式非常简单只需要把拓展下载下来放入Library文件内即可,然后就可以使用如下方法进行实例,文件名称以<code>Lite.php</code> 为准,再到根目录进行注入使用,</p>\n</blockquote>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DI<span class=\"function\"><span class=\"params\">()</span>-&gt;</span>sms= <span class=\"keyword\">new</span> SMS_Lite();</div></pre></td></tr></table></figure>\n<p>参看PhapApi<br><a href=\"https://github.com/phalapi/phalapi/\" target=\"_blank\" rel=\"external\">https://github.com/phalapi/phalapi/</a><br><a href=\"https://www.phalapi.net/\" target=\"_blank\" rel=\"external\">https://www.phalapi.net/</a></p>\n","excerpt":"","more":"<h3 id=\"什么是PhapApi\"><a href=\"#什么是PhapApi\" class=\"headerlink\" title=\"什么是PhapApi\"></a>什么是PhapApi</h3><blockquote>\n<p><a href=\"https://github.com/phalapi/phalapi/\">PhalApi</a>是一个PHP轻量级开源接口框架，致力于快速开发接口服务。 支持HTTP/SOAP/RPC等协议，可用于搭建接口/微服务/RESTful接口/Web Services，</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">│</div><div class=\"line\">├── PhalApi         <span class=\"comment\">//PhalApi框架，后期可以整包升级</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">├── <span class=\"keyword\">Public</span>          <span class=\"comment\">//对外访问目录，建议隐藏PHP实现</span></div><div class=\"line\">│   └── demo        <span class=\"comment\">//Demo服务访问入口</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">├── Config          <span class=\"comment\">//项目接口公共配置，主要有：app.php, sys.php, dbs.php</span></div><div class=\"line\">├── Data            <span class=\"comment\">//项目接口公共数据</span></div><div class=\"line\">├── Language        <span class=\"comment\">//项目接口公共翻译</span></div><div class=\"line\">├── <span class=\"keyword\">Runtime</span>         <span class=\"comment\">//项目接口运行文件目录，用于存放日记，可软链到别的区</span></div><div class=\"line\">│</div><div class=\"line\">│</div><div class=\"line\">└── Demo            <span class=\"comment\">//应用接口服务，名称自取，可多组</span></div><div class=\"line\">    ├── Api             <span class=\"comment\">//接口响应层</span></div><div class=\"line\">    ├── Domain          <span class=\"comment\">//接口领域层</span></div><div class=\"line\">    ├── Model           <span class=\"comment\">//接口持久层</span></div><div class=\"line\">    └── Tests           <span class=\"comment\">//接口单元测试</span></div></pre></td></tr></table></figure>\n<h3 id=\"PhalApi核心思想\"><a href=\"#PhalApi核心思想\" class=\"headerlink\" title=\"PhalApi核心思想\"></a>PhalApi核心思想</h3><blockquote>\n<p>核心思想：DI依赖注入</p>\n</blockquote>\n<p>###PhalApi框架三层结构Api+Domain+Model模式</p>\n<p>1.1 Api层<br>它会通过控制器把请求转发到service层作处理，并将处理结果在页面展示，所以Api更像担当控制器(C)的作用。</p>\n<p>1.2 Domain层</p>\n<p>Domain层主要负责的是具体的业务实现,如数据获取，一个Domain方法就是一个小的业务具体实现(注意尽量把业务划分得细一点方便通用)</p>\n<p>1.3 Model层</p>\n<p>数据库操作单独提炼出来统一处理</p>\n<h3 id=\"PhalApi通用公共函数和-拦截器过滤器\"><a href=\"#PhalApi通用公共函数和-拦截器过滤器\" class=\"headerlink\" title=\"PhalApi通用公共函数和 拦截器过滤器\"></a>PhalApi通用公共函数和 拦截器过滤器</h3><blockquote>\n<p>公用函数和拦截器</p>\n</blockquote>\n<p>1 公共函数</p>\n<p>首先在我们的根目录建立一个文件夹叫做general通用的意思,里面分别有两个文件夹Common(受TP的影响)和Intercept两个文件,我们在里面放入我们自己的文件,当然需要按照正确的规则比如Common_Base等</p>\n<p> 然后我们要使用的话当然要注册我们这个general文件作为自带加载文件,然后注册自己需要用的类,如下在入口文件<code>index.php</code>进行注入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** ---------------- 通用方法加载 ---------------- **/</span></div><div class=\"line\"><span class=\"comment\">//加载项目通用文件</span></div><div class=\"line\">DI()-&gt;loader-&gt;addDirs(<span class=\"string\">'General'</span>);</div><div class=\"line\"><span class=\"comment\">//通用函数基础类</span></div><div class=\"line\">DI()-&gt;base = <span class=\"keyword\">new</span> Common_Base();</div></pre></td></tr></table></figure>\n<p>2 拦截器<br>PhalApi已经有自带的拦截器，使用时一样需要先注入<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/6b117d2e-ce35-47f8-b084-3c6b15ee4d13.png\" alt=\"PhalApi结构\"> </p>\n<blockquote>\n<p>加入我们需要对<code>token</code>进行校验，一些方法是需要验证，有些方法又是不需要验证 <code>token</code>.我们需要怎么实现呢?</p>\n</blockquote>\n<p>可以在项目目录 <code>Config/app.php</code>进行定义一个数组，数组包括的是需要验证<code>token</code>的类方法名</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">  * 需要带<span class=\"type\">Token</span>的接口</div><div class=\"line\">  */</div><div class=\"line\"> apiTokenRules' =&gt; <span class=\"built_in\">array</span>(</div><div class=\"line\">     <span class=\"symbol\">'User</span>.info',</div><div class=\"line\">     <span class=\"symbol\">'User</span>.updateInfo',</div><div class=\"line\"> )</div></pre></td></tr></table></figure>\n<p>我们定义好相关需要校验<code>token</code>的数组，在 Filter下面的 <code>SimpleToken</code> 来进行校验,所有的接口访问都会走改注册了的token校验方法,我们就需要在校验方法里面做过滤拦截,<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        $service = DI()-&gt;request-&gt;get(<span class=\"string\">'service'</span>);</div><div class=\"line\">        $app=DI()-&gt;config-&gt;get(<span class=\"string\">'app'</span>);</div><div class=\"line\">        $app = json_decode(json_encode($app),<span class=\"keyword\">true</span>);</div><div class=\"line\">        $apiTokenRules = $app[<span class=\"string\">'apiTokenRules'</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span> (in_array($service,$apiTokenRules)) &#123;</div><div class=\"line\">            $allParams = DI()-&gt;request-&gt;getAll();</div><div class=\"line\">            $token = <span class=\"keyword\">isset</span>($allParams[<span class=\"string\">'token'</span>]) ? $allParams[<span class=\"string\">'token'</span>] : <span class=\"string\">''</span>;</div><div class=\"line\">            $user_id = $allParams[<span class=\"string\">'user_id'</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($user_id))&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'缺少必要参数user_id'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            $service_token = DI()-&gt;cache-&gt;get($user_id.<span class=\"string\">'token'</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($service_token))&#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'请重新登录'</span>,<span class=\"number\">99</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (strcmp($token,$service_token) !== <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                    DI()-&gt;logger-&gt;debug(<span class=\"string\">'Wrong Token'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'needToken'</span> =&gt; $service_token));</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhalApi_Exception_BadRequest(<span class=\"string\">'Token错误，请重新登录'</span>,<span class=\"number\">99</span>);</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    DI()-&gt;cache-&gt;set($user_id.<span class=\"string\">'token'</span>,$service_token,<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"PhalApi-第三方SDK使用集成方法\"><a href=\"#PhalApi-第三方SDK使用集成方法\" class=\"headerlink\" title=\"PhalApi 第三方SDK使用集成方法\"></a>PhalApi 第三方SDK使用集成方法</h3><blockquote>\n<p>参考大神的OSC@GIT仓库  <a href=\"https://github.com/phalapi/phalapi-library\">https://github.com/phalapi/phalapi-library</a> ，仓库有比较多的SDK包 供下载使用 <code>git clone https://github.com/phalapi/phalapi-library.git</code></p>\n</blockquote>\n<p>以短信SMS 容联云短信服务器拓展为例</p>\n<blockquote>\n<p>配置方式非常简单只需要把拓展下载下来放入Library文件内即可,然后就可以使用如下方法进行实例,文件名称以<code>Lite.php</code> 为准,再到根目录进行注入使用,</p>\n</blockquote>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DI<span class=\"function\"><span class=\"params\">()</span>-&gt;</span>sms= <span class=\"keyword\">new</span> SMS_Lite();</div></pre></td></tr></table></figure>\n<p>参看PhapApi<br><a href=\"https://github.com/phalapi/phalapi/\">https://github.com/phalapi/phalapi/</a><br><a href=\"https://www.phalapi.net/\">https://www.phalapi.net/</a></p>\n"},{"title":"Github上整理的日常发现的好资源","layout":"post","date":"2016-09-29T03:44:55.000Z","keywords":"web","description":"Github上整理的日常发现的好资源。","_content":"\n# Github上整理的日常发现的好资源\n\n\n* * *\n\n#### [收录日常发现的好的文章和资源](https://github.com/poetries/mywiki/issues)\n\n* * *\n\n### 缓解疲劳的网站\n\n*   [Calm](https://www.calm.com/)\n*   [donothingfor2minute](http://www.donothingfor2minutes.com/)\n*   [A Soft Murmur](http://asoftmurmur.com/)\n\n* * *\n\n### 时间笔记项目管理\n\n*   [为知笔记](http://www.wiz.cn/)\n*   [番茄时间管理](http://alloyteam.github.io/AlloyTimer/)\n*   [奇妙清单-解决问题：明确每日工作目标和清单](https://www.wunderlist.com/zh/)\n*   [高效To Do-解决问题：每日待办的轻重缓急一目了然](http://www.gxtodo.com/)\n*   [坚果云-解决问题：工作资料的同步备份和快速搜索](https://www.jianguoyun.com/)\n*   [Pocket-解决问题：工作时间看到的好内容收集](https://getpocket.com/)\n*   [Outlook-解决问题：治好了手机上翻墙才能用的Gmail](https://www.microsoft.com/zh-cn/outlook-com/)\n*   [XMind](http://www.xmindchina.net/)\n*   [百度脑图](http://naotu.baidu.com/)\n*   [好用的思维导图](https://www.processon.com)\n*   [墨刀 - 免费的移动应用原型与线框图工具](https://modao.cc/)\n*   [Teambition-最好用的团队协作平台--项目管理](https://www.teambition.com)\n*   [优质的mardown在线写作平台](http://markdown.xiaoshujiang.com/)\n\n* * *\n\n### 参考类\n\n*   [秀米 XIUMI | 秀米 XIUMI](http://xiumi.us/)\n*   [易企秀|免费移动场景应用自营销管家](http://eqxiu.com/#/home)\n*   [云来·中国最大的移动APP云服务提供商](http://www.liveapp.cn/)\n\n* * *\n\n### 导航类\n\n*   前端\n\n    *   [一个很酷炫的前端网站搜集器--推荐](http://jsdig.com/)\n    *   [最牛前端](http://f2er.club/)\n    *   [前端网址导航 - WHYCSS](http://whycss.com/)\n    *   [大前端](http://www.daqianduan.com/nav)\n    *   [前端导航网址](http://caibaojian.com/links)\n    *   [前端网址导航 - WHYCSS](http://whycss.com/)\n    *   [前端圈 - 江湖录 - 前端导航](http://sentsin.com/daohang/)\n    *   [前端开发仓库](http://code.ciaoca.com/)\n    *   [前端收藏夹](http://collect.w3ctrain.com/)\n    *   [F2E 前端导航 - 前端工程师专用的导航](http://f2e.im/static/pages/nav/index.html)\n    *   [菜鸟教程](http://www.runoob.com/)\n    *   [菜鸟导航](http://www.runoob.com/w3cnav)\n    *   [前端工程师专用的导航站](http://www.css88.com/nav/)\n    *   [各种框架汇总](https://www.awesomes.cn/repos/Applications/Frameworks)\n    *   [伯乐在线](http://hao.jobbole.com/#rd)\n    *   [fks_chart](http://html5ify.com/fks/fks_chart/)\n    *   [前端工具汇集](http://www.w3cplus.com/source/front-end-developer-excellent-tool.html)\n\n*   大数据\n\n    *   [大数据工具导航](http://hao.199it.com/)\n\n*   搜素\n\n    *   [快搜--好用](http://so.chongbuluo.com/)\n    *   [网盘检索工具](http://www.xilinjie.com)\n*   设计\n\n    *   [设计导航](http://hao.shejidaren.com/)\n    *   [admire-每天发现一个好链接](https://admire.so/)\n    *   [优设网导航](http://hao.uisdc.com/)\n    *   [专注于PPT设计的导航站](http://hippter.com/)\n    *   [图灵创意导航](http://turingchina.cn/)\n    *   [网站设计-自动给出最佳配色](http://www.materialpalette.com/)\n    *   [用户体验导航](http://www.uedh.cn/index.php)\n\n* * *\n\n### 在线学习好去处\n\n*   国内：\n\n    *   [实验楼](https://www.shiyanlou.com)\n    *   [慕课网](http://imooc.com)\n    *   [网易云课堂](http://study.163.com/)\n    *   [极客学院](http://www.jikexueyuan.com/)\n*   国外：\n\n    *   [可汗学院](https://www.khanacademy.org/)\n    *   [coursera](https://www.coursera.org/)\n    *   [codeschool](https://www.codeschool.com/learn)\n    *   [Edx](https://www.edx.org/)\n\n* * *\n\n## Resource 以下是分类汇总\n\n*   [ToolBox](https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md)\n*   [Front-End-develop-Tools](https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md)\n*   [Blog-国内前端博客](https://github.com/poetries/mywiki/blob/master/bookmark/Blog.md)\n*   [HTML](https://github.com/poetries/mywiki/blob/master/bookmark/HTML.md)\n*   [CSS](https://github.com/poetries/mywiki/blob/master/bookmark/CSS.md)\n*   [Javascript](https://github.com/poetries/mywiki/blob/master/bookmark/Javascript.md)\n*   [UED](https://github.com/poetries/mywiki/blob/master/bookmark/UED.md)\n*   [UI](https://github.com/poetries/mywiki/blob/master/bookmark/UI.md)\n*   [VPN](https://github.com/poetries/mywiki/blob/master/bookmark/VPN.md)\n*   [IP-Info](https://github.com/poetries/mywiki/blob/master/bookmark/IP-Info.md)\n*   [设计-ICON资源](https://github.com/poetries/mywiki/blob/master/bookmark/%E8%AE%BE%E8%AE%A1.md)\n*   [前端工程构建](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA.md)\n*   [实用参考手册](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md)\n*   [兼容性](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%85%BC%E5%AE%B9%E6%80%A7.md)\n*   [移动前端开发](https://github.com/poetries/mywiki/blob/master/bookmark/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md)\n*   [性能](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%80%A7%E8%83%BD.md)\n*   [数据管理](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86.md)\n*   [在线代码运行](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C.md)\n*   [插件库](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md)\n*   [sublime专题](https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md)\n*   [Sublime常用插件总结](https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md)\n*   [速查表](https://github.com/poetries/mywiki/blob/master/bookmark/%E9%80%9F%E6%9F%A5%E8%A1%A8.md)\n*   [常用库与框架的使用文档](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.md)\n*   [编码规范](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md)\n*   [Git--SVN-Github](https://github.com/poetries/mywiki/blob/master/bookmark/Git--SVN-Github.md)\n*   [开发工具类](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.md)\n*   [各大公司开源项目](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%90%84%E5%A4%A7%E5%85%AC%E5%8F%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.md)\n*   [作品集](https://github.com/poetries/mywiki/blob/master/bookmark/%E4%BD%9C%E5%93%81%E9%9B%86.md)\n*   [程序员简历模板系列](https://github.com/hacke2/ResumeSample)\n*   [在线个人简历](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.md)\n\n* * *\n\n#转载:http://www.jianshu.com/p/73df789e8710","source":"_posts/GitHubShare.md","raw":"---\ntitle: Github上整理的日常发现的好资源\nlayout: post\ndate: 2016-9-29 11:44:55\ncategories: web\ntags: [web,GitHub]\nkeywords: web\ndescription: Github上整理的日常发现的好资源。\n---\n\n# Github上整理的日常发现的好资源\n\n\n* * *\n\n#### [收录日常发现的好的文章和资源](https://github.com/poetries/mywiki/issues)\n\n* * *\n\n### 缓解疲劳的网站\n\n*   [Calm](https://www.calm.com/)\n*   [donothingfor2minute](http://www.donothingfor2minutes.com/)\n*   [A Soft Murmur](http://asoftmurmur.com/)\n\n* * *\n\n### 时间笔记项目管理\n\n*   [为知笔记](http://www.wiz.cn/)\n*   [番茄时间管理](http://alloyteam.github.io/AlloyTimer/)\n*   [奇妙清单-解决问题：明确每日工作目标和清单](https://www.wunderlist.com/zh/)\n*   [高效To Do-解决问题：每日待办的轻重缓急一目了然](http://www.gxtodo.com/)\n*   [坚果云-解决问题：工作资料的同步备份和快速搜索](https://www.jianguoyun.com/)\n*   [Pocket-解决问题：工作时间看到的好内容收集](https://getpocket.com/)\n*   [Outlook-解决问题：治好了手机上翻墙才能用的Gmail](https://www.microsoft.com/zh-cn/outlook-com/)\n*   [XMind](http://www.xmindchina.net/)\n*   [百度脑图](http://naotu.baidu.com/)\n*   [好用的思维导图](https://www.processon.com)\n*   [墨刀 - 免费的移动应用原型与线框图工具](https://modao.cc/)\n*   [Teambition-最好用的团队协作平台--项目管理](https://www.teambition.com)\n*   [优质的mardown在线写作平台](http://markdown.xiaoshujiang.com/)\n\n* * *\n\n### 参考类\n\n*   [秀米 XIUMI | 秀米 XIUMI](http://xiumi.us/)\n*   [易企秀|免费移动场景应用自营销管家](http://eqxiu.com/#/home)\n*   [云来·中国最大的移动APP云服务提供商](http://www.liveapp.cn/)\n\n* * *\n\n### 导航类\n\n*   前端\n\n    *   [一个很酷炫的前端网站搜集器--推荐](http://jsdig.com/)\n    *   [最牛前端](http://f2er.club/)\n    *   [前端网址导航 - WHYCSS](http://whycss.com/)\n    *   [大前端](http://www.daqianduan.com/nav)\n    *   [前端导航网址](http://caibaojian.com/links)\n    *   [前端网址导航 - WHYCSS](http://whycss.com/)\n    *   [前端圈 - 江湖录 - 前端导航](http://sentsin.com/daohang/)\n    *   [前端开发仓库](http://code.ciaoca.com/)\n    *   [前端收藏夹](http://collect.w3ctrain.com/)\n    *   [F2E 前端导航 - 前端工程师专用的导航](http://f2e.im/static/pages/nav/index.html)\n    *   [菜鸟教程](http://www.runoob.com/)\n    *   [菜鸟导航](http://www.runoob.com/w3cnav)\n    *   [前端工程师专用的导航站](http://www.css88.com/nav/)\n    *   [各种框架汇总](https://www.awesomes.cn/repos/Applications/Frameworks)\n    *   [伯乐在线](http://hao.jobbole.com/#rd)\n    *   [fks_chart](http://html5ify.com/fks/fks_chart/)\n    *   [前端工具汇集](http://www.w3cplus.com/source/front-end-developer-excellent-tool.html)\n\n*   大数据\n\n    *   [大数据工具导航](http://hao.199it.com/)\n\n*   搜素\n\n    *   [快搜--好用](http://so.chongbuluo.com/)\n    *   [网盘检索工具](http://www.xilinjie.com)\n*   设计\n\n    *   [设计导航](http://hao.shejidaren.com/)\n    *   [admire-每天发现一个好链接](https://admire.so/)\n    *   [优设网导航](http://hao.uisdc.com/)\n    *   [专注于PPT设计的导航站](http://hippter.com/)\n    *   [图灵创意导航](http://turingchina.cn/)\n    *   [网站设计-自动给出最佳配色](http://www.materialpalette.com/)\n    *   [用户体验导航](http://www.uedh.cn/index.php)\n\n* * *\n\n### 在线学习好去处\n\n*   国内：\n\n    *   [实验楼](https://www.shiyanlou.com)\n    *   [慕课网](http://imooc.com)\n    *   [网易云课堂](http://study.163.com/)\n    *   [极客学院](http://www.jikexueyuan.com/)\n*   国外：\n\n    *   [可汗学院](https://www.khanacademy.org/)\n    *   [coursera](https://www.coursera.org/)\n    *   [codeschool](https://www.codeschool.com/learn)\n    *   [Edx](https://www.edx.org/)\n\n* * *\n\n## Resource 以下是分类汇总\n\n*   [ToolBox](https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md)\n*   [Front-End-develop-Tools](https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md)\n*   [Blog-国内前端博客](https://github.com/poetries/mywiki/blob/master/bookmark/Blog.md)\n*   [HTML](https://github.com/poetries/mywiki/blob/master/bookmark/HTML.md)\n*   [CSS](https://github.com/poetries/mywiki/blob/master/bookmark/CSS.md)\n*   [Javascript](https://github.com/poetries/mywiki/blob/master/bookmark/Javascript.md)\n*   [UED](https://github.com/poetries/mywiki/blob/master/bookmark/UED.md)\n*   [UI](https://github.com/poetries/mywiki/blob/master/bookmark/UI.md)\n*   [VPN](https://github.com/poetries/mywiki/blob/master/bookmark/VPN.md)\n*   [IP-Info](https://github.com/poetries/mywiki/blob/master/bookmark/IP-Info.md)\n*   [设计-ICON资源](https://github.com/poetries/mywiki/blob/master/bookmark/%E8%AE%BE%E8%AE%A1.md)\n*   [前端工程构建](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA.md)\n*   [实用参考手册](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md)\n*   [兼容性](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%85%BC%E5%AE%B9%E6%80%A7.md)\n*   [移动前端开发](https://github.com/poetries/mywiki/blob/master/bookmark/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md)\n*   [性能](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%80%A7%E8%83%BD.md)\n*   [数据管理](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86.md)\n*   [在线代码运行](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C.md)\n*   [插件库](https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md)\n*   [sublime专题](https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md)\n*   [Sublime常用插件总结](https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md)\n*   [速查表](https://github.com/poetries/mywiki/blob/master/bookmark/%E9%80%9F%E6%9F%A5%E8%A1%A8.md)\n*   [常用库与框架的使用文档](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.md)\n*   [编码规范](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md)\n*   [Git--SVN-Github](https://github.com/poetries/mywiki/blob/master/bookmark/Git--SVN-Github.md)\n*   [开发工具类](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.md)\n*   [各大公司开源项目](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%90%84%E5%A4%A7%E5%85%AC%E5%8F%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.md)\n*   [作品集](https://github.com/poetries/mywiki/blob/master/bookmark/%E4%BD%9C%E5%93%81%E9%9B%86.md)\n*   [程序员简历模板系列](https://github.com/hacke2/ResumeSample)\n*   [在线个人简历](https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.md)\n\n* * *\n\n#转载:http://www.jianshu.com/p/73df789e8710","slug":"GitHubShare","published":1,"updated":"2016-11-30T02:21:05.756Z","comments":1,"photos":[],"link":"","_id":"cj4sal68a0002ek5b8jg5i9x6","content":"<h1 id=\"Github上整理的日常发现的好资源\"><a href=\"#Github上整理的日常发现的好资源\" class=\"headerlink\" title=\"Github上整理的日常发现的好资源\"></a>Github上整理的日常发现的好资源</h1><hr>\n<h4 id=\"收录日常发现的好的文章和资源\"><a href=\"#收录日常发现的好的文章和资源\" class=\"headerlink\" title=\"收录日常发现的好的文章和资源\"></a><a href=\"https://github.com/poetries/mywiki/issues\" target=\"_blank\" rel=\"external\">收录日常发现的好的文章和资源</a></h4><hr>\n<h3 id=\"缓解疲劳的网站\"><a href=\"#缓解疲劳的网站\" class=\"headerlink\" title=\"缓解疲劳的网站\"></a>缓解疲劳的网站</h3><ul>\n<li><a href=\"https://www.calm.com/\" target=\"_blank\" rel=\"external\">Calm</a></li>\n<li><a href=\"http://www.donothingfor2minutes.com/\" target=\"_blank\" rel=\"external\">donothingfor2minute</a></li>\n<li><a href=\"http://asoftmurmur.com/\" target=\"_blank\" rel=\"external\">A Soft Murmur</a></li>\n</ul>\n<hr>\n<h3 id=\"时间笔记项目管理\"><a href=\"#时间笔记项目管理\" class=\"headerlink\" title=\"时间笔记项目管理\"></a>时间笔记项目管理</h3><ul>\n<li><a href=\"http://www.wiz.cn/\" target=\"_blank\" rel=\"external\">为知笔记</a></li>\n<li><a href=\"http://alloyteam.github.io/AlloyTimer/\" target=\"_blank\" rel=\"external\">番茄时间管理</a></li>\n<li><a href=\"https://www.wunderlist.com/zh/\" target=\"_blank\" rel=\"external\">奇妙清单-解决问题：明确每日工作目标和清单</a></li>\n<li><a href=\"http://www.gxtodo.com/\" target=\"_blank\" rel=\"external\">高效To Do-解决问题：每日待办的轻重缓急一目了然</a></li>\n<li><a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"external\">坚果云-解决问题：工作资料的同步备份和快速搜索</a></li>\n<li><a href=\"https://getpocket.com/\" target=\"_blank\" rel=\"external\">Pocket-解决问题：工作时间看到的好内容收集</a></li>\n<li><a href=\"https://www.microsoft.com/zh-cn/outlook-com/\" target=\"_blank\" rel=\"external\">Outlook-解决问题：治好了手机上翻墙才能用的Gmail</a></li>\n<li><a href=\"http://www.xmindchina.net/\" target=\"_blank\" rel=\"external\">XMind</a></li>\n<li><a href=\"http://naotu.baidu.com/\" target=\"_blank\" rel=\"external\">百度脑图</a></li>\n<li><a href=\"https://www.processon.com\" target=\"_blank\" rel=\"external\">好用的思维导图</a></li>\n<li><a href=\"https://modao.cc/\" target=\"_blank\" rel=\"external\">墨刀 - 免费的移动应用原型与线框图工具</a></li>\n<li><a href=\"https://www.teambition.com\" target=\"_blank\" rel=\"external\">Teambition-最好用的团队协作平台–项目管理</a></li>\n<li><a href=\"http://markdown.xiaoshujiang.com/\" target=\"_blank\" rel=\"external\">优质的mardown在线写作平台</a></li>\n</ul>\n<hr>\n<h3 id=\"参考类\"><a href=\"#参考类\" class=\"headerlink\" title=\"参考类\"></a>参考类</h3><ul>\n<li><a href=\"http://xiumi.us/\" target=\"_blank\" rel=\"external\">秀米 XIUMI | 秀米 XIUMI</a></li>\n<li><a href=\"http://eqxiu.com/#/home\" target=\"_blank\" rel=\"external\">易企秀|免费移动场景应用自营销管家</a></li>\n<li><a href=\"http://www.liveapp.cn/\" target=\"_blank\" rel=\"external\">云来·中国最大的移动APP云服务提供商</a></li>\n</ul>\n<hr>\n<h3 id=\"导航类\"><a href=\"#导航类\" class=\"headerlink\" title=\"导航类\"></a>导航类</h3><ul>\n<li><p>前端</p>\n<ul>\n<li><a href=\"http://jsdig.com/\" target=\"_blank\" rel=\"external\">一个很酷炫的前端网站搜集器–推荐</a></li>\n<li><a href=\"http://f2er.club/\" target=\"_blank\" rel=\"external\">最牛前端</a></li>\n<li><a href=\"http://whycss.com/\" target=\"_blank\" rel=\"external\">前端网址导航 - WHYCSS</a></li>\n<li><a href=\"http://www.daqianduan.com/nav\" target=\"_blank\" rel=\"external\">大前端</a></li>\n<li><a href=\"http://caibaojian.com/links\" target=\"_blank\" rel=\"external\">前端导航网址</a></li>\n<li><a href=\"http://whycss.com/\" target=\"_blank\" rel=\"external\">前端网址导航 - WHYCSS</a></li>\n<li><a href=\"http://sentsin.com/daohang/\" target=\"_blank\" rel=\"external\">前端圈 - 江湖录 - 前端导航</a></li>\n<li><a href=\"http://code.ciaoca.com/\" target=\"_blank\" rel=\"external\">前端开发仓库</a></li>\n<li><a href=\"http://collect.w3ctrain.com/\" target=\"_blank\" rel=\"external\">前端收藏夹</a></li>\n<li><a href=\"http://f2e.im/static/pages/nav/index.html\" target=\"_blank\" rel=\"external\">F2E 前端导航 - 前端工程师专用的导航</a></li>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">菜鸟教程</a></li>\n<li><a href=\"http://www.runoob.com/w3cnav\" target=\"_blank\" rel=\"external\">菜鸟导航</a></li>\n<li><a href=\"http://www.css88.com/nav/\" target=\"_blank\" rel=\"external\">前端工程师专用的导航站</a></li>\n<li><a href=\"https://www.awesomes.cn/repos/Applications/Frameworks\" target=\"_blank\" rel=\"external\">各种框架汇总</a></li>\n<li><a href=\"http://hao.jobbole.com/#rd\" target=\"_blank\" rel=\"external\">伯乐在线</a></li>\n<li><a href=\"http://html5ify.com/fks/fks_chart/\" target=\"_blank\" rel=\"external\">fks_chart</a></li>\n<li><a href=\"http://www.w3cplus.com/source/front-end-developer-excellent-tool.html\" target=\"_blank\" rel=\"external\">前端工具汇集</a></li>\n</ul>\n</li>\n<li><p>大数据</p>\n<ul>\n<li><a href=\"http://hao.199it.com/\" target=\"_blank\" rel=\"external\">大数据工具导航</a></li>\n</ul>\n</li>\n<li><p>搜素</p>\n<ul>\n<li><a href=\"http://so.chongbuluo.com/\" target=\"_blank\" rel=\"external\">快搜–好用</a></li>\n<li><a href=\"http://www.xilinjie.com\" target=\"_blank\" rel=\"external\">网盘检索工具</a></li>\n</ul>\n</li>\n<li><p>设计</p>\n<ul>\n<li><a href=\"http://hao.shejidaren.com/\" target=\"_blank\" rel=\"external\">设计导航</a></li>\n<li><a href=\"https://admire.so/\" target=\"_blank\" rel=\"external\">admire-每天发现一个好链接</a></li>\n<li><a href=\"http://hao.uisdc.com/\" target=\"_blank\" rel=\"external\">优设网导航</a></li>\n<li><a href=\"http://hippter.com/\" target=\"_blank\" rel=\"external\">专注于PPT设计的导航站</a></li>\n<li><a href=\"http://turingchina.cn/\" target=\"_blank\" rel=\"external\">图灵创意导航</a></li>\n<li><a href=\"http://www.materialpalette.com/\" target=\"_blank\" rel=\"external\">网站设计-自动给出最佳配色</a></li>\n<li><a href=\"http://www.uedh.cn/index.php\" target=\"_blank\" rel=\"external\">用户体验导航</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"在线学习好去处\"><a href=\"#在线学习好去处\" class=\"headerlink\" title=\"在线学习好去处\"></a>在线学习好去处</h3><ul>\n<li><p>国内：</p>\n<ul>\n<li><a href=\"https://www.shiyanlou.com\" target=\"_blank\" rel=\"external\">实验楼</a></li>\n<li><a href=\"http://imooc.com\" target=\"_blank\" rel=\"external\">慕课网</a></li>\n<li><a href=\"http://study.163.com/\" target=\"_blank\" rel=\"external\">网易云课堂</a></li>\n<li><a href=\"http://www.jikexueyuan.com/\" target=\"_blank\" rel=\"external\">极客学院</a></li>\n</ul>\n</li>\n<li><p>国外：</p>\n<ul>\n<li><a href=\"https://www.khanacademy.org/\" target=\"_blank\" rel=\"external\">可汗学院</a></li>\n<li><a href=\"https://www.coursera.org/\" target=\"_blank\" rel=\"external\">coursera</a></li>\n<li><a href=\"https://www.codeschool.com/learn\" target=\"_blank\" rel=\"external\">codeschool</a></li>\n<li><a href=\"https://www.edx.org/\" target=\"_blank\" rel=\"external\">Edx</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Resource-以下是分类汇总\"><a href=\"#Resource-以下是分类汇总\" class=\"headerlink\" title=\"Resource 以下是分类汇总\"></a>Resource 以下是分类汇总</h2><ul>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md\" target=\"_blank\" rel=\"external\">ToolBox</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md\" target=\"_blank\" rel=\"external\">Front-End-develop-Tools</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Blog.md\" target=\"_blank\" rel=\"external\">Blog-国内前端博客</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/HTML.md\" target=\"_blank\" rel=\"external\">HTML</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/CSS.md\" target=\"_blank\" rel=\"external\">CSS</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Javascript.md\" target=\"_blank\" rel=\"external\">Javascript</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/UED.md\" target=\"_blank\" rel=\"external\">UED</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/UI.md\" target=\"_blank\" rel=\"external\">UI</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/VPN.md\" target=\"_blank\" rel=\"external\">VPN</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/IP-Info.md\" target=\"_blank\" rel=\"external\">IP-Info</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E8%AE%BE%E8%AE%A1.md\" target=\"_blank\" rel=\"external\">设计-ICON资源</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA.md\" target=\"_blank\" rel=\"external\">前端工程构建</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md\" target=\"_blank\" rel=\"external\">实用参考手册</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%85%BC%E5%AE%B9%E6%80%A7.md\" target=\"_blank\" rel=\"external\">兼容性</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md\" target=\"_blank\" rel=\"external\">移动前端开发</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%80%A7%E8%83%BD.md\" target=\"_blank\" rel=\"external\">性能</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86.md\" target=\"_blank\" rel=\"external\">数据管理</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C.md\" target=\"_blank\" rel=\"external\">在线代码运行</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md\" target=\"_blank\" rel=\"external\">插件库</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md\" target=\"_blank\" rel=\"external\">sublime专题</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md\" target=\"_blank\" rel=\"external\">Sublime常用插件总结</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E9%80%9F%E6%9F%A5%E8%A1%A8.md\" target=\"_blank\" rel=\"external\">速查表</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.md\" target=\"_blank\" rel=\"external\">常用库与框架的使用文档</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\" target=\"_blank\" rel=\"external\">编码规范</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Git--SVN-Github.md\" target=\"_blank\" rel=\"external\">Git–SVN-Github</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.md\" target=\"_blank\" rel=\"external\">开发工具类</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%90%84%E5%A4%A7%E5%85%AC%E5%8F%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.md\" target=\"_blank\" rel=\"external\">各大公司开源项目</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E4%BD%9C%E5%93%81%E9%9B%86.md\" target=\"_blank\" rel=\"external\">作品集</a></li>\n<li><a href=\"https://github.com/hacke2/ResumeSample\" target=\"_blank\" rel=\"external\">程序员简历模板系列</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.md\" target=\"_blank\" rel=\"external\">在线个人简历</a></li>\n</ul>\n<hr>\n<p>#转载:<a href=\"http://www.jianshu.com/p/73df789e8710\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/73df789e8710</a></p>\n","excerpt":"","more":"<h1 id=\"Github上整理的日常发现的好资源\"><a href=\"#Github上整理的日常发现的好资源\" class=\"headerlink\" title=\"Github上整理的日常发现的好资源\"></a>Github上整理的日常发现的好资源</h1><hr>\n<h4 id=\"收录日常发现的好的文章和资源\"><a href=\"#收录日常发现的好的文章和资源\" class=\"headerlink\" title=\"收录日常发现的好的文章和资源\"></a><a href=\"https://github.com/poetries/mywiki/issues\">收录日常发现的好的文章和资源</a></h4><hr>\n<h3 id=\"缓解疲劳的网站\"><a href=\"#缓解疲劳的网站\" class=\"headerlink\" title=\"缓解疲劳的网站\"></a>缓解疲劳的网站</h3><ul>\n<li><a href=\"https://www.calm.com/\">Calm</a></li>\n<li><a href=\"http://www.donothingfor2minutes.com/\">donothingfor2minute</a></li>\n<li><a href=\"http://asoftmurmur.com/\">A Soft Murmur</a></li>\n</ul>\n<hr>\n<h3 id=\"时间笔记项目管理\"><a href=\"#时间笔记项目管理\" class=\"headerlink\" title=\"时间笔记项目管理\"></a>时间笔记项目管理</h3><ul>\n<li><a href=\"http://www.wiz.cn/\">为知笔记</a></li>\n<li><a href=\"http://alloyteam.github.io/AlloyTimer/\">番茄时间管理</a></li>\n<li><a href=\"https://www.wunderlist.com/zh/\">奇妙清单-解决问题：明确每日工作目标和清单</a></li>\n<li><a href=\"http://www.gxtodo.com/\">高效To Do-解决问题：每日待办的轻重缓急一目了然</a></li>\n<li><a href=\"https://www.jianguoyun.com/\">坚果云-解决问题：工作资料的同步备份和快速搜索</a></li>\n<li><a href=\"https://getpocket.com/\">Pocket-解决问题：工作时间看到的好内容收集</a></li>\n<li><a href=\"https://www.microsoft.com/zh-cn/outlook-com/\">Outlook-解决问题：治好了手机上翻墙才能用的Gmail</a></li>\n<li><a href=\"http://www.xmindchina.net/\">XMind</a></li>\n<li><a href=\"http://naotu.baidu.com/\">百度脑图</a></li>\n<li><a href=\"https://www.processon.com\">好用的思维导图</a></li>\n<li><a href=\"https://modao.cc/\">墨刀 - 免费的移动应用原型与线框图工具</a></li>\n<li><a href=\"https://www.teambition.com\">Teambition-最好用的团队协作平台–项目管理</a></li>\n<li><a href=\"http://markdown.xiaoshujiang.com/\">优质的mardown在线写作平台</a></li>\n</ul>\n<hr>\n<h3 id=\"参考类\"><a href=\"#参考类\" class=\"headerlink\" title=\"参考类\"></a>参考类</h3><ul>\n<li><a href=\"http://xiumi.us/\">秀米 XIUMI | 秀米 XIUMI</a></li>\n<li><a href=\"http://eqxiu.com/#/home\">易企秀|免费移动场景应用自营销管家</a></li>\n<li><a href=\"http://www.liveapp.cn/\">云来·中国最大的移动APP云服务提供商</a></li>\n</ul>\n<hr>\n<h3 id=\"导航类\"><a href=\"#导航类\" class=\"headerlink\" title=\"导航类\"></a>导航类</h3><ul>\n<li><p>前端</p>\n<ul>\n<li><a href=\"http://jsdig.com/\">一个很酷炫的前端网站搜集器–推荐</a></li>\n<li><a href=\"http://f2er.club/\">最牛前端</a></li>\n<li><a href=\"http://whycss.com/\">前端网址导航 - WHYCSS</a></li>\n<li><a href=\"http://www.daqianduan.com/nav\">大前端</a></li>\n<li><a href=\"http://caibaojian.com/links\">前端导航网址</a></li>\n<li><a href=\"http://whycss.com/\">前端网址导航 - WHYCSS</a></li>\n<li><a href=\"http://sentsin.com/daohang/\">前端圈 - 江湖录 - 前端导航</a></li>\n<li><a href=\"http://code.ciaoca.com/\">前端开发仓库</a></li>\n<li><a href=\"http://collect.w3ctrain.com/\">前端收藏夹</a></li>\n<li><a href=\"http://f2e.im/static/pages/nav/index.html\">F2E 前端导航 - 前端工程师专用的导航</a></li>\n<li><a href=\"http://www.runoob.com/\">菜鸟教程</a></li>\n<li><a href=\"http://www.runoob.com/w3cnav\">菜鸟导航</a></li>\n<li><a href=\"http://www.css88.com/nav/\">前端工程师专用的导航站</a></li>\n<li><a href=\"https://www.awesomes.cn/repos/Applications/Frameworks\">各种框架汇总</a></li>\n<li><a href=\"http://hao.jobbole.com/#rd\">伯乐在线</a></li>\n<li><a href=\"http://html5ify.com/fks/fks_chart/\">fks_chart</a></li>\n<li><a href=\"http://www.w3cplus.com/source/front-end-developer-excellent-tool.html\">前端工具汇集</a></li>\n</ul>\n</li>\n<li><p>大数据</p>\n<ul>\n<li><a href=\"http://hao.199it.com/\">大数据工具导航</a></li>\n</ul>\n</li>\n<li><p>搜素</p>\n<ul>\n<li><a href=\"http://so.chongbuluo.com/\">快搜–好用</a></li>\n<li><a href=\"http://www.xilinjie.com\">网盘检索工具</a></li>\n</ul>\n</li>\n<li><p>设计</p>\n<ul>\n<li><a href=\"http://hao.shejidaren.com/\">设计导航</a></li>\n<li><a href=\"https://admire.so/\">admire-每天发现一个好链接</a></li>\n<li><a href=\"http://hao.uisdc.com/\">优设网导航</a></li>\n<li><a href=\"http://hippter.com/\">专注于PPT设计的导航站</a></li>\n<li><a href=\"http://turingchina.cn/\">图灵创意导航</a></li>\n<li><a href=\"http://www.materialpalette.com/\">网站设计-自动给出最佳配色</a></li>\n<li><a href=\"http://www.uedh.cn/index.php\">用户体验导航</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"在线学习好去处\"><a href=\"#在线学习好去处\" class=\"headerlink\" title=\"在线学习好去处\"></a>在线学习好去处</h3><ul>\n<li><p>国内：</p>\n<ul>\n<li><a href=\"https://www.shiyanlou.com\">实验楼</a></li>\n<li><a href=\"http://imooc.com\">慕课网</a></li>\n<li><a href=\"http://study.163.com/\">网易云课堂</a></li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a></li>\n</ul>\n</li>\n<li><p>国外：</p>\n<ul>\n<li><a href=\"https://www.khanacademy.org/\">可汗学院</a></li>\n<li><a href=\"https://www.coursera.org/\">coursera</a></li>\n<li><a href=\"https://www.codeschool.com/learn\">codeschool</a></li>\n<li><a href=\"https://www.edx.org/\">Edx</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Resource-以下是分类汇总\"><a href=\"#Resource-以下是分类汇总\" class=\"headerlink\" title=\"Resource 以下是分类汇总\"></a>Resource 以下是分类汇总</h2><ul>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md\">ToolBox</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md\">Front-End-develop-Tools</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Blog.md\">Blog-国内前端博客</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/HTML.md\">HTML</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/CSS.md\">CSS</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Javascript.md\">Javascript</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/UED.md\">UED</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/UI.md\">UI</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/VPN.md\">VPN</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/IP-Info.md\">IP-Info</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E8%AE%BE%E8%AE%A1.md\">设计-ICON资源</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA.md\">前端工程构建</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%AE%9E%E7%94%A8%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8CAPI.md\">实用参考手册</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%85%BC%E5%AE%B9%E6%80%A7.md\">兼容性</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.md\">移动前端开发</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%80%A7%E8%83%BD.md\">性能</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86.md\">数据管理</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C.md\">在线代码运行</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E6%8F%92%E4%BB%B6%E5%BA%93.md\">插件库</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md\">sublime专题</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md\">Sublime常用插件总结</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E9%80%9F%E6%9F%A5%E8%A1%A8.md\">速查表</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%B8%B8%E7%94%A8%E5%BA%93%E4%B8%8E%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.md\">常用库与框架的使用文档</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">编码规范</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/Git--SVN-Github.md\">Git–SVN-Github</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.md\">开发工具类</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%90%84%E5%A4%A7%E5%85%AC%E5%8F%B8%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.md\">各大公司开源项目</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E4%BD%9C%E5%93%81%E9%9B%86.md\">作品集</a></li>\n<li><a href=\"https://github.com/hacke2/ResumeSample\">程序员简历模板系列</a></li>\n<li><a href=\"https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.md\">在线个人简历</a></li>\n</ul>\n<hr>\n<p>#转载:<a href=\"http://www.jianshu.com/p/73df789e8710\">http://www.jianshu.com/p/73df789e8710</a></p>\n"},{"title":"常用 Git 命令清单","layout":"post","date":"2016-12-20T14:04:55.000Z","comments":1,"keywords":"git","description":"这里是一些常用的的git命令使用 主要记录Git 常用命令速查表","_content":"\n\n常用 Git 命令清单\n===================\n\n\n这里是一些常用的的git命令使用，一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令\n\n----------\n\n[![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n\n\n```\nWorkspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n\n```\n\n## <i class=\"icon-file\"></i> 一、新建代码库\n```\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n```\n\n## <i class=\"icon-file\"></i> 二、配置\n\n>Git的设置文件为**.gitconfig**，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n```\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n\n## <i class=\"icon-file\"></i>三、增加/删除文件\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n## <i class=\"icon-file\"></i>四、代码提交\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## <i class=\"icon-file\"></i> 五、分支\n\n```\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n## <i class=\"icon-file\"> 六、标签\n```\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## <i class=\"icon-file\"></i>七、查看信息\n```\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## <i class=\"icon-file\"></i>八、远程同步\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## <i class=\"icon-file\"></i>九、撤销\n\n\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n>附上一张清单图\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2ba55276-85f4-440e-badd-5b0083e96181.png) \n\n  http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n\n","source":"_posts/git.md","raw":"\n---\ntitle: 常用 Git 命令清单\nlayout: post\ndate: 2016-12-20 22:04:55\ncomments: true\ncategories: git\ntags: [git]\nkeywords: git \ndescription: 这里是一些常用的的git命令使用 主要记录Git 常用命令速查表\n---\n\n\n常用 Git 命令清单\n===================\n\n\n这里是一些常用的的git命令使用，一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令\n\n----------\n\n[![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png)\n\n\n\n```\nWorkspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n\n```\n\n## <i class=\"icon-file\"></i> 一、新建代码库\n```\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n```\n\n## <i class=\"icon-file\"></i> 二、配置\n\n>Git的设置文件为**.gitconfig**，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n```\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n\n## <i class=\"icon-file\"></i>三、增加/删除文件\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n## <i class=\"icon-file\"></i>四、代码提交\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n## <i class=\"icon-file\"></i> 五、分支\n\n```\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n## <i class=\"icon-file\"> 六、标签\n```\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n## <i class=\"icon-file\"></i>七、查看信息\n```\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n## <i class=\"icon-file\"></i>八、远程同步\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## <i class=\"icon-file\"></i>九、撤销\n\n\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n>附上一张清单图\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2ba55276-85f4-440e-badd-5b0083e96181.png) \n\n  http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n\n","slug":"git","published":1,"updated":"2017-05-25T00:54:35.699Z","photos":[],"link":"","_id":"cj4sal68j0006ek5b8n2xbmkx","content":"<h1 id=\"常用-Git-命令清单\"><a href=\"#常用-Git-命令清单\" class=\"headerlink\" title=\"常用 Git 命令清单\"></a>常用 Git 命令清单</h1><p>这里是一些常用的的git命令使用，一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"\"></a></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Workspace：工作区</div><div class=\"line\"><span class=\"keyword\">Index</span> / Stage：暂存区</div><div class=\"line\">Repository：仓库区（或本地仓库）</div><div class=\"line\">Remote：远程仓库</div></pre></td></tr></table></figure>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\" 一、新建代码库\"></a><i class=\"icon-file\"></i> 一、新建代码库</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></div><div class=\"line\">$ git init</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></div><div class=\"line\">$ git init [project-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></div><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">[url</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\" 二、配置\"></a><i class=\"icon-file\"></i> 二、配置</h2><blockquote>\n<p>Git的设置文件为<strong>.gitconfig</strong>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span><span class=\"built_in\">--list</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>-e [<span class=\"built_in\">--global]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>[<span class=\"built_in\">--global]</span> <span class=\"string\">user.</span><span class=\"string\">name </span><span class=\"string\">\"[name]\"</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>[<span class=\"built_in\">--global]</span> <span class=\"string\">user.</span><span class=\"string\">email </span><span class=\"string\">\"[email address]\"</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加/删除文件\"></a><i class=\"icon-file\"></i>三、增加/删除文件</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> [file1] [file2] ...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> [dir]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></div><div class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -p</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class=\"line\">$ git rm [file1] [file2] ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class=\"line\">$ git rm --cached [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></div><div class=\"line\">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a><i class=\"icon-file\"></i>四、代码提交</h2><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 提交暂存区到仓库区</span></div><div class=\"line\">$ git commit -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交暂存区的指定文件到仓库区</span></div><div class=\"line\">$ git commit [file1] [file2] ... -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class=\"line\">$ git commit -a</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交时显示所有diff信息</span></div><div class=\"line\">$ git commit -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 使用一次新的commit，替代上一次提交</span></div><div class=\"line\"><span class=\"meta\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class=\"line\">$ git commit --amend -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 重做上一次commit，并包括指定文件的新变化</span></div><div class=\"line\">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>\n<h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\" 五、分支\"></a><i class=\"icon-file\"></i> 五、分支</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -r</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -a</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout -b [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch [branch] [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch --track [branch] [remote-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout -</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch --set-upstream [branch] [remote-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git merge [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git cherry-pick [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -d [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push origin --delete [branch-name]</div><div class=\"line\"><span class=\"variable\">$ </span>git branch -dr [remote/branch]</div></pre></td></tr></table></figure>\n<h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\" 六、标签\"></a><i class=\"icon-file\"> 六、标签</i></h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有tag</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\"># 新建一个tag</span>在当前commit</div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除本地tag</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除远程tag</span></div><div class=\"line\">$ git push origin :refs/tags/[tagName]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看tag信息</span></div><div class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交指定tag</span></div><div class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交所有tag</span></div><div class=\"line\">$ git push [remote] --tags</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></div><div class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a><i class=\"icon-file\"></i>七、查看信息</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></div><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--stat</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD <span class=\"comment\">--pretty=format:%s</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD <span class=\"comment\">--grep feature</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--follow [file]</span></div><div class=\"line\">$ git whatchanged [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> -p [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"number\">-5</span> <span class=\"comment\">--pretty --oneline</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></div><div class=\"line\">$ git shortlog -sn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></div><div class=\"line\">$ git blame [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></div><div class=\"line\">$ git diff</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></div><div class=\"line\">$ git diff <span class=\"comment\">--cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></div><div class=\"line\">$ git diff HEAD</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></div><div class=\"line\">$ git diff [<span class=\"keyword\">first</span>-branch]...[<span class=\"keyword\">second</span>-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></div><div class=\"line\">$ git diff <span class=\"comment\">--shortstat \"@&#123;0 day ago&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></div><div class=\"line\">$ git show [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></div><div class=\"line\">$ git show <span class=\"comment\">--name-only [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></div><div class=\"line\">$ git show [commit]:[filename]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></div><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>\n<h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a><i class=\"icon-file\"></i>八、远程同步</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></div><div class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></div><div class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</div></pre></td></tr></table></figure>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a><i class=\"icon-file\"></i>九、撤销</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [commit] [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout .</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --hard</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --hard [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --keep [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></div><div class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git revert [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></div><div class=\"line\"><span class=\"variable\">$ </span>git stash</div><div class=\"line\"><span class=\"variable\">$ </span>git stash pop</div></pre></td></tr></table></figure>\n<blockquote>\n<p>附上一张清单图</p>\n</blockquote>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/2ba55276-85f4-440e-badd-5b0083e96181.png\" alt=\"图片\"> </p>\n<p>  <a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>\n","excerpt":"","more":"<h1 id=\"常用-Git-命令清单\"><a href=\"#常用-Git-命令清单\" class=\"headerlink\" title=\"常用 Git 命令清单\"></a>常用 Git 命令清单</h1><p>这里是一些常用的的git命令使用，一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令</p>\n<hr>\n<p><a href=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\"><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png\" alt=\"\"></a></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Workspace：工作区</div><div class=\"line\"><span class=\"keyword\">Index</span> / Stage：暂存区</div><div class=\"line\">Repository：仓库区（或本地仓库）</div><div class=\"line\">Remote：远程仓库</div></pre></td></tr></table></figure>\n<h2 id=\"一、新建代码库\"><a href=\"#一、新建代码库\" class=\"headerlink\" title=\" 一、新建代码库\"></a><i class=\"icon-file\"></i> 一、新建代码库</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在当前目录新建一个Git代码库</span></div><div class=\"line\">$ git init</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个目录，将其初始化为Git代码库</span></div><div class=\"line\">$ git init [project-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 下载一个项目和它的整个代码历史</span></div><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">[url</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\" 二、配置\"></a><i class=\"icon-file\"></i> 二、配置</h2><blockquote>\n<p>Git的设置文件为<strong>.gitconfig</strong>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span><span class=\"built_in\">--list</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>-e [<span class=\"built_in\">--global]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>[<span class=\"built_in\">--global]</span> <span class=\"string\">user.</span><span class=\"string\">name </span><span class=\"string\">\"[name]\"</span></div><div class=\"line\">$ <span class=\"string\">git </span><span class=\"string\">config </span>[<span class=\"built_in\">--global]</span> <span class=\"string\">user.</span><span class=\"string\">email </span><span class=\"string\">\"[email address]\"</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"三、增加-删除文件\"><a href=\"#三、增加-删除文件\" class=\"headerlink\" title=\"三、增加/删除文件\"></a><i class=\"icon-file\"></i>三、增加/删除文件</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> [file1] [file2] ...</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> [dir]</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></div><div class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> -p</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class=\"line\">$ git rm [file1] [file2] ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class=\"line\">$ git rm --cached [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></div><div class=\"line\">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a><i class=\"icon-file\"></i>四、代码提交</h2><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 提交暂存区到仓库区</span></div><div class=\"line\">$ git commit -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交暂存区的指定文件到仓库区</span></div><div class=\"line\">$ git commit [file1] [file2] ... -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class=\"line\">$ git commit -a</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 提交时显示所有diff信息</span></div><div class=\"line\">$ git commit -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 使用一次新的commit，替代上一次提交</span></div><div class=\"line\"><span class=\"meta\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class=\"line\">$ git commit --amend -m [message]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 重做上一次commit，并包括指定文件的新变化</span></div><div class=\"line\">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>\n<h2 id=\"五、分支\"><a href=\"#五、分支\" class=\"headerlink\" title=\" 五、分支\"></a><i class=\"icon-file\"></i> 五、分支</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有本地分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出所有远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -r</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出所有本地分支和远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -a</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，但依然停留在当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，并切换到该分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout -b [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，指向指定commit</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch [branch] [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch --track [branch] [remote-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到指定分支，并更新工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到上一个分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout -</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch --set-upstream [branch] [remote-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 合并指定分支到当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git merge [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 选择一个commit，合并进当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git cherry-pick [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git branch -d [branch-name]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除远程分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push origin --delete [branch-name]</div><div class=\"line\"><span class=\"variable\">$ </span>git branch -dr [remote/branch]</div></pre></td></tr></table></figure>\n<h2 id=\"六、标签\"><a href=\"#六、标签\" class=\"headerlink\" title=\" 六、标签\"></a><i class=\"icon-file\"> 六、标签</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 列出所有tag</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\"># 新建一个tag</span>在当前commit</div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除本地tag</span></div><div class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除远程tag</span></div><div class=\"line\">$ git push origin :refs/tags/[tagName]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看tag信息</span></div><div class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交指定tag</span></div><div class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交所有tag</span></div><div class=\"line\">$ git push [remote] --tags</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></div><div class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a><i class=\"icon-file\"></i>七、查看信息</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 显示有变更的文件</span></div><div class=\"line\">$ git status</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前分支的版本历史</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--stat</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 搜索提交历史，根据关键词</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> -S [keyword]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD <span class=\"comment\">--pretty=format:%s</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> [tag] HEAD <span class=\"comment\">--grep feature</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个文件的版本历史，包括文件改名</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--follow [file]</span></div><div class=\"line\">$ git whatchanged [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示指定文件相关的每一次diff</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> -p [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示过去5次提交</span></div><div class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"number\">-5</span> <span class=\"comment\">--pretty --oneline</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示所有提交过的用户，按提交次数排序</span></div><div class=\"line\">$ git shortlog -sn</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示指定文件是什么人在什么时间修改过</span></div><div class=\"line\">$ git blame [<span class=\"built_in\">file</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示暂存区和工作区的差异</span></div><div class=\"line\">$ git diff</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示暂存区和上一个commit的差异</span></div><div class=\"line\">$ git diff <span class=\"comment\">--cached [file]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示工作区与当前分支最新commit之间的差异</span></div><div class=\"line\">$ git diff HEAD</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示两次提交之间的差异</span></div><div class=\"line\">$ git diff [<span class=\"keyword\">first</span>-branch]...[<span class=\"keyword\">second</span>-branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示今天你写了多少行代码</span></div><div class=\"line\">$ git diff <span class=\"comment\">--shortstat \"@&#123;0 day ago&#125;\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交的元数据和内容变化</span></div><div class=\"line\">$ git show [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交发生变化的文件</span></div><div class=\"line\">$ git show <span class=\"comment\">--name-only [commit]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某次提交时，某个文件的内容</span></div><div class=\"line\">$ git show [commit]:[filename]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前分支的最近几次提交</span></div><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>\n<h2 id=\"八、远程同步\"><a href=\"#八、远程同步\" class=\"headerlink\" title=\"八、远程同步\"></a><i class=\"icon-file\"></i>八、远程同步</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></div><div class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote -v</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></div><div class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></div><div class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</div></pre></td></tr></table></figure>\n<h2 id=\"九、撤销\"><a href=\"#九、撤销\" class=\"headerlink\" title=\"九、撤销\"></a><i class=\"icon-file\"></i>九、撤销</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout [commit] [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></div><div class=\"line\"><span class=\"variable\">$ </span>git checkout .</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset [file]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --hard</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --hard [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class=\"line\"><span class=\"variable\">$ </span>git reset --keep [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></div><div class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class=\"line\"><span class=\"variable\">$ </span>git revert [commit]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></div><div class=\"line\"><span class=\"variable\">$ </span>git stash</div><div class=\"line\"><span class=\"variable\">$ </span>git stash pop</div></pre></td></tr></table></figure>\n<blockquote>\n<p>附上一张清单图</p>\n</blockquote>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/2ba55276-85f4-440e-badd-5b0083e96181.png\" alt=\"图片\"> </p>\n<p>  <a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>\n"},{"title":"Linux 下安装配置node开发环境及搭建express项目小记","date":"2017-05-28T06:06:28.000Z","comments":1,"keywords":"linux 安装配置node开发环境及搭建express项目小记","description":"端午假期,作为一个程序猿,还是继续写代码咯,折腾一下 在Linux下面安装 Node.js,Node.js已经成为非常广泛的Javascript运行环境,由于开发需要,我也在服务器上面部署了Node.js 开发环境","_content":"\n\n\n### 1. Node.js 包下载\n先到Node.js 中文网看一下 下载包、选择对应的下载包下载 ,\n ![图片](https://dn-coding-net-production-pp.qbox.me/3abd3ebc-53b1-4c38-bc54-1eb978e60761.png) \n\n\nLinux服务器上面 是CentOS 7.2的版本 ，我这里查看一下系统信息如下：\n```powershell\n[root~]# cat /etc/redhat-release\nCentOS Linux release 7.2.1511 (Core) \n[root~]# uname -r\n3.10.0-514.6.2.el7.x86_64\n[root~]# \n```\n ![图片](https://dn-coding-net-production-pp.qbox.me/a10091ed-6885-406a-861c-4b75e04108fc.png) \n\n我下载的是 \nhttps://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\n我是将包下载安装在\n/usr/local/src\n\n```powershell\n # cd /usr/local/src/\n # wget https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\n # unzip  node-v6.10.3-linux-x64.tar.xz\n```\n开始下载安装包 下载可能需要一段时间，下载完之后，就是解压了\n```powershell\n# unzip  node-v6.10.3-linux-x64.tar.xz\n```\n\n\n\n### 2. 修改配置文件\n>下载解压完成之后就是修改配置文件了，修改 Node 的环境变量\n\n编辑文件  vi /etc/profile、进入etc目录找到 ，编辑profile，在文件在文件最下面修改添加如下代码\n```\n # node\n export NODE_HOME=/usr/local/src/node-v6.10.3-linux-x64\n export PATH=$PATH:$NODE_HOME/bin  \n export NODE_PATH=$NODE_HOME/lib/node_modules \n```\n修改后保存，在命令行输入：source /etc/profile，让配置文件生效,现在可以再命令行测试一下node 是否安装成功了\n```powershell\n[root@ /]# node -v\nv6.10.3\n[root@ /]# npm -v\n3.10.10\n```\n提示node 6.10.3版本,npm为3.10.10版本，ok，现在 Node已经是安装好了，\n\n\n### 3. 安装 express \n首先需要全局安装express，\nnpm install -g express-generator #需先安装express-generator\nnpm install -g express\n```powershell\n[root@ /]# npm install -g express-generator \n/usr/local/src/node-v6.10.3-linux-x64/bin/express -> /usr/local/src/node-v6.10.3-linux-x64/lib/node_modules/express-generator/bin/express-cli.js\n/usr/local/src/node-v6.10.3-linux-x64/lib\n└── express-generator@4.15.0 \n\n[root@ /]# npm install -g express\n/usr/local/src/node-v6.10.3-linux-x64/lib\n└── express@4.15.3 \n\n[root@iZ28zgf2eiiZ /]# \n```\n ![图片](https://dn-coding-net-production-pp.qbox.me/8751b9a1-9953-46b3-9d09-fb723f220e36.png) \n执行安装好了,可以查看一下express 的版本了,4.15.0\n```powershell\n[root@ /]# express --version\n4.15.0\n[root@ /]# \n```\n\n### 4. 创建 express 项目\n>现在可以使用express命令行创建项目了,\n```powershell\n[root@i node_web]# express first_express\n```\n我是进入到了我指定的node_web项目文件下main 执行命令行之后如下目录结构\n ![图片](https://dn-coding-net-production-pp.qbox.me/e8c1a928-a689-4a5c-b479-e2ca57f43721.png) \n按照提示说的进行安装相关依赖等\n```\ninstall dependencies:\n     $ cd first_express && npm install\n   run the app:\n     $ DEBUG=first-express:* npm start\n```\n\n然后就可以访问你的express项目了，默认端口是3000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Linux-to-node.md","raw":"---\ntitle: Linux 下安装配置node开发环境及搭建express项目小记\ndate: 2017-05-28 14:06:28\ncomments: true\ncategories: Node\ntags: [node,javascript]\nkeywords: linux 安装配置node开发环境及搭建express项目小记\ndescription: 端午假期,作为一个程序猿,还是继续写代码咯,折腾一下 在Linux下面安装 Node.js,Node.js已经成为非常广泛的Javascript运行环境,由于开发需要,我也在服务器上面部署了Node.js 开发环境\n\n---\n\n\n\n### 1. Node.js 包下载\n先到Node.js 中文网看一下 下载包、选择对应的下载包下载 ,\n ![图片](https://dn-coding-net-production-pp.qbox.me/3abd3ebc-53b1-4c38-bc54-1eb978e60761.png) \n\n\nLinux服务器上面 是CentOS 7.2的版本 ，我这里查看一下系统信息如下：\n```powershell\n[root~]# cat /etc/redhat-release\nCentOS Linux release 7.2.1511 (Core) \n[root~]# uname -r\n3.10.0-514.6.2.el7.x86_64\n[root~]# \n```\n ![图片](https://dn-coding-net-production-pp.qbox.me/a10091ed-6885-406a-861c-4b75e04108fc.png) \n\n我下载的是 \nhttps://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\n我是将包下载安装在\n/usr/local/src\n\n```powershell\n # cd /usr/local/src/\n # wget https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\n # unzip  node-v6.10.3-linux-x64.tar.xz\n```\n开始下载安装包 下载可能需要一段时间，下载完之后，就是解压了\n```powershell\n# unzip  node-v6.10.3-linux-x64.tar.xz\n```\n\n\n\n### 2. 修改配置文件\n>下载解压完成之后就是修改配置文件了，修改 Node 的环境变量\n\n编辑文件  vi /etc/profile、进入etc目录找到 ，编辑profile，在文件在文件最下面修改添加如下代码\n```\n # node\n export NODE_HOME=/usr/local/src/node-v6.10.3-linux-x64\n export PATH=$PATH:$NODE_HOME/bin  \n export NODE_PATH=$NODE_HOME/lib/node_modules \n```\n修改后保存，在命令行输入：source /etc/profile，让配置文件生效,现在可以再命令行测试一下node 是否安装成功了\n```powershell\n[root@ /]# node -v\nv6.10.3\n[root@ /]# npm -v\n3.10.10\n```\n提示node 6.10.3版本,npm为3.10.10版本，ok，现在 Node已经是安装好了，\n\n\n### 3. 安装 express \n首先需要全局安装express，\nnpm install -g express-generator #需先安装express-generator\nnpm install -g express\n```powershell\n[root@ /]# npm install -g express-generator \n/usr/local/src/node-v6.10.3-linux-x64/bin/express -> /usr/local/src/node-v6.10.3-linux-x64/lib/node_modules/express-generator/bin/express-cli.js\n/usr/local/src/node-v6.10.3-linux-x64/lib\n└── express-generator@4.15.0 \n\n[root@ /]# npm install -g express\n/usr/local/src/node-v6.10.3-linux-x64/lib\n└── express@4.15.3 \n\n[root@iZ28zgf2eiiZ /]# \n```\n ![图片](https://dn-coding-net-production-pp.qbox.me/8751b9a1-9953-46b3-9d09-fb723f220e36.png) \n执行安装好了,可以查看一下express 的版本了,4.15.0\n```powershell\n[root@ /]# express --version\n4.15.0\n[root@ /]# \n```\n\n### 4. 创建 express 项目\n>现在可以使用express命令行创建项目了,\n```powershell\n[root@i node_web]# express first_express\n```\n我是进入到了我指定的node_web项目文件下main 执行命令行之后如下目录结构\n ![图片](https://dn-coding-net-production-pp.qbox.me/e8c1a928-a689-4a5c-b479-e2ca57f43721.png) \n按照提示说的进行安装相关依赖等\n```\ninstall dependencies:\n     $ cd first_express && npm install\n   run the app:\n     $ DEBUG=first-express:* npm start\n```\n\n然后就可以访问你的express项目了，默认端口是3000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Linux-to-node","published":1,"updated":"2017-06-02T02:24:18.430Z","layout":"post","photos":[],"link":"","_id":"cj4sal68p0008ek5b3xjxpj5y","content":"<h3 id=\"1-Node-js-包下载\"><a href=\"#1-Node-js-包下载\" class=\"headerlink\" title=\"1. Node.js 包下载\"></a>1. Node.js 包下载</h3><p>先到Node.js 中文网看一下 下载包、选择对应的下载包下载 ,<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/3abd3ebc-53b1-4c38-bc54-1eb978e60761.png\" alt=\"图片\"> </p>\n<p>Linux服务器上面 是CentOS 7.2的版本 ，我这里查看一下系统信息如下：<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root~]<span class=\"comment\"># cat /etc/redhat-release</span></div><div class=\"line\">CentOS Linux release <span class=\"number\">7.2</span>.<span class=\"number\">1511</span> (Core) </div><div class=\"line\">[root~]<span class=\"comment\"># uname -r</span></div><div class=\"line\"><span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">514.6</span>.<span class=\"number\">2</span>.el7.x86_64</div><div class=\"line\">[root~]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/a10091ed-6885-406a-861c-4b75e04108fc.png\" alt=\"图片\"> </p>\n<p>我下载的是<br><a href=\"https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\" target=\"_blank\" rel=\"external\">https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz</a><br>我是将包下载安装在<br>/usr/local/src</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># cd /usr/local/src/</span></div><div class=\"line\"><span class=\"comment\"># wget https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz</span></div><div class=\"line\"><span class=\"comment\"># unzip  node-v6.10.3-linux-x64.tar.xz</span></div></pre></td></tr></table></figure>\n<p>开始下载安装包 下载可能需要一段时间，下载完之后，就是解压了<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># unzip  node-v6.10.3-linux-x64.tar.xz</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2. 修改配置文件\"></a>2. 修改配置文件</h3><blockquote>\n<p>下载解压完成之后就是修改配置文件了，修改 Node 的环境变量</p>\n</blockquote>\n<p>编辑文件  vi /etc/profile、进入etc目录找到 ，编辑profile，在文件在文件最下面修改添加如下代码<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># node</span></div><div class=\"line\">export NODE_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/src/node</span>-v6.<span class=\"number\">10.3</span>-linux-x64</div><div class=\"line\">export PATH=$<span class=\"symbol\">PATH:</span>$NODE_HOME/bin  </div><div class=\"line\">export NODE_PATH=$NODE_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">node_modules</span></span></div></pre></td></tr></table></figure></p>\n<p>修改后保存，在命令行输入：source /etc/profile，让配置文件生效,现在可以再命令行测试一下node 是否安装成功了<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># node -v</span></div><div class=\"line\">v6.<span class=\"number\">10.3</span></div><div class=\"line\">[root@ /]<span class=\"comment\"># npm -v</span></div><div class=\"line\"><span class=\"number\">3.10</span>.<span class=\"number\">10</span></div></pre></td></tr></table></figure></p>\n<p>提示node 6.10.3版本,npm为3.10.10版本，ok，现在 Node已经是安装好了，</p>\n<h3 id=\"3-安装-express\"><a href=\"#3-安装-express\" class=\"headerlink\" title=\"3. 安装 express\"></a>3. 安装 express</h3><p>首先需要全局安装express，<br>npm install -g express-generator #需先安装express-generator<br>npm install -g express<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># npm install -g express-generator </span></div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/bin/express -&gt; /usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib/node_modules/express-generator/bin/express-cli.js</div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib</div><div class=\"line\">└── express-generator@<span class=\"number\">4.15</span>.<span class=\"number\">0</span> </div><div class=\"line\"></div><div class=\"line\">[root@ /]<span class=\"comment\"># npm install -g express</span></div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib</div><div class=\"line\">└── express@<span class=\"number\">4.15</span>.<span class=\"number\">3</span> </div><div class=\"line\"></div><div class=\"line\">[root@iZ28zgf2eiiZ /]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/8751b9a1-9953-46b3-9d09-fb723f220e36.png\" alt=\"图片\"><br>执行安装好了,可以查看一下express 的版本了,4.15.0<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># express --version</span></div><div class=\"line\"><span class=\"number\">4.15</span>.<span class=\"number\">0</span></div><div class=\"line\">[root@ /]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-创建-express-项目\"><a href=\"#4-创建-express-项目\" class=\"headerlink\" title=\"4. 创建 express 项目\"></a>4. 创建 express 项目</h3><blockquote>\n<p>现在可以使用express命令行创建项目了,<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@i node_web]<span class=\"comment\"># express first_express</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我是进入到了我指定的node_web项目文件下main 执行命令行之后如下目录结构<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/e8c1a928-a689-4a5c-b479-e2ca57f43721.png\" alt=\"图片\"><br>按照提示说的进行安装相关依赖等<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">install</span> dependencies:</div><div class=\"line\">     $ cd first_express &amp;&amp; npm <span class=\"keyword\">install</span></div><div class=\"line\">   run the app:</div><div class=\"line\">     $ DEBUG=<span class=\"keyword\">first</span>-express:* npm <span class=\"keyword\">start</span></div></pre></td></tr></table></figure></p>\n<p>然后就可以访问你的express项目了，默认端口是3000</p>\n","excerpt":"","more":"<h3 id=\"1-Node-js-包下载\"><a href=\"#1-Node-js-包下载\" class=\"headerlink\" title=\"1. Node.js 包下载\"></a>1. Node.js 包下载</h3><p>先到Node.js 中文网看一下 下载包、选择对应的下载包下载 ,<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/3abd3ebc-53b1-4c38-bc54-1eb978e60761.png\" alt=\"图片\"> </p>\n<p>Linux服务器上面 是CentOS 7.2的版本 ，我这里查看一下系统信息如下：<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root~]<span class=\"comment\"># cat /etc/redhat-release</span></div><div class=\"line\">CentOS Linux release <span class=\"number\">7.2</span>.<span class=\"number\">1511</span> (Core) </div><div class=\"line\">[root~]<span class=\"comment\"># uname -r</span></div><div class=\"line\"><span class=\"number\">3.10</span>.<span class=\"number\">0</span>-<span class=\"number\">514.6</span>.<span class=\"number\">2</span>.el7.x86_64</div><div class=\"line\">[root~]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/a10091ed-6885-406a-861c-4b75e04108fc.png\" alt=\"图片\"> </p>\n<p>我下载的是<br><a href=\"https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz\">https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz</a><br>我是将包下载安装在<br>/usr/local/src</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># cd /usr/local/src/</span></div><div class=\"line\"><span class=\"comment\"># wget https://npm.taobao.org/mirrors/node/v6.10.3/node-v6.10.3-linux-x64.tar.xz</span></div><div class=\"line\"><span class=\"comment\"># unzip  node-v6.10.3-linux-x64.tar.xz</span></div></pre></td></tr></table></figure>\n<p>开始下载安装包 下载可能需要一段时间，下载完之后，就是解压了<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># unzip  node-v6.10.3-linux-x64.tar.xz</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2. 修改配置文件\"></a>2. 修改配置文件</h3><blockquote>\n<p>下载解压完成之后就是修改配置文件了，修改 Node 的环境变量</p>\n</blockquote>\n<p>编辑文件  vi /etc/profile、进入etc目录找到 ，编辑profile，在文件在文件最下面修改添加如下代码<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># node</span></div><div class=\"line\">export NODE_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/src/node</span>-v6.<span class=\"number\">10.3</span>-linux-x64</div><div class=\"line\">export PATH=$<span class=\"symbol\">PATH:</span>$NODE_HOME/bin  </div><div class=\"line\">export NODE_PATH=$NODE_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">node_modules</span></span></div></pre></td></tr></table></figure></p>\n<p>修改后保存，在命令行输入：source /etc/profile，让配置文件生效,现在可以再命令行测试一下node 是否安装成功了<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># node -v</span></div><div class=\"line\">v6.<span class=\"number\">10.3</span></div><div class=\"line\">[root@ /]<span class=\"comment\"># npm -v</span></div><div class=\"line\"><span class=\"number\">3.10</span>.<span class=\"number\">10</span></div></pre></td></tr></table></figure></p>\n<p>提示node 6.10.3版本,npm为3.10.10版本，ok，现在 Node已经是安装好了，</p>\n<h3 id=\"3-安装-express\"><a href=\"#3-安装-express\" class=\"headerlink\" title=\"3. 安装 express\"></a>3. 安装 express</h3><p>首先需要全局安装express，<br>npm install -g express-generator #需先安装express-generator<br>npm install -g express<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># npm install -g express-generator </span></div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/bin/express -&gt; /usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib/node_modules/express-generator/bin/express-cli.js</div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib</div><div class=\"line\">└── express-generator@<span class=\"number\">4.15</span>.<span class=\"number\">0</span> </div><div class=\"line\"></div><div class=\"line\">[root@ /]<span class=\"comment\"># npm install -g express</span></div><div class=\"line\">/usr/local/src/node-v6.<span class=\"number\">10.3</span>-linux-x64/lib</div><div class=\"line\">└── express@<span class=\"number\">4.15</span>.<span class=\"number\">3</span> </div><div class=\"line\"></div><div class=\"line\">[root@iZ28zgf2eiiZ /]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/8751b9a1-9953-46b3-9d09-fb723f220e36.png\" alt=\"图片\"><br>执行安装好了,可以查看一下express 的版本了,4.15.0<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@ /]<span class=\"comment\"># express --version</span></div><div class=\"line\"><span class=\"number\">4.15</span>.<span class=\"number\">0</span></div><div class=\"line\">[root@ /]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-创建-express-项目\"><a href=\"#4-创建-express-项目\" class=\"headerlink\" title=\"4. 创建 express 项目\"></a>4. 创建 express 项目</h3><blockquote>\n<p>现在可以使用express命令行创建项目了,<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@i node_web]<span class=\"comment\"># express first_express</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>我是进入到了我指定的node_web项目文件下main 执行命令行之后如下目录结构<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/e8c1a928-a689-4a5c-b479-e2ca57f43721.png\" alt=\"图片\"><br>按照提示说的进行安装相关依赖等<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">install</span> dependencies:</div><div class=\"line\">     $ cd first_express &amp;&amp; npm <span class=\"keyword\">install</span></div><div class=\"line\">   run the app:</div><div class=\"line\">     $ DEBUG=<span class=\"keyword\">first</span>-express:* npm <span class=\"keyword\">start</span></div></pre></td></tr></table></figure></p>\n<p>然后就可以访问你的express项目了，默认端口是3000</p>\n"},{"title":"You Don't Need jQuery","layout":"post","date":"2017-01-17T01:45:55.000Z","keywords":"javascript","description":"You Don't Need jQuery,前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。","_content":"\n## You Don't Need jQuery\n\n前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。\n\n## 目录\n\n1. [Translations](#translations)\n1. [Query Selector](#query-selector)\n1. [CSS & Style](#css--style)\n1. [DOM Manipulation](#dom-manipulation)\n1. [Ajax](#ajax)\n1. [Events](#events)\n1. [Utilities](#utilities)\n1. [Alternatives](#alternatives)\n1. [Browser Support](#browser-support)\n\n\n## Query Selector\n\n常用的 class、id、属性 选择器都可以使用 `document.querySelector` 或 `document.querySelectorAll` 替代。区别是\n* `document.querySelector` 返回第一个匹配的 Element\n* `document.querySelectorAll` 返回所有匹配的 Element 组成的 NodeList。它可以通过 `[].slice.call()` 把它转成 Array\n* 如果匹配不到任何 Element，jQuery 返回空数组 `[]`，但 `document.querySelector` 返回 `null`，注意空指针异常。当找不到时，也可以使用 `||` 设置默认的值，如 `document.querySelectorAll(selector) || []`\n\n> 注意：`document.querySelector` 和 `document.querySelectorAll` 性能很**差**。如果想提高性能，尽量使用 `document.getElementById`、`document.getElementsByClassName` 或 `document.getElementsByTagName`。\n\n- [1.0](#1.0) <a name='1.0'></a> Query by selector\n\n  ```js\n  // jQuery\n  $('selector');\n\n  // Native\n  document.querySelectorAll('selector');\n  ```\n\n- [1.1](#1.1) <a name='1.1'></a> Query by class\n\n  ```js\n  // jQuery\n  $('.css');\n\n  // Native\n  document.querySelectorAll('.css');\n  \n  // or\n  document.getElementsByClassName('css');\n  ```\n\n- [1.2](#1.2) <a name='1.2'></a> Query by id\n\n  ```js\n  // jQuery\n  $('#id');\n\n  // Native\n  document.querySelector('#id');\n\n  // or\n  document.getElementById('id');\n  ```\n\n- [1.3](#1.3) <a name='1.3'></a> Query by attribute\n\n  ```js\n  // jQuery\n  $('a[target=_blank]');\n\n  // Native\n  document.querySelectorAll('a[target=_blank]');\n  ```\n\n- [1.4](#1.4) <a name='1.4'></a> Find sth.\n\n  + Find nodes\n\n    ```js\n    // jQuery\n    $el.find('li');\n\n    // Native\n    el.querySelectorAll('li');\n    ```\n\n  + Find body\n\n    ```js\n    // jQuery\n    $('body');\n\n    // Native\n    document.body;\n    ```\n\n  + Find Attribute\n\n    ```js\n    // jQuery\n    $el.attr('foo');\n\n    // Native\n    e.getAttribute('foo');\n    ```\n\n  + Find data attribute\n\n    ```js\n    // jQuery\n    $el.data('foo');\n\n    // Native\n    // using getAttribute\n    el.getAttribute('data-foo');\n    // you can also use `dataset` if only need to support IE 11+\n    el.dataset['foo'];\n    ```\n\n- [1.5](#1.5) <a name='1.5'></a> Sibling/Previous/Next Elements\n\n  + Sibling elements\n\n    ```js\n    // jQuery\n    $el.siblings();\n\n    // Native\n    [].filter.call(el.parentNode.children, function(child) {\n      return child !== el;\n    });\n    ```\n\n  + Previous elements\n\n    ```js\n    // jQuery\n    $el.prev();\n\n    // Native\n    el.previousElementSibling;\n\n    ```\n\n  + Next elements\n\n    ```js\n    // next\n    $el.next();\n    el.nextElementSibling;\n    ```\n\n- [1.6](#1.6) <a name='1.6'></a> Closest\n\n  Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。\n\n  ```js\n  // jQuery\n  $el.closest(queryString);\n\n  // Native\n  function closest(el, selector) {\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    while (el) {\n      if (matchesSelector.call(el, selector)) {\n        return el;\n      } else {\n        el = el.parentElement;\n      }\n    }\n    return null;\n  }\n  ```\n\n- [1.7](#1.7) <a name='1.7'></a> Parents Until\n\n  获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。\n\n  ```js\n  // jQuery\n  $el.parentsUntil(selector, filter);\n\n  // Native\n  function parentsUntil(el, selector, filter) {\n    const result = [];\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    // match start from parent\n    el = el.parentElement;\n    while (el && !matchesSelector.call(el, selector)) {\n      if (!filter) {\n        result.push(el);\n      } else {\n        if (matchesSelector.call(el, filter)) {\n          result.push(el);\n        }\n      }\n      el = el.parentElement;\n    }\n    return result;\n  }\n  ```\n\n- [1.8](#1.8) <a name='1.8'></a> Form\n\n  + Input/Textarea\n\n    ```js\n    // jQuery\n    $('#my-input').val();\n\n    // Native\n    document.querySelector('#my-input').value;\n    ```\n\n  + Get index of e.currentTarget between `.radio`\n\n    ```js\n    // jQuery\n    $(e.currentTarget).index('.radio');\n\n    // Native\n    [].indexOf.call(document.querySelectorAll('.radio'), e.currentTarget);\n    ```\n\n- [1.9](#1.9) <a name='1.9'></a> Iframe Contents\n\n  jQuery 对象的 iframe `contents()` 返回的是 iframe 内的 `document`\n\n  + Iframe contents\n\n    ```js\n    // jQuery\n    $iframe.contents();\n\n    // Native\n    iframe.contentDocument;\n    ```\n\n  + Iframe Query\n\n    ```js\n    // jQuery\n    $iframe.contents().find('.css');\n\n    // Native\n    iframe.contentDocument.querySelectorAll('.css');\n    ```\n\n**[⬆ 回到顶部](#目录)**\n\n## CSS & Style\n\n- [2.1](#2.1) <a name='2.1'></a> CSS\n\n  + Get style\n\n    ```js\n    // jQuery\n    $el.css(\"color\");\n\n    // Native\n    // 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题\n    const win = el.ownerDocument.defaultView;\n    // null 的意思是不返回伪类元素\n    win.getComputedStyle(el, null).color;\n    ```\n\n  + Set style\n\n    ```js\n    // jQuery\n    $el.css({ color: \"#ff0011\" });\n\n    // Native\n    el.style.color = '#ff0011';\n    ```\n\n  + Get/Set Styles\n\n    注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 [setStyles](https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194) 方法\n\n  + Add class\n\n    ```js\n    // jQuery\n    $el.addClass(className);\n\n    // Native\n    el.classList.add(className);\n    ```\n\n  + Remove class\n\n    ```js\n    // jQuery\n    $el.removeClass(className);\n\n    // Native\n    el.classList.remove(className);\n    ```\n\n  + has class\n\n    ```js\n    // jQuery\n    $el.hasClass(className);\n\n    // Native\n    el.classList.contains(className);\n    ```\n\n  + Toggle class\n\n    ```js\n    // jQuery\n    $el.toggleClass(className);\n\n    // Native\n    el.classList.toggle(className);\n    ```\n\n- [2.2](#2.2) <a name='2.2'></a> Width & Height\n\n  Width 与 Height 获取方法相同，下面以 Height 为例：\n\n  + Window height\n\n    ```js\n    // jQuery\n    $(window).height();\n\n    // Native\n    // 不含 scrollbar，与 jQuery 行为一致\n    window.document.documentElement.clientHeight;\n    // 含 scrollbar\n    window.innerHeight;\n    ```\n\n  + Document height\n\n    ```js\n    // jQuery\n    $(document).height();\n\n    // Native\n    document.documentElement.scrollHeight;\n    ```\n\n  + Element height\n\n    ```js\n    // jQuery\n    $el.height();\n\n    // Native\n    // 与 jQuery 一致（一直为 content 区域的高度）\n    function getHeight(el) {\n      const styles = this.getComputedStyle(el);\n      const height = el.offsetHeight;\n      const borderTopWidth = parseFloat(styles.borderTopWidth);\n      const borderBottomWidth = parseFloat(styles.borderBottomWidth);\n      const paddingTop = parseFloat(styles.paddingTop);\n      const paddingBottom = parseFloat(styles.paddingBottom);\n      return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;\n    }\n    // 精确到整数（border-box 时为 height 值，content-box 时为 height + padding + border 值）\n    el.clientHeight;\n    // 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）\n    el.getBoundingClientRect().height;\n    ```\n\n  + Iframe height\n\n    $iframe .contents() 方法返回 iframe 的 contentDocument\n\n    ```js\n    // jQuery\n    $('iframe').contents().height();\n\n    // Native\n    iframe.contentDocument.documentElement.scrollHeight;\n    ```\n\n- [2.3](#2.3) <a name='2.3'></a> Position & Offset\n\n  + Position\n\n    ```js\n    // jQuery\n    $el.position();\n\n    // Native\n    { left: el.offsetLeft, top: el.offsetTop }\n    ```\n\n  + Offset\n\n    ```js\n    // jQuery\n    $el.offset();\n\n    // Native\n    function getOffset (el) {\n      const box = el.getBoundingClientRect();\n\n      return {\n        top: box.top + window.pageYOffset - document.documentElement.clientTop,\n        left: box.left + window.pageXOffset - document.documentElement.clientLeft\n      }\n    }\n    ```\n\n- [2.4](#2.4) <a name='2.4'></a> Scroll Top\n\n  ```js\n  // jQuery\n  $(window).scrollTop();\n\n  // Native\n  (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## DOM Manipulation\n\n- [3.1](#3.1) <a name='3.1'></a> Remove\n  ```js\n  // jQuery\n  $el.remove();\n\n  // Native\n  el.parentNode.removeChild(el);\n  ```\n\n- [3.2](#3.2) <a name='3.2'></a> Text\n\n  + Get text\n\n    ```js\n    // jQuery\n    $el.text();\n\n    // Native\n    el.textContent;\n    ```\n\n  + Set text\n\n    ```js\n    // jQuery\n    $el.text(string);\n\n    // Native\n    el.textContent = string;\n    ```\n\n- [3.3](#3.3) <a name='3.3'></a> HTML\n\n  + Get HTML\n\n    ```js\n    // jQuery\n    $el.html();\n\n    // Native\n    el.innerHTML;\n    ```\n\n  + Set HTML\n\n    ```js\n    // jQuery\n    $el.html(htmlString);\n\n    // Native\n    el.innerHTML = htmlString;\n    ```\n\n- [3.4](#3.4) <a name='3.4'></a> Append\n\n  Append 插入到子节点的末尾\n\n  ```js\n  // jQuery\n  $el.append(\"<div id='container'>hello</div>\");\n\n  // Native\n  let newEl = document.createElement('div');\n  newEl.setAttribute('id', 'container');\n  newEl.innerHTML = 'hello';\n  el.appendChild(newEl);\n  ```\n\n- [3.5](#3.5) <a name='3.5'></a> Prepend\n\n  ```js\n  // jQuery\n  $el.prepend(\"<div id='container'>hello</div>\");\n\n  // Native\n  let newEl = document.createElement('div');\n  newEl.setAttribute('id', 'container');\n  newEl.innerHTML = 'hello';\n  el.insertBefore(newEl, el.firstChild);\n  ```\n\n- [3.6](#3.6) <a name='3.6'></a> insertBefore\n\n  在选中元素前插入新节点\n\n  ```js\n  // jQuery\n  $newEl.insertBefore(queryString);\n\n  // Native\n  const target = document.querySelector(queryString);\n  target.parentNode.insertBefore(newEl, target);\n  ```\n\n- [3.7](#3.7) <a name='3.7'></a> insertAfter\n\n  在选中元素后插入新节点\n\n  ```js\n  // jQuery\n  $newEl.insertAfter(queryString);\n\n  // Native\n  const target = document.querySelector(queryString);\n  target.parentNode.insertBefore(newEl, target.nextSibling);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## Ajax\n\n用 [fetch](https://github.com/camsong/fetch-ie8) 和 [fetch-jsonp](https://github.com/camsong/fetch-jsonp) 替代\n\n**[⬆ 回到顶部](#目录)**\n\n## Events\n\n完整地替代命名空间和事件代理，链接到 https://github.com/oneuijs/oui-dom-events\n\n- [5.1](#5.1) <a name='5.1'></a> Bind an event with on\n\n  ```js\n  // jQuery\n  $el.on(eventName, eventHandler);\n\n  // Native\n  el.addEventListener(eventName, eventHandler);\n  ```\n\n- [5.2](#5.2) <a name='5.2'></a> Unbind an event with off\n\n  ```js\n  // jQuery\n  $el.off(eventName, eventHandler);\n\n  // Native\n  el.removeEventListener(eventName, eventHandler);\n  ```\n\n- [5.3](#5.3) <a name='5.3'></a> Trigger\n\n  ```js\n  // jQuery\n  $(el).trigger('custom-event', {key1: 'data'});\n\n  // Native\n  if (window.CustomEvent) {\n    const event = new CustomEvent('custom-event', {detail: {key1: 'data'}});\n  } else {\n    const event = document.createEvent('CustomEvent');\n    event.initCustomEvent('custom-event', true, true, {key1: 'data'});\n  }\n\n  el.dispatchEvent(event);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## Utilities\n\n- [6.1](#6.1) <a name='6.1'></a> isArray\n\n  ```js\n  // jQuery\n  $.isArray(range);\n\n  // Native\n  Array.isArray(range);\n  ```\n\n- [6.2](#6.2) <a name='6.2'></a> Trim\n\n  ```js\n  // jQuery\n  $.trim(string);\n\n  // Native\n  string.trim();\n  ```\n\n- [6.3](#6.3) <a name='6.3'></a> Object Assign\n\n  继承，使用 object.assign polyfill https://github.com/ljharb/object.assign\n\n  ```js\n  // jQuery\n  $.extend({}, defaultOpts, opts);\n\n  // Native\n  Object.assign({}, defaultOpts, opts);\n  ```\n\n- [6.4](#6.4) <a name='6.4'></a> Contains\n\n  ```js\n  // jQuery\n  $.contains(el, child);\n\n  // Native\n  el !== child && el.contains(child);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\nhttps://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\n","source":"_posts/jquery_to_js.md","raw":"\n---\ntitle: You Don't Need jQuery\nlayout: post\ndate: 2017-1-17 09:45:55\ncategories: javascript\ntags: [javascript]\nkeywords: javascript\ndescription: You Don't Need jQuery,前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。\n\n---\n\n## You Don't Need jQuery\n\n前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。\n\n## 目录\n\n1. [Translations](#translations)\n1. [Query Selector](#query-selector)\n1. [CSS & Style](#css--style)\n1. [DOM Manipulation](#dom-manipulation)\n1. [Ajax](#ajax)\n1. [Events](#events)\n1. [Utilities](#utilities)\n1. [Alternatives](#alternatives)\n1. [Browser Support](#browser-support)\n\n\n## Query Selector\n\n常用的 class、id、属性 选择器都可以使用 `document.querySelector` 或 `document.querySelectorAll` 替代。区别是\n* `document.querySelector` 返回第一个匹配的 Element\n* `document.querySelectorAll` 返回所有匹配的 Element 组成的 NodeList。它可以通过 `[].slice.call()` 把它转成 Array\n* 如果匹配不到任何 Element，jQuery 返回空数组 `[]`，但 `document.querySelector` 返回 `null`，注意空指针异常。当找不到时，也可以使用 `||` 设置默认的值，如 `document.querySelectorAll(selector) || []`\n\n> 注意：`document.querySelector` 和 `document.querySelectorAll` 性能很**差**。如果想提高性能，尽量使用 `document.getElementById`、`document.getElementsByClassName` 或 `document.getElementsByTagName`。\n\n- [1.0](#1.0) <a name='1.0'></a> Query by selector\n\n  ```js\n  // jQuery\n  $('selector');\n\n  // Native\n  document.querySelectorAll('selector');\n  ```\n\n- [1.1](#1.1) <a name='1.1'></a> Query by class\n\n  ```js\n  // jQuery\n  $('.css');\n\n  // Native\n  document.querySelectorAll('.css');\n  \n  // or\n  document.getElementsByClassName('css');\n  ```\n\n- [1.2](#1.2) <a name='1.2'></a> Query by id\n\n  ```js\n  // jQuery\n  $('#id');\n\n  // Native\n  document.querySelector('#id');\n\n  // or\n  document.getElementById('id');\n  ```\n\n- [1.3](#1.3) <a name='1.3'></a> Query by attribute\n\n  ```js\n  // jQuery\n  $('a[target=_blank]');\n\n  // Native\n  document.querySelectorAll('a[target=_blank]');\n  ```\n\n- [1.4](#1.4) <a name='1.4'></a> Find sth.\n\n  + Find nodes\n\n    ```js\n    // jQuery\n    $el.find('li');\n\n    // Native\n    el.querySelectorAll('li');\n    ```\n\n  + Find body\n\n    ```js\n    // jQuery\n    $('body');\n\n    // Native\n    document.body;\n    ```\n\n  + Find Attribute\n\n    ```js\n    // jQuery\n    $el.attr('foo');\n\n    // Native\n    e.getAttribute('foo');\n    ```\n\n  + Find data attribute\n\n    ```js\n    // jQuery\n    $el.data('foo');\n\n    // Native\n    // using getAttribute\n    el.getAttribute('data-foo');\n    // you can also use `dataset` if only need to support IE 11+\n    el.dataset['foo'];\n    ```\n\n- [1.5](#1.5) <a name='1.5'></a> Sibling/Previous/Next Elements\n\n  + Sibling elements\n\n    ```js\n    // jQuery\n    $el.siblings();\n\n    // Native\n    [].filter.call(el.parentNode.children, function(child) {\n      return child !== el;\n    });\n    ```\n\n  + Previous elements\n\n    ```js\n    // jQuery\n    $el.prev();\n\n    // Native\n    el.previousElementSibling;\n\n    ```\n\n  + Next elements\n\n    ```js\n    // next\n    $el.next();\n    el.nextElementSibling;\n    ```\n\n- [1.6](#1.6) <a name='1.6'></a> Closest\n\n  Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。\n\n  ```js\n  // jQuery\n  $el.closest(queryString);\n\n  // Native\n  function closest(el, selector) {\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    while (el) {\n      if (matchesSelector.call(el, selector)) {\n        return el;\n      } else {\n        el = el.parentElement;\n      }\n    }\n    return null;\n  }\n  ```\n\n- [1.7](#1.7) <a name='1.7'></a> Parents Until\n\n  获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。\n\n  ```js\n  // jQuery\n  $el.parentsUntil(selector, filter);\n\n  // Native\n  function parentsUntil(el, selector, filter) {\n    const result = [];\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    // match start from parent\n    el = el.parentElement;\n    while (el && !matchesSelector.call(el, selector)) {\n      if (!filter) {\n        result.push(el);\n      } else {\n        if (matchesSelector.call(el, filter)) {\n          result.push(el);\n        }\n      }\n      el = el.parentElement;\n    }\n    return result;\n  }\n  ```\n\n- [1.8](#1.8) <a name='1.8'></a> Form\n\n  + Input/Textarea\n\n    ```js\n    // jQuery\n    $('#my-input').val();\n\n    // Native\n    document.querySelector('#my-input').value;\n    ```\n\n  + Get index of e.currentTarget between `.radio`\n\n    ```js\n    // jQuery\n    $(e.currentTarget).index('.radio');\n\n    // Native\n    [].indexOf.call(document.querySelectorAll('.radio'), e.currentTarget);\n    ```\n\n- [1.9](#1.9) <a name='1.9'></a> Iframe Contents\n\n  jQuery 对象的 iframe `contents()` 返回的是 iframe 内的 `document`\n\n  + Iframe contents\n\n    ```js\n    // jQuery\n    $iframe.contents();\n\n    // Native\n    iframe.contentDocument;\n    ```\n\n  + Iframe Query\n\n    ```js\n    // jQuery\n    $iframe.contents().find('.css');\n\n    // Native\n    iframe.contentDocument.querySelectorAll('.css');\n    ```\n\n**[⬆ 回到顶部](#目录)**\n\n## CSS & Style\n\n- [2.1](#2.1) <a name='2.1'></a> CSS\n\n  + Get style\n\n    ```js\n    // jQuery\n    $el.css(\"color\");\n\n    // Native\n    // 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题\n    const win = el.ownerDocument.defaultView;\n    // null 的意思是不返回伪类元素\n    win.getComputedStyle(el, null).color;\n    ```\n\n  + Set style\n\n    ```js\n    // jQuery\n    $el.css({ color: \"#ff0011\" });\n\n    // Native\n    el.style.color = '#ff0011';\n    ```\n\n  + Get/Set Styles\n\n    注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 [setStyles](https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194) 方法\n\n  + Add class\n\n    ```js\n    // jQuery\n    $el.addClass(className);\n\n    // Native\n    el.classList.add(className);\n    ```\n\n  + Remove class\n\n    ```js\n    // jQuery\n    $el.removeClass(className);\n\n    // Native\n    el.classList.remove(className);\n    ```\n\n  + has class\n\n    ```js\n    // jQuery\n    $el.hasClass(className);\n\n    // Native\n    el.classList.contains(className);\n    ```\n\n  + Toggle class\n\n    ```js\n    // jQuery\n    $el.toggleClass(className);\n\n    // Native\n    el.classList.toggle(className);\n    ```\n\n- [2.2](#2.2) <a name='2.2'></a> Width & Height\n\n  Width 与 Height 获取方法相同，下面以 Height 为例：\n\n  + Window height\n\n    ```js\n    // jQuery\n    $(window).height();\n\n    // Native\n    // 不含 scrollbar，与 jQuery 行为一致\n    window.document.documentElement.clientHeight;\n    // 含 scrollbar\n    window.innerHeight;\n    ```\n\n  + Document height\n\n    ```js\n    // jQuery\n    $(document).height();\n\n    // Native\n    document.documentElement.scrollHeight;\n    ```\n\n  + Element height\n\n    ```js\n    // jQuery\n    $el.height();\n\n    // Native\n    // 与 jQuery 一致（一直为 content 区域的高度）\n    function getHeight(el) {\n      const styles = this.getComputedStyle(el);\n      const height = el.offsetHeight;\n      const borderTopWidth = parseFloat(styles.borderTopWidth);\n      const borderBottomWidth = parseFloat(styles.borderBottomWidth);\n      const paddingTop = parseFloat(styles.paddingTop);\n      const paddingBottom = parseFloat(styles.paddingBottom);\n      return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;\n    }\n    // 精确到整数（border-box 时为 height 值，content-box 时为 height + padding + border 值）\n    el.clientHeight;\n    // 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）\n    el.getBoundingClientRect().height;\n    ```\n\n  + Iframe height\n\n    $iframe .contents() 方法返回 iframe 的 contentDocument\n\n    ```js\n    // jQuery\n    $('iframe').contents().height();\n\n    // Native\n    iframe.contentDocument.documentElement.scrollHeight;\n    ```\n\n- [2.3](#2.3) <a name='2.3'></a> Position & Offset\n\n  + Position\n\n    ```js\n    // jQuery\n    $el.position();\n\n    // Native\n    { left: el.offsetLeft, top: el.offsetTop }\n    ```\n\n  + Offset\n\n    ```js\n    // jQuery\n    $el.offset();\n\n    // Native\n    function getOffset (el) {\n      const box = el.getBoundingClientRect();\n\n      return {\n        top: box.top + window.pageYOffset - document.documentElement.clientTop,\n        left: box.left + window.pageXOffset - document.documentElement.clientLeft\n      }\n    }\n    ```\n\n- [2.4](#2.4) <a name='2.4'></a> Scroll Top\n\n  ```js\n  // jQuery\n  $(window).scrollTop();\n\n  // Native\n  (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## DOM Manipulation\n\n- [3.1](#3.1) <a name='3.1'></a> Remove\n  ```js\n  // jQuery\n  $el.remove();\n\n  // Native\n  el.parentNode.removeChild(el);\n  ```\n\n- [3.2](#3.2) <a name='3.2'></a> Text\n\n  + Get text\n\n    ```js\n    // jQuery\n    $el.text();\n\n    // Native\n    el.textContent;\n    ```\n\n  + Set text\n\n    ```js\n    // jQuery\n    $el.text(string);\n\n    // Native\n    el.textContent = string;\n    ```\n\n- [3.3](#3.3) <a name='3.3'></a> HTML\n\n  + Get HTML\n\n    ```js\n    // jQuery\n    $el.html();\n\n    // Native\n    el.innerHTML;\n    ```\n\n  + Set HTML\n\n    ```js\n    // jQuery\n    $el.html(htmlString);\n\n    // Native\n    el.innerHTML = htmlString;\n    ```\n\n- [3.4](#3.4) <a name='3.4'></a> Append\n\n  Append 插入到子节点的末尾\n\n  ```js\n  // jQuery\n  $el.append(\"<div id='container'>hello</div>\");\n\n  // Native\n  let newEl = document.createElement('div');\n  newEl.setAttribute('id', 'container');\n  newEl.innerHTML = 'hello';\n  el.appendChild(newEl);\n  ```\n\n- [3.5](#3.5) <a name='3.5'></a> Prepend\n\n  ```js\n  // jQuery\n  $el.prepend(\"<div id='container'>hello</div>\");\n\n  // Native\n  let newEl = document.createElement('div');\n  newEl.setAttribute('id', 'container');\n  newEl.innerHTML = 'hello';\n  el.insertBefore(newEl, el.firstChild);\n  ```\n\n- [3.6](#3.6) <a name='3.6'></a> insertBefore\n\n  在选中元素前插入新节点\n\n  ```js\n  // jQuery\n  $newEl.insertBefore(queryString);\n\n  // Native\n  const target = document.querySelector(queryString);\n  target.parentNode.insertBefore(newEl, target);\n  ```\n\n- [3.7](#3.7) <a name='3.7'></a> insertAfter\n\n  在选中元素后插入新节点\n\n  ```js\n  // jQuery\n  $newEl.insertAfter(queryString);\n\n  // Native\n  const target = document.querySelector(queryString);\n  target.parentNode.insertBefore(newEl, target.nextSibling);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## Ajax\n\n用 [fetch](https://github.com/camsong/fetch-ie8) 和 [fetch-jsonp](https://github.com/camsong/fetch-jsonp) 替代\n\n**[⬆ 回到顶部](#目录)**\n\n## Events\n\n完整地替代命名空间和事件代理，链接到 https://github.com/oneuijs/oui-dom-events\n\n- [5.1](#5.1) <a name='5.1'></a> Bind an event with on\n\n  ```js\n  // jQuery\n  $el.on(eventName, eventHandler);\n\n  // Native\n  el.addEventListener(eventName, eventHandler);\n  ```\n\n- [5.2](#5.2) <a name='5.2'></a> Unbind an event with off\n\n  ```js\n  // jQuery\n  $el.off(eventName, eventHandler);\n\n  // Native\n  el.removeEventListener(eventName, eventHandler);\n  ```\n\n- [5.3](#5.3) <a name='5.3'></a> Trigger\n\n  ```js\n  // jQuery\n  $(el).trigger('custom-event', {key1: 'data'});\n\n  // Native\n  if (window.CustomEvent) {\n    const event = new CustomEvent('custom-event', {detail: {key1: 'data'}});\n  } else {\n    const event = document.createEvent('CustomEvent');\n    event.initCustomEvent('custom-event', true, true, {key1: 'data'});\n  }\n\n  el.dispatchEvent(event);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\n## Utilities\n\n- [6.1](#6.1) <a name='6.1'></a> isArray\n\n  ```js\n  // jQuery\n  $.isArray(range);\n\n  // Native\n  Array.isArray(range);\n  ```\n\n- [6.2](#6.2) <a name='6.2'></a> Trim\n\n  ```js\n  // jQuery\n  $.trim(string);\n\n  // Native\n  string.trim();\n  ```\n\n- [6.3](#6.3) <a name='6.3'></a> Object Assign\n\n  继承，使用 object.assign polyfill https://github.com/ljharb/object.assign\n\n  ```js\n  // jQuery\n  $.extend({}, defaultOpts, opts);\n\n  // Native\n  Object.assign({}, defaultOpts, opts);\n  ```\n\n- [6.4](#6.4) <a name='6.4'></a> Contains\n\n  ```js\n  // jQuery\n  $.contains(el, child);\n\n  // Native\n  el !== child && el.contains(child);\n  ```\n\n**[⬆ 回到顶部](#目录)**\n\nhttps://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\n","slug":"jquery_to_js","published":1,"updated":"2017-01-17T01:49:26.132Z","comments":1,"photos":[],"link":"","_id":"cj4sal68v0009ek5bwzn7r2gn","content":"<h2 id=\"You-Don’t-Need-jQuery\"><a href=\"#You-Don’t-Need-jQuery\" class=\"headerlink\" title=\"You Don’t Need jQuery\"></a>You Don’t Need jQuery</h2><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#translations\">Translations</a></li>\n<li><a href=\"#query-selector\">Query Selector</a></li>\n<li><a href=\"#css--style\">CSS &amp; Style</a></li>\n<li><a href=\"#dom-manipulation\">DOM Manipulation</a></li>\n<li><a href=\"#ajax\">Ajax</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#utilities\">Utilities</a></li>\n<li><a href=\"#alternatives\">Alternatives</a></li>\n<li><a href=\"#browser-support\">Browser Support</a></li>\n</ol>\n<h2 id=\"Query-Selector\"><a href=\"#Query-Selector\" class=\"headerlink\" title=\"Query Selector\"></a>Query Selector</h2><p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p>\n<ul>\n<li><code>document.querySelector</code> 返回第一个匹配的 Element</li>\n<li><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</li>\n<li>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></li>\n</ul>\n<blockquote>\n<p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p>\n</blockquote>\n<ul>\n<li><p><a href=\"#1.0\">1.0</a> <a name=\"1.0\"></a> Query by selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'selector'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'selector'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.1\">1.1</a> <a name=\"1.1\"></a> Query by class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'css'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.2\">1.2</a> <a name=\"1.2\"></a> Query by id</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'#id'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#id'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'id'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.3\">1.3</a> <a name=\"1.3\"></a> Query by attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'a[target=_blank]'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'a[target=_blank]'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.4\">1.4</a> <a name=\"1.4\"></a> Find sth.</p>\n<ul>\n<li><p>Find nodes</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.find(<span class=\"string\">'li'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.querySelectorAll(<span class=\"string\">'li'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find body</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'body'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find Attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.attr(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">e.getAttribute(<span class=\"string\">'foo'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find data attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.data(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// using getAttribute</span></div><div class=\"line\">el.getAttribute(<span class=\"string\">'data-foo'</span>);</div><div class=\"line\"><span class=\"comment\">// you can also use `dataset` if only need to support IE 11+</span></div><div class=\"line\">el.dataset[<span class=\"string\">'foo'</span>];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.5\">1.5</a> <a name=\"1.5\"></a> Sibling/Previous/Next Elements</p>\n<ul>\n<li><p>Sibling elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.siblings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">[].filter.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child !== el;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Previous elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.prev();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.previousElementSibling;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Next elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// next</span></div><div class=\"line\">$el.next();</div><div class=\"line\">el.nextElementSibling;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.6\">1.6</a> <a name=\"1.6\"></a> Closest</p>\n<p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.closest(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closest</span>(<span class=\"params\">el, selector</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (el) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (matchesSelector.call(el, selector)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> el;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      el = el.parentElement;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.7\">1.7</a> <a name=\"1.7\"></a> Parents Until</p>\n<p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.parentsUntil(selector, filter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentsUntil</span>(<span class=\"params\">el, selector, filter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> result = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// match start from parent</span></div><div class=\"line\">  el = el.parentElement;</div><div class=\"line\">  <span class=\"keyword\">while</span> (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!filter) &#123;</div><div class=\"line\">      result.push(el);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (matchesSelector.call(el, filter)) &#123;</div><div class=\"line\">        result.push(el);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    el = el.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.8\">1.8</a> <a name=\"1.8\"></a> Form</p>\n<ul>\n<li><p>Input/Textarea</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'#my-input'</span>).val();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#my-input'</span>).value;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Get index of e.currentTarget between <code>.radio</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(e.currentTarget).index(<span class=\"string\">'.radio'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">[].indexOf.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.radio'</span>), e.currentTarget);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.9\">1.9</a> <a name=\"1.9\"></a> Iframe Contents</p>\n<p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p>\n<ul>\n<li><p>Iframe contents</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$iframe.contents();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Iframe Query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$iframe.contents().find(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument.querySelectorAll(<span class=\"string\">'.css'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"CSS-amp-Style\"><a href=\"#CSS-amp-Style\" class=\"headerlink\" title=\"CSS &amp; Style\"></a>CSS &amp; Style</h2><ul>\n<li><p><a href=\"#2.1\">2.1</a> <a name=\"2.1\"></a> CSS</p>\n<ul>\n<li><p>Get style</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.css(<span class=\"string\">\"color\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题</span></div><div class=\"line\"><span class=\"keyword\">const</span> win = el.ownerDocument.defaultView;</div><div class=\"line\"><span class=\"comment\">// null 的意思是不返回伪类元素</span></div><div class=\"line\">win.getComputedStyle(el, <span class=\"literal\">null</span>).color;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set style</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.css(&#123; <span class=\"attr\">color</span>: <span class=\"string\">\"#ff0011\"</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.style.color = <span class=\"string\">'#ff0011'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Get/Set Styles</p>\n<p>注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 <a href=\"https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194\" target=\"_blank\" rel=\"external\">setStyles</a> 方法</p>\n</li>\n<li><p>Add class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.addClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.add(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Remove class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.removeClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.remove(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>has class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.hasClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.contains(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Toggle class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.toggleClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.toggle(className);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.2\">2.2</a> <a name=\"2.2\"></a> Width &amp; Height</p>\n<p>Width 与 Height 获取方法相同，下面以 Height 为例：</p>\n<ul>\n<li><p>Window height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 不含 scrollbar，与 jQuery 行为一致</span></div><div class=\"line\"><span class=\"built_in\">window</span>.document.documentElement.clientHeight;</div><div class=\"line\"><span class=\"comment\">// 含 scrollbar</span></div><div class=\"line\"><span class=\"built_in\">window</span>.innerHeight;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Document height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollHeight;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Element height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 与 jQuery 一致（一直为 content 区域的高度）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeight</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> styles = <span class=\"keyword\">this</span>.getComputedStyle(el);</div><div class=\"line\">  <span class=\"keyword\">const</span> height = el.offsetHeight;</div><div class=\"line\">  <span class=\"keyword\">const</span> borderTopWidth = <span class=\"built_in\">parseFloat</span>(styles.borderTopWidth);</div><div class=\"line\">  <span class=\"keyword\">const</span> borderBottomWidth = <span class=\"built_in\">parseFloat</span>(styles.borderBottomWidth);</div><div class=\"line\">  <span class=\"keyword\">const</span> paddingTop = <span class=\"built_in\">parseFloat</span>(styles.paddingTop);</div><div class=\"line\">  <span class=\"keyword\">const</span> paddingBottom = <span class=\"built_in\">parseFloat</span>(styles.paddingBottom);</div><div class=\"line\">  <span class=\"keyword\">return</span> height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 精确到整数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span></div><div class=\"line\">el.clientHeight;</div><div class=\"line\"><span class=\"comment\">// 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span></div><div class=\"line\">el.getBoundingClientRect().height;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Iframe height</p>\n<p>$iframe .contents() 方法返回 iframe 的 contentDocument</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'iframe'</span>).contents().height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument.documentElement.scrollHeight;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.3\">2.3</a> <a name=\"2.3\"></a> Position &amp; Offset</p>\n<ul>\n<li><p>Position</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.position();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">&#123; <span class=\"attr\">left</span>: el.offsetLeft, <span class=\"attr\">top</span>: el.offsetTop &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Offset</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.offset();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOffset</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> box = el.getBoundingClientRect();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">top</span>: box.top + <span class=\"built_in\">window</span>.pageYOffset - <span class=\"built_in\">document</span>.documentElement.clientTop,</div><div class=\"line\">    <span class=\"attr\">left</span>: box.left + <span class=\"built_in\">window</span>.pageXOffset - <span class=\"built_in\">document</span>.documentElement.clientLeft</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.4\">2.4</a> <a name=\"2.4\"></a> Scroll Top</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">(<span class=\"built_in\">document</span>.documentElement &amp;&amp; <span class=\"built_in\">document</span>.documentElement.scrollTop) || <span class=\"built_in\">document</span>.body.scrollTop;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"DOM-Manipulation\"><a href=\"#DOM-Manipulation\" class=\"headerlink\" title=\"DOM Manipulation\"></a>DOM Manipulation</h2><ul>\n<li><p><a href=\"#3.1\">3.1</a> <a name=\"3.1\"></a> Remove</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.remove();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.parentNode.removeChild(el);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.2\">3.2</a> <a name=\"3.2\"></a> Text</p>\n<ul>\n<li><p>Get text</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.text();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.textContent;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set text</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.text(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.textContent = string;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#3.3\">3.3</a> <a name=\"3.3\"></a> HTML</p>\n<ul>\n<li><p>Get HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.html();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.innerHTML;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.html(htmlString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.innerHTML = htmlString;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#3.4\">3.4</a> <a name=\"3.4\"></a> Append</p>\n<p>Append 插入到子节点的末尾</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.append(<span class=\"string\">\"&lt;div id='container'&gt;hello&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">let</span> newEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">newEl.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'container'</span>);</div><div class=\"line\">newEl.innerHTML = <span class=\"string\">'hello'</span>;</div><div class=\"line\">el.appendChild(newEl);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.5\">3.5</a> <a name=\"3.5\"></a> Prepend</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.prepend(<span class=\"string\">\"&lt;div id='container'&gt;hello&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">let</span> newEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">newEl.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'container'</span>);</div><div class=\"line\">newEl.innerHTML = <span class=\"string\">'hello'</span>;</div><div class=\"line\">el.insertBefore(newEl, el.firstChild);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.6\">3.6</a> <a name=\"3.6\"></a> insertBefore</p>\n<p>在选中元素前插入新节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$newEl.insertBefore(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">document</span>.querySelector(queryString);</div><div class=\"line\">target.parentNode.insertBefore(newEl, target);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.7\">3.7</a> <a name=\"3.7\"></a> insertAfter</p>\n<p>在选中元素后插入新节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$newEl.insertAfter(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">document</span>.querySelector(queryString);</div><div class=\"line\">target.parentNode.insertBefore(newEl, target.nextSibling);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>用 <a href=\"https://github.com/camsong/fetch-ie8\" target=\"_blank\" rel=\"external\">fetch</a> 和 <a href=\"https://github.com/camsong/fetch-jsonp\" target=\"_blank\" rel=\"external\">fetch-jsonp</a> 替代</p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><p>完整地替代命名空间和事件代理，链接到 <a href=\"https://github.com/oneuijs/oui-dom-events\" target=\"_blank\" rel=\"external\">https://github.com/oneuijs/oui-dom-events</a></p>\n<ul>\n<li><p><a href=\"#5.1\">5.1</a> <a name=\"5.1\"></a> Bind an event with on</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.on(eventName, eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.addEventListener(eventName, eventHandler);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#5.2\">5.2</a> <a name=\"5.2\"></a> Unbind an event with off</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.off(eventName, eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.removeEventListener(eventName, eventHandler);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#5.3\">5.3</a> <a name=\"5.3\"></a> Trigger</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(el).trigger(<span class=\"string\">'custom-event'</span>, &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.CustomEvent) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'custom-event'</span>, &#123;<span class=\"attr\">detail</span>: &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;&#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> event = <span class=\"built_in\">document</span>.createEvent(<span class=\"string\">'CustomEvent'</span>);</div><div class=\"line\">  event.initCustomEvent(<span class=\"string\">'custom-event'</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">el.dispatchEvent(event);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h2><ul>\n<li><p><a href=\"#6.1\">6.1</a> <a name=\"6.1\"></a> isArray</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.isArray(range);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.isArray(range);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.2\">6.2</a> <a name=\"6.2\"></a> Trim</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.trim(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">string.trim();</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.3\">6.3</a> <a name=\"6.3\"></a> Object Assign</p>\n<p>继承，使用 object.assign polyfill <a href=\"https://github.com/ljharb/object.assign\" target=\"_blank\" rel=\"external\">https://github.com/ljharb/object.assign</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.extend(&#123;&#125;, defaultOpts, opts);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpts, opts);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.4\">6.4</a> <a name=\"6.4\"></a> Contains</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.contains(el, child);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el !== child &amp;&amp; el.contains(child);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<p><a href=\"https://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"external\">https://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md</a></p>\n","excerpt":"","more":"<h2 id=\"You-Don’t-Need-jQuery\"><a href=\"#You-Don’t-Need-jQuery\" class=\"headerlink\" title=\"You Don’t Need jQuery\"></a>You Don’t Need jQuery</h2><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10+ 以上浏览器。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#translations\">Translations</a></li>\n<li><a href=\"#query-selector\">Query Selector</a></li>\n<li><a href=\"#css--style\">CSS &amp; Style</a></li>\n<li><a href=\"#dom-manipulation\">DOM Manipulation</a></li>\n<li><a href=\"#ajax\">Ajax</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#utilities\">Utilities</a></li>\n<li><a href=\"#alternatives\">Alternatives</a></li>\n<li><a href=\"#browser-support\">Browser Support</a></li>\n</ol>\n<h2 id=\"Query-Selector\"><a href=\"#Query-Selector\" class=\"headerlink\" title=\"Query Selector\"></a>Query Selector</h2><p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p>\n<ul>\n<li><code>document.querySelector</code> 返回第一个匹配的 Element</li>\n<li><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</li>\n<li>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></li>\n</ul>\n<blockquote>\n<p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p>\n</blockquote>\n<ul>\n<li><p><a href=\"#1.0\">1.0</a> <a name='1.0'></a> Query by selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'selector'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'selector'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.1\">1.1</a> <a name='1.1'></a> Query by class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'css'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.2\">1.2</a> <a name='1.2'></a> Query by id</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'#id'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#id'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'id'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.3\">1.3</a> <a name='1.3'></a> Query by attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'a[target=_blank]'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'a[target=_blank]'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.4\">1.4</a> <a name='1.4'></a> Find sth.</p>\n<ul>\n<li><p>Find nodes</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.find(<span class=\"string\">'li'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.querySelectorAll(<span class=\"string\">'li'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find body</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'body'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find Attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.attr(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">e.getAttribute(<span class=\"string\">'foo'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Find data attribute</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.data(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// using getAttribute</span></div><div class=\"line\">el.getAttribute(<span class=\"string\">'data-foo'</span>);</div><div class=\"line\"><span class=\"comment\">// you can also use `dataset` if only need to support IE 11+</span></div><div class=\"line\">el.dataset[<span class=\"string\">'foo'</span>];</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.5\">1.5</a> <a name='1.5'></a> Sibling/Previous/Next Elements</p>\n<ul>\n<li><p>Sibling elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.siblings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">[].filter.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> child !== el;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Previous elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.prev();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.previousElementSibling;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Next elements</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// next</span></div><div class=\"line\">$el.next();</div><div class=\"line\">el.nextElementSibling;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.6\">1.6</a> <a name='1.6'></a> Closest</p>\n<p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.closest(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closest</span>(<span class=\"params\">el, selector</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span> (el) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (matchesSelector.call(el, selector)) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> el;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      el = el.parentElement;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.7\">1.7</a> <a name='1.7'></a> Parents Until</p>\n<p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.parentsUntil(selector, filter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentsUntil</span>(<span class=\"params\">el, selector, filter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> result = [];</div><div class=\"line\">  <span class=\"keyword\">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// match start from parent</span></div><div class=\"line\">  el = el.parentElement;</div><div class=\"line\">  <span class=\"keyword\">while</span> (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!filter) &#123;</div><div class=\"line\">      result.push(el);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (matchesSelector.call(el, filter)) &#123;</div><div class=\"line\">        result.push(el);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    el = el.parentElement;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#1.8\">1.8</a> <a name='1.8'></a> Form</p>\n<ul>\n<li><p>Input/Textarea</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'#my-input'</span>).val();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#my-input'</span>).value;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Get index of e.currentTarget between <code>.radio</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(e.currentTarget).index(<span class=\"string\">'.radio'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">[].indexOf.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.radio'</span>), e.currentTarget);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#1.9\">1.9</a> <a name='1.9'></a> Iframe Contents</p>\n<p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p>\n<ul>\n<li><p>Iframe contents</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$iframe.contents();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Iframe Query</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$iframe.contents().find(<span class=\"string\">'.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument.querySelectorAll(<span class=\"string\">'.css'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"CSS-amp-Style\"><a href=\"#CSS-amp-Style\" class=\"headerlink\" title=\"CSS &amp; Style\"></a>CSS &amp; Style</h2><ul>\n<li><p><a href=\"#2.1\">2.1</a> <a name='2.1'></a> CSS</p>\n<ul>\n<li><p>Get style</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.css(<span class=\"string\">\"color\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题</span></div><div class=\"line\"><span class=\"keyword\">const</span> win = el.ownerDocument.defaultView;</div><div class=\"line\"><span class=\"comment\">// null 的意思是不返回伪类元素</span></div><div class=\"line\">win.getComputedStyle(el, <span class=\"literal\">null</span>).color;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set style</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.css(&#123; <span class=\"attr\">color</span>: <span class=\"string\">\"#ff0011\"</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.style.color = <span class=\"string\">'#ff0011'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Get/Set Styles</p>\n<p>注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 <a href=\"https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194\">setStyles</a> 方法</p>\n</li>\n<li><p>Add class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.addClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.add(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Remove class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.removeClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.remove(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>has class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.hasClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.contains(className);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Toggle class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.toggleClass(className);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.classList.toggle(className);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.2\">2.2</a> <a name='2.2'></a> Width &amp; Height</p>\n<p>Width 与 Height 获取方法相同，下面以 Height 为例：</p>\n<ul>\n<li><p>Window height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 不含 scrollbar，与 jQuery 行为一致</span></div><div class=\"line\"><span class=\"built_in\">window</span>.document.documentElement.clientHeight;</div><div class=\"line\"><span class=\"comment\">// 含 scrollbar</span></div><div class=\"line\"><span class=\"built_in\">window</span>.innerHeight;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Document height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">document</span>.documentElement.scrollHeight;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Element height</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"comment\">// 与 jQuery 一致（一直为 content 区域的高度）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHeight</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> styles = <span class=\"keyword\">this</span>.getComputedStyle(el);</div><div class=\"line\">  <span class=\"keyword\">const</span> height = el.offsetHeight;</div><div class=\"line\">  <span class=\"keyword\">const</span> borderTopWidth = <span class=\"built_in\">parseFloat</span>(styles.borderTopWidth);</div><div class=\"line\">  <span class=\"keyword\">const</span> borderBottomWidth = <span class=\"built_in\">parseFloat</span>(styles.borderBottomWidth);</div><div class=\"line\">  <span class=\"keyword\">const</span> paddingTop = <span class=\"built_in\">parseFloat</span>(styles.paddingTop);</div><div class=\"line\">  <span class=\"keyword\">const</span> paddingBottom = <span class=\"built_in\">parseFloat</span>(styles.paddingBottom);</div><div class=\"line\">  <span class=\"keyword\">return</span> height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 精确到整数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span></div><div class=\"line\">el.clientHeight;</div><div class=\"line\"><span class=\"comment\">// 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span></div><div class=\"line\">el.getBoundingClientRect().height;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Iframe height</p>\n<p>$iframe .contents() 方法返回 iframe 的 contentDocument</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"string\">'iframe'</span>).contents().height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">iframe.contentDocument.documentElement.scrollHeight;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.3\">2.3</a> <a name='2.3'></a> Position &amp; Offset</p>\n<ul>\n<li><p>Position</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.position();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">&#123; <span class=\"attr\">left</span>: el.offsetLeft, <span class=\"attr\">top</span>: el.offsetTop &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Offset</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.offset();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOffset</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> box = el.getBoundingClientRect();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">top</span>: box.top + <span class=\"built_in\">window</span>.pageYOffset - <span class=\"built_in\">document</span>.documentElement.clientTop,</div><div class=\"line\">    <span class=\"attr\">left</span>: box.left + <span class=\"built_in\">window</span>.pageXOffset - <span class=\"built_in\">document</span>.documentElement.clientLeft</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#2.4\">2.4</a> <a name='2.4'></a> Scroll Top</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).scrollTop();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">(<span class=\"built_in\">document</span>.documentElement &amp;&amp; <span class=\"built_in\">document</span>.documentElement.scrollTop) || <span class=\"built_in\">document</span>.body.scrollTop;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"DOM-Manipulation\"><a href=\"#DOM-Manipulation\" class=\"headerlink\" title=\"DOM Manipulation\"></a>DOM Manipulation</h2><ul>\n<li><p><a href=\"#3.1\">3.1</a> <a name='3.1'></a> Remove</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.remove();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.parentNode.removeChild(el);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.2\">3.2</a> <a name='3.2'></a> Text</p>\n<ul>\n<li><p>Get text</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.text();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.textContent;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set text</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.text(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.textContent = string;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#3.3\">3.3</a> <a name='3.3'></a> HTML</p>\n<ul>\n<li><p>Get HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.html();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.innerHTML;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set HTML</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.html(htmlString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.innerHTML = htmlString;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#3.4\">3.4</a> <a name='3.4'></a> Append</p>\n<p>Append 插入到子节点的末尾</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.append(<span class=\"string\">\"&lt;div id='container'&gt;hello&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">let</span> newEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">newEl.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'container'</span>);</div><div class=\"line\">newEl.innerHTML = <span class=\"string\">'hello'</span>;</div><div class=\"line\">el.appendChild(newEl);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.5\">3.5</a> <a name='3.5'></a> Prepend</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.prepend(<span class=\"string\">\"&lt;div id='container'&gt;hello&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">let</span> newEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">newEl.setAttribute(<span class=\"string\">'id'</span>, <span class=\"string\">'container'</span>);</div><div class=\"line\">newEl.innerHTML = <span class=\"string\">'hello'</span>;</div><div class=\"line\">el.insertBefore(newEl, el.firstChild);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.6\">3.6</a> <a name='3.6'></a> insertBefore</p>\n<p>在选中元素前插入新节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$newEl.insertBefore(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">document</span>.querySelector(queryString);</div><div class=\"line\">target.parentNode.insertBefore(newEl, target);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#3.7\">3.7</a> <a name='3.7'></a> insertAfter</p>\n<p>在选中元素后插入新节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$newEl.insertAfter(queryString);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">document</span>.querySelector(queryString);</div><div class=\"line\">target.parentNode.insertBefore(newEl, target.nextSibling);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>用 <a href=\"https://github.com/camsong/fetch-ie8\">fetch</a> 和 <a href=\"https://github.com/camsong/fetch-jsonp\">fetch-jsonp</a> 替代</p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h2><p>完整地替代命名空间和事件代理，链接到 <a href=\"https://github.com/oneuijs/oui-dom-events\">https://github.com/oneuijs/oui-dom-events</a></p>\n<ul>\n<li><p><a href=\"#5.1\">5.1</a> <a name='5.1'></a> Bind an event with on</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.on(eventName, eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.addEventListener(eventName, eventHandler);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#5.2\">5.2</a> <a name='5.2'></a> Unbind an event with off</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$el.off(eventName, eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el.removeEventListener(eventName, eventHandler);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#5.3\">5.3</a> <a name='5.3'></a> Trigger</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$(el).trigger(<span class=\"string\">'custom-event'</span>, &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.CustomEvent) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> CustomEvent(<span class=\"string\">'custom-event'</span>, &#123;<span class=\"attr\">detail</span>: &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;&#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> event = <span class=\"built_in\">document</span>.createEvent(<span class=\"string\">'CustomEvent'</span>);</div><div class=\"line\">  event.initCustomEvent(<span class=\"string\">'custom-event'</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, &#123;<span class=\"attr\">key1</span>: <span class=\"string\">'data'</span>&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">el.dispatchEvent(event);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h2><ul>\n<li><p><a href=\"#6.1\">6.1</a> <a name='6.1'></a> isArray</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.isArray(range);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.isArray(range);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.2\">6.2</a> <a name='6.2'></a> Trim</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.trim(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">string.trim();</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.3\">6.3</a> <a name='6.3'></a> Object Assign</p>\n<p>继承，使用 object.assign polyfill <a href=\"https://github.com/ljharb/object.assign\">https://github.com/ljharb/object.assign</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.extend(&#123;&#125;, defaultOpts, opts);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpts, opts);</div></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"#6.4\">6.4</a> <a name='6.4'></a> Contains</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jQuery</span></div><div class=\"line\">$.contains(el, child);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Native</span></div><div class=\"line\">el !== child &amp;&amp; el.contains(child);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<p><a href=\"https://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\">https://github.com/tomfanxiaojun/You-Dont-Need-jQuery/blob/master/README.zh-CN.md</a></p>\n"},{"title":"如何优雅的去实现一个javascript的交互功能","layout":"post","date":"2016-11-24T06:42:55.000Z","keywords":"javascript","description":"作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。。","_content":"\n\n\n```\n程序员，最终的目的，都是把产品或代码封装到一起，提供接口，让使用者很舒适的实现功能。所以对于我来说，\n往往头疼的不是写代码，而是写注释和文档！如果接口很乱，肯定会头疼一整天。\n\n```\n\n用来演示怎么使用richbase来制作组件的例子\n\n\n作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。\n\n下面我们来谈谈，在现有的知识体系下，如何很好的写组件。\n\n比如我们要实现这样一个组件，就是一个输入框里面字数的计数。这个应该是个很简单的需求。\n\n![图片](http://gtms03.alicdn.com/tps/i3/TB1QTOaHXXXXXbkaXXX0TQoKFXX-261-61.gif)\n\n\n我们来看看，下面的各种写法。\n\n> 为了更清楚的演示，下面全部使用jQuery作为基础语言库。\n\n\n## 最简陋的写法\n\n嗯 所谓的入门级写法呢，就是完完全全的全局函数全局变量的写法。（就我所知，现在好多外包还是这种写法）\n\n代码如下：\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>test</title>\n  <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n  <script>\n    $(function() {\n\n      var input = $('#J_input');\n\n      //用来获取字数\n      function getNum(){\n        return input.val().length;\n      }\n\n      //渲染元素\n      function render(){\n        var num = getNum();\n\n        //没有字数的容器就新建一个\n        if ($('#J_input_count').length == 0) {\n          input.after('<span id=\"J_input_count\"></span>');\n        };\n\n        $('#J_input_count').html(num+'个字');\n      }\n\n      //监听事件\n      input.on('keyup',function(){\n        render();\n      });\n\n      //初始化，第一次渲染\n      render();\n\n\n    })\n  </script>\n</head>\n<body>\n<input type=\"text\" id=\"J_input\"/>\n</body>\n</html>\n\n\n```\n\n这段代码跑也是可以跑的，但是呢，各种变量混乱，没有很好的隔离作用域,当页面变的复杂的时候,会很难去维护。目前这种代码基本是用不了的。当然少数的活动页面可以简单用用。\n\n## 作用域隔离\n\n让我们对上面的代码作些改动，使用单个变量模拟命名空间。\n\n``` js\nvar textCount = {\n  input:null,\n  init:function(config){\n    this.input = $(config.id);\n    this.bind();\n    //这边范围对应的对象，可以实现链式调用\n    return this;\n  },\n  bind:function(){\n    var self = this;\n    this.input.on('keyup',function(){\n      self.render();\n    });\n  },\n  getNum:function(){\n    return this.input.val().length;\n  },\n  //渲染元素\n  render:function(){\n    var num = this.getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n  }\n}\n\n$(function() {\n  //在domready后调用\n  textCount.init({id:'#J_input'}).render();\n})\n\n\n```\n这样一改造，立马变的清晰了很多，所有的功能都在一个变量下面。代码更清晰，并且有统一的入口调用方法。\n\n但是还是有些瑕疵，这种写法没有私有的概念，比如上面的getNum,bind应该都是私有的方法。但是其他代码可以很随意的改动这些。当代码量特别特别多的时候，很容易出现变量重复，或被修改的问题。\n\n于是又出现了一种函数闭包的写法：\n\n\n``` js\nvar TextCount = (function(){\n  //私有方法，外面将访问不到\n  var _bind = function(that){\n    that.input.on('keyup',function(){\n      that.render();\n    });\n  }\n\n  var _getNum = function(that){\n    return that.input.val().length;\n  }\n\n  var TextCountFun = function(config){\n\n  }\n\n  TextCountFun.prototype.init = function(config) {\n    this.input = $(config.id);\n    _bind(this);\n\n    return this;\n  };\n\n  TextCountFun.prototype.render = function() {\n    var num = _getNum(this);\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n  };\n  //返回构造函数\n  return TextCountFun;\n\n})();\n\n$(function() {\n  new TextCount().init({id:'#J_input'}).render();\n})\n\n```\n这种写法，把所有的东西都包在了一个自动执行的闭包里面，所以不会受到外面的影响，并且只对外公开了TextCountFun构造函数，生成的对象只能访问到init,render方法。这种写法已经满足绝大多数的需求了。事实上大部分的jQuery插件都是这种写法。\n\n## 面向对象\n\n上面的写法已经可以满足绝大多数需求了。\n\n但是呢，当一个页面特别复杂，当我们需要的组件越来越多，当我们需要做一套组件。仅仅用这个就不行了。首先的问题就是，这种写法太灵活了，写单个组件还可以。如果我们需要做一套风格相近的组件，而且是多个人同时在写。那真的是噩梦。\n\n在编程的圈子里，面向对象一直是被认为最佳的编写代码方式。比如java，就是因为把面向对象发挥到了极致，所以多个人写出来的代码都很接近，维护也很方便。但是很不幸的是，javascript不支持class类的定义。但是我们可以模拟。\n\n下面我们先实现个简单的javascript类：\n\n```js\nvar Class = (function() {\n  var _mix = function(r, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        r[p] = s[p]\n      }\n    }\n  }\n\n  var _extend = function() {\n\n    //开关 用来使生成原型时,不调用真正的构成流程init\n    this.initPrototype = true\n    var prototype = new this()\n    this.initPrototype = false\n\n    var items = Array.prototype.slice.call(arguments) || []\n    var item\n\n    //支持混入多个属性，并且支持{}也支持 Function\n    while (item = items.shift()) {\n      _mix(prototype, item.prototype || item)\n    }\n\n\n    // 这边是返回的类，其实就是我们返回的子类\n    function SubClass() {\n      if (!SubClass.initPrototype && this.init)\n        this.init.apply(this, arguments)//调用init真正的构造函数\n    }\n\n    // 赋值原型链，完成继承\n    SubClass.prototype = prototype\n\n    // 改变constructor引用\n    SubClass.prototype.constructor = SubClass\n\n    // 为子类也添加extend方法\n    SubClass.extend = _extend\n\n    return SubClass\n  }\n  //超级父类\n  var Class = function() {}\n  //为超级父类添加extend方法\n  Class.extend = _extend\n\n  return Class\n})()\n\n```\n这是拿John Resig的class简单修改了下。\n\n> 这边只是很简陋的实现了类的继承机制。如果对类的实现有兴趣可以参考我另一篇文章[javascript oo实现](http://purplebamboo.github.io/2014/07/13/javascript-oo-class/)\n\n我们看下使用方法：\n\n```js\n//继承超级父类，生成个子类Animal，并且混入一些方法。这些方法会到Animal的原型上。\n//另外这边不仅支持混入{}，还支持混入Function\nvar Animal = Class.extend({\n  init:function(opts){\n    this.msg = opts.msg\n    this.type = \"animal\"\n  },\n  say:function(){\n    alert(this.msg+\":i am a \"+this.type)\n  }\n})\n\n\n//继承Animal，并且混入一些方法\nvar Dog = Animal.extend({\n  init:function(opts){\n    //并未实现super方法，直接简单使用父类原型调用即可\n    Animal.prototype.init.call(this,opts)\n    //修改了type类型\n    this.type = \"dog\"\n  }\n})\n\n//new Animal({msg:'hello'}).say()\n\nnew Dog({msg:'hi'}).say()\n\n\n```\n使用很简单，超级父类具有extend方法，可以继承出一个子类。子类也具有extend方法。\n\n这边要强调的是，继承的父类都是一个也就是单继承。但是可以通过extend实现多重混入。详见下面用法。\n\n有了这个类的扩展，我们可以这么编写代码了：\n\n```js\n\nvar TextCount = Class.extend({\n  init:function(config){\n    this.input = $(config.id);\n    this._bind();\n    this.render();\n  },\n  render:function() {\n    var num = this._getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n\n  },\n  _getNum:function(){\n    return this.input.val().length;\n  },\n  _bind:function(){\n    var self = this;\n    self.input.on('keyup',function(){\n      self.render();\n    });\n  }\n})\n\n$(function() {\n  new TextCount({\n    id:\"#J_input\"\n  });\n})\n\n\n```\n\n这边可能还没看见class的真正好处，不急我们继续往下。\n\n## 抽象出base\n\n可以看到，我们的组件有些方法，是大部分组件都会有的。\n\n* 比如init用来初始化属性。\n* 比如render用来处理渲染的逻辑。\n* 比如bind用来处理事件的绑定。\n\n当然这也是一种约定俗成的规范了。如果大家全部按照这种风格来写代码，开发大规模组件库就变得更加规范，相互之间配合也更容易。\n\n这个时候面向对象的好处就来了，我们抽象出一个Base类。其他组件编写时都继承它。\n\n```js\nvar Base = Class.extend({\n  init:function(config){\n    //自动保存配置项\n    this.__config = config\n    this.bind()\n    this.render()\n  },\n  //可以使用get来获取配置项\n  get:function(key){\n    return this.__config[key]\n  },\n  //可以使用set来设置配置项\n  set:function(key,value){\n    this.__config[key] = value\n  },\n  bind:function(){\n  },\n  render:function() {\n\n  },\n  //定义销毁的方法，一些收尾工作都应该在这里\n  destroy:function(){\n\n  }\n})\n\n```\n\nbase类主要把组件的一般性内容都提取了出来，这样我们编写组件时可以直接继承base类，覆盖里面的bind和render方法。\n\n于是我们可以这么写代码：\n\n```js\nvar TextCount = Base.extend({\n  _getNum:function(){\n    return this.get('input').val().length;\n  },\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      self.render();\n    });\n  },\n  render:function() {\n    var num = this._getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.get('input').after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n\n  }\n})\n\n$(function() {\n  new TextCount({\n  //这边直接传input的节点了，因为属性的赋值都是自动的。\n    input:$(\"#J_input\")\n  });\n})\n\n```\n可以看到我们直接实现一些固定的方法，bind，render就行了。其他的base会自动处理（这里只是简单处理了配置属性的赋值）。\n\n事实上，这边的init，bind，render就已经有了点生命周期的影子，但凡是组件都会具有这几个阶段，初始化，绑定事件，以及渲染。当然这边还可以加一个destroy销毁的方法，用来清理现场。\n\n此外为了方便，这边直接变成了传递input的节点。因为属性赋值自动化了，一般来说这种情况下都是使用getter，setter来处理。这边就不详细展开了。\n\n\n## 引入事件机制（观察者模式）\n\n有了base应该说我们编写组件更加的规范化，体系化了。下面我们继续深挖。\n\n\n还是上面的那个例子，如果我们希望输入字的时候超过5个字就弹出警告。该怎么办呢。\n\n小白可能会说，那简单啊直接改下bind方法：\n\n```js\nvar TextCount = Base.extend({\n  ...\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      if(self._getNum() > 5){\n        alert('超过了5个字了。。。')\n      }\n      self.render();\n    });\n  },\n  ...\n})\n\n\n```\n\n的确也是一种方法，但是太low了，代码严重耦合。当这种需求特别特别多，代码会越来越乱。\n\n这个时候就要引入事件机制，也就是经常说的观察者模式。\n\n> 注意这边的事件机制跟平时的浏览器那些事件不是一回事，要分开来看。\n\n什么是观察者模式呢，官方的解释就不说了，直接拿这个例子来说。\n\n想象一下base是个机器人会说话，他会一直监听输入的字数并且汇报出去（通知）。而你可以把耳朵凑上去，听着他的汇报（监听）。发现字数超过5个字了，你就做些操作。\n\n所以这分为两个部分，一个是通知，一个是监听。\n\n假设通知是 fire方法，监听是on。于是我们可以这么写代码：\n\n```js\nvar TextCount = Base.extend({\n  ...\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      //通知,每当有输入的时候，就报告出去。\n      self.fire('Text.input',self._getNum())\n      self.render();\n    });\n  },\n  ...\n})\n\n$(function() {\n  var t = new TextCount({\n    input:$(\"#J_input\")\n  });\n  //监听这个输入事件\n  t.on('Text.input',function(num){\n    //可以获取到传递过来的值\n    if(num>5){\n       alert('超过了5个字了。。。')\n    }\n  })\n})\n\n```\n\nfire用来触发一个事件，可以传递数据。而on用来添加一个监听。这样组件里面只负责把一些关键的事件抛出来，至于具体的业务逻辑都可以添加监听来实现。没有事件的组件是不完整的。\n\n\n下面我们看看怎么实现这套事件机制。\n\n我们首先抛开base，想想怎么实现一个具有这套机制的类。\n\n```js\n\n//辅组函数，获取数组里某个元素的索引 index\nvar _indexOf = function(array,key){\n  if (array === null) return -1\n  var i = 0, length = array.length\n  for (; i < length; i++) if (array[i] === item) return i\n  return -1\n}\n\nvar Event = Class.extend({\n  //添加监听\n  on:function(key,listener){\n    //this.__events存储所有的处理函数\n    if (!this.__events) {\n      this.__events = {}\n    }\n    if (!this.__events[key]) {\n      this.__events[key] = []\n    }\n    if (_indexOf(this.__events,listener) === -1 && typeof listener === 'function') {\n      this.__events[key].push(listener)\n    }\n\n    return this\n  },\n  //触发一个事件，也就是通知\n  fire:function(key){\n\n    if (!this.__events || !this.__events[key]) return\n\n    var args = Array.prototype.slice.call(arguments, 1) || []\n\n    var listeners = this.__events[key]\n    var i = 0\n    var l = listeners.length\n\n    for (i; i < l; i++) {\n      listeners[i].apply(this,args)\n    }\n\n    return this\n  },\n  //取消监听\n  off:function(key,listener){\n\n    if (!key && !listener) {\n      this.__events = {}\n    }\n    //不传监听函数，就去掉当前key下面的所有的监听函数\n    if (key && !listener) {\n      delete this.__events[key]\n    }\n\n    if (key && listener) {\n      var listeners = this.__events[key]\n      var index = _indexOf(listeners, listener)\n\n      (index > -1) && listeners.splice(index, 1)\n    }\n\n    return this;\n  }\n})\n\n\nvar a = new Event()\n\n//添加监听 test事件\na.on('test',function(msg){\n  alert(msg)\n})\n\n//触发 test事件\na.fire('test','我是第一次触发')\na.fire('test','我又触发了')\n\na.off('test')\n\na.fire('test','你应该看不到我了')\n\n\n```\n实现起来并不复杂，只要使用this.__events存下所有的监听函数。在fire的时候去找到并且执行就行了。\n\n这个时候面向对象的好处就来了，如果我们希望base拥有事件机制。只需要这么写:\n\n```js\nvar Base = Class.extend(Event,{\n  ...\n  destroy:function(){\n    //去掉所有的事件监听\n    this.off()\n  }\n})\n//于是可以\n//var a  = new Base()\n// a.on(xxx,fn)\n//\n// a.fire()\n```\n是的只要extend的时候多混入一个Event，这样Base或者它的子类生成的对象都会自动具有事件机制。\n\n有了事件机制我们可以把组件内部很多状态暴露出来，比如我们可以在set方法中抛出一个事件，这样每次属性变更的时候我们都可以监听到。\n\n\n到这里为止，我们的base类已经像模像样了，具有了init，bind，render，destroy方法来表示组件的各个关键过程，并且具有了事件机制。基本上已经可以很好的来开发组件了。\n\n\n## 更进一步，richbase\n\n\n我们还可以继续深挖。看看我们的base，还差些什么。首先浏览器的事件监听还很落后，需要用户自己在bind里面绑定，再然后现在的TextCount里面还存在dom操作，也没有自己的模板机制。这都是需要扩展的，于是我们在base的基础上再继承出一个richbase用来实现更完备的组件基类。\n\n主要实现这些功能：\n\n* 事件代理：不需要用户自己去找dom元素绑定监听，也不需要用户去关心什么时候销毁。\n* 模板渲染：用户不需要覆盖render方法，而是覆盖实现setUp方法。可以通过在setUp里面调用render来达到渲染对应html的目的。\n* 单向绑定：通过setChuckdata方法，更新数据，同时会更新html内容，不再需要dom操作。\n\n\n我们看下我们实现richbase后怎么写组件：\n\n```js\nvar TextCount = RichBase.extend({\n  //事件直接在这里注册，会代理到parentNode节点，parentNode节点在下面指定\n  EVENTS:{\n    //选择器字符串，支持所有jQuery风格的选择器\n    'input':{\n      //注册keyup事件\n      keyup:function(self,e){\n        //单向绑定，修改数据直接更新对应模板\n        self.setChuckdata('count',self._getNum())\n\n      }\n    }\n  },\n  //指定当前组件的模板\n  template:'<span id=\"J_input_count\"><%= count %>个字</span>',\n  //私有方法\n  _getNum:function(){\n    return this.get('input').val().length || 0\n  },\n  //覆盖实现setUp方法，所有逻辑写在这里。最后可以使用render来决定需不需要渲染模板\n  //模板渲染后会append到parentNode节点下面，如果未指定，会append到document.body\n  setUp:function(){\n    var self = this;\n\n    var input = this.get('parentNode').find('#J_input')\n    self.set('input',input)\n\n    var num = this._getNum()\n    //赋值数据，渲染模板，选用。有的组件没有对应的模板就可以不调用这步。\n    self.render({\n      count:num\n    })\n\n  }\n})\n\n$(function() {\n  //传入parentNode节点，组件会挂载到这个节点上。所有事件都会代理到这个上面。\n  new TextCount({\n    parentNode:$(\"#J_test_container\")\n  });\n})\n\n/**对应的html,做了些修改，主要为了加上parentNode，这边就是J_test_container\n\n<div id=\"J_test_container\">\n  <input type=\"text\" id=\"J_input\"/>\n</div>\n\n*/\n\n\n```\n\n看下上面的用法，可以看到变得更简单清晰了：\n\n* 事件不需要自己绑定，直接注册在EVENTS属性上。程序会自动将事件代理到parentNode上。\n* 引入了模板机制，使用template规定组件的模板，然后在setUp里面使用render(data)的方式渲染模板，程序会自动帮你append到parentNode下面。\n* 单向绑定，无需操作dom，后面要改动内容，不需要操作dom，只需要调用setChuckdata(key,新的值)，选择性的更新某个数据，相应的html会自动重新渲染。\n\n\n\n\n下面我们看下richebase的实现：\n\n```js\n\nvar RichBase = Base.extend({\n  EVENTS:{},\n  template:'',\n  init:function(config){\n    //存储配置项\n    this.__config = config\n    //解析代理事件\n    this._delegateEvent()\n    this.setUp()\n  },\n  //循环遍历EVENTS，使用jQuery的delegate代理到parentNode\n  _delegateEvent:function(){\n    var self = this\n    var events = this.EVENTS || {}\n    var eventObjs,fn,select,type\n    var parentNode = this.get('parentNode') || $(document.body)\n\n    for (select in events) {\n      eventObjs = events[select]\n\n      for (type in eventObjs) {\n        fn = eventObjs[type]\n\n        parentNode.delegate(select,type,function(e){\n          fn.call(null,self,e)\n        })\n      }\n\n    }\n\n  },\n  //支持underscore的极简模板语法\n  //用来渲染模板，这边是抄的underscore的。非常简单的模板引擎，支持原生的js语法\n  _parseTemplate:function(str,data){\n    /**\n     * http://ejohn.org/blog/javascript-micro-templating/\n     * https://github.com/jashkenas/underscore/blob/0.1.0/underscore.js#L399\n     */\n    var fn = new Function('obj',\n        'var p=[],print=function(){p.push.apply(p,arguments);};' +\n        'with(obj){p.push(\\'' + str\n            .replace(/[\\r\\t\\n]/g, \" \")\n            .split(\"<%\").join(\"\\t\")\n            .replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n            .replace(/\\t=(.*?)%>/g, \"',$1,'\")\n            .split(\"\\t\").join(\"');\")\n            .split(\"%>\").join(\"p.push('\")\n            .split(\"\\r\").join(\"\\\\'\") +\n        \"');}return p.join('');\")\n    return data ? fn(data) : fn\n  },\n  //提供给子类覆盖实现\n  setUp:function(){\n    this.render()\n  },\n  //用来实现刷新，只需要传入之前render时的数据里的key还有更新值，就可以自动刷新模板\n  setChuckdata:function(key,value){\n    var self = this\n    var data = self.get('__renderData')\n\n    //更新对应的值\n    data[key] = value\n\n    if (!this.template) return;\n    //重新渲染\n    var newHtmlNode = $(self._parseTemplate(this.template,data))\n    //拿到存储的渲染后的节点\n    var currentNode = self.get('__currentNode')\n    if (!currentNode) return;\n    //替换内容\n    currentNode.replaceWith(newHtmlNode)\n\n    self.set('__currentNode',newHtmlNode)\n\n  },\n  //使用data来渲染模板并且append到parentNode下面\n  render:function(data){\n    var self = this\n    //先存储起来渲染的data,方便后面setChuckdata获取使用\n    self.set('__renderData',data)\n\n    if (!this.template) return;\n\n    //使用_parseTemplate解析渲染模板生成html\n    //子类可以覆盖这个方法使用其他的模板引擎解析\n    var html = self._parseTemplate(this.template,data)\n\n    var parentNode = this.get('parentNode') || $(document.body)\n\n    var currentNode = $(html)\n    //保存下来留待后面的区域刷新\n    //存储起来，方便后面setChuckdata获取使用\n    self.set('__currentNode',currentNode)\n    parentNode.append(currentNode)\n  },\n  destroy:function(){\n\n    var self = this\n    //去掉自身的事件监听\n    self.off()\n    //删除渲染好的dom节点\n    self.get('__currentNode').remove()\n    //去掉绑定的代理事件\n    var events = self.EVENTS || {}\n    var eventObjs,fn,select,type\n    var parentNode = self.get('parentNode')\n\n    for (select in events) {\n      eventObjs = events[select]\n\n      for (type in eventObjs) {\n        fn = eventObjs[type]\n\n        parentNode.undelegate(select,type,fn)\n      }\n\n    }\n\n  }\n})\n\n\n```\n\n主要做了两件事，一个就是事件的解析跟代理，全部代理到parentNode上面。另外就是把render抽出来，用户只需要实现setUp方法。如果需要模板支持就在setUp里面调用render来渲染模板，并且可以通过setChuckdata来刷新模板，实现单向绑定。\n\n\n\n\n## 结语\n\n有了richbase，基本上组件开发就没啥问题了。但是我们还是可以继续深挖下去。\n\n比如组件自动化加载渲染，局部刷新，比如父子组件的嵌套，再比如双向绑定，再比如实现ng-click这种风格的事件机制。\n\n当然这些东西已经不属于组件里面的内容了。再进一步其实已经是一个框架了。实际上最近比较流行的react，ploymer还有我们的brix等等都是实现了这套东西。受限于篇幅，这个以后有空再写篇文章详细分析下。\n\n\n>这是一个github上的相关demo\n\n转载地址:https://github.com/purplebamboo/demo-richbase\n请点[这里](https://github.com/purplebamboo/demo-richbase)。\n\n\n\n\n","source":"_posts/javascript-code.md","raw":"---\ntitle: 如何优雅的去实现一个javascript的交互功能\nlayout: post\ndate: 2016-11-24 14:42:55\ncategories: javascript\ntags: [javascript]\nkeywords: javascript\ndescription: 作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。。\n\n---\n\n\n\n```\n程序员，最终的目的，都是把产品或代码封装到一起，提供接口，让使用者很舒适的实现功能。所以对于我来说，\n往往头疼的不是写代码，而是写注释和文档！如果接口很乱，肯定会头疼一整天。\n\n```\n\n用来演示怎么使用richbase来制作组件的例子\n\n\n作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。\n\n下面我们来谈谈，在现有的知识体系下，如何很好的写组件。\n\n比如我们要实现这样一个组件，就是一个输入框里面字数的计数。这个应该是个很简单的需求。\n\n![图片](http://gtms03.alicdn.com/tps/i3/TB1QTOaHXXXXXbkaXXX0TQoKFXX-261-61.gif)\n\n\n我们来看看，下面的各种写法。\n\n> 为了更清楚的演示，下面全部使用jQuery作为基础语言库。\n\n\n## 最简陋的写法\n\n嗯 所谓的入门级写法呢，就是完完全全的全局函数全局变量的写法。（就我所知，现在好多外包还是这种写法）\n\n代码如下：\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>test</title>\n  <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n  <script>\n    $(function() {\n\n      var input = $('#J_input');\n\n      //用来获取字数\n      function getNum(){\n        return input.val().length;\n      }\n\n      //渲染元素\n      function render(){\n        var num = getNum();\n\n        //没有字数的容器就新建一个\n        if ($('#J_input_count').length == 0) {\n          input.after('<span id=\"J_input_count\"></span>');\n        };\n\n        $('#J_input_count').html(num+'个字');\n      }\n\n      //监听事件\n      input.on('keyup',function(){\n        render();\n      });\n\n      //初始化，第一次渲染\n      render();\n\n\n    })\n  </script>\n</head>\n<body>\n<input type=\"text\" id=\"J_input\"/>\n</body>\n</html>\n\n\n```\n\n这段代码跑也是可以跑的，但是呢，各种变量混乱，没有很好的隔离作用域,当页面变的复杂的时候,会很难去维护。目前这种代码基本是用不了的。当然少数的活动页面可以简单用用。\n\n## 作用域隔离\n\n让我们对上面的代码作些改动，使用单个变量模拟命名空间。\n\n``` js\nvar textCount = {\n  input:null,\n  init:function(config){\n    this.input = $(config.id);\n    this.bind();\n    //这边范围对应的对象，可以实现链式调用\n    return this;\n  },\n  bind:function(){\n    var self = this;\n    this.input.on('keyup',function(){\n      self.render();\n    });\n  },\n  getNum:function(){\n    return this.input.val().length;\n  },\n  //渲染元素\n  render:function(){\n    var num = this.getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n  }\n}\n\n$(function() {\n  //在domready后调用\n  textCount.init({id:'#J_input'}).render();\n})\n\n\n```\n这样一改造，立马变的清晰了很多，所有的功能都在一个变量下面。代码更清晰，并且有统一的入口调用方法。\n\n但是还是有些瑕疵，这种写法没有私有的概念，比如上面的getNum,bind应该都是私有的方法。但是其他代码可以很随意的改动这些。当代码量特别特别多的时候，很容易出现变量重复，或被修改的问题。\n\n于是又出现了一种函数闭包的写法：\n\n\n``` js\nvar TextCount = (function(){\n  //私有方法，外面将访问不到\n  var _bind = function(that){\n    that.input.on('keyup',function(){\n      that.render();\n    });\n  }\n\n  var _getNum = function(that){\n    return that.input.val().length;\n  }\n\n  var TextCountFun = function(config){\n\n  }\n\n  TextCountFun.prototype.init = function(config) {\n    this.input = $(config.id);\n    _bind(this);\n\n    return this;\n  };\n\n  TextCountFun.prototype.render = function() {\n    var num = _getNum(this);\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n  };\n  //返回构造函数\n  return TextCountFun;\n\n})();\n\n$(function() {\n  new TextCount().init({id:'#J_input'}).render();\n})\n\n```\n这种写法，把所有的东西都包在了一个自动执行的闭包里面，所以不会受到外面的影响，并且只对外公开了TextCountFun构造函数，生成的对象只能访问到init,render方法。这种写法已经满足绝大多数的需求了。事实上大部分的jQuery插件都是这种写法。\n\n## 面向对象\n\n上面的写法已经可以满足绝大多数需求了。\n\n但是呢，当一个页面特别复杂，当我们需要的组件越来越多，当我们需要做一套组件。仅仅用这个就不行了。首先的问题就是，这种写法太灵活了，写单个组件还可以。如果我们需要做一套风格相近的组件，而且是多个人同时在写。那真的是噩梦。\n\n在编程的圈子里，面向对象一直是被认为最佳的编写代码方式。比如java，就是因为把面向对象发挥到了极致，所以多个人写出来的代码都很接近，维护也很方便。但是很不幸的是，javascript不支持class类的定义。但是我们可以模拟。\n\n下面我们先实现个简单的javascript类：\n\n```js\nvar Class = (function() {\n  var _mix = function(r, s) {\n    for (var p in s) {\n      if (s.hasOwnProperty(p)) {\n        r[p] = s[p]\n      }\n    }\n  }\n\n  var _extend = function() {\n\n    //开关 用来使生成原型时,不调用真正的构成流程init\n    this.initPrototype = true\n    var prototype = new this()\n    this.initPrototype = false\n\n    var items = Array.prototype.slice.call(arguments) || []\n    var item\n\n    //支持混入多个属性，并且支持{}也支持 Function\n    while (item = items.shift()) {\n      _mix(prototype, item.prototype || item)\n    }\n\n\n    // 这边是返回的类，其实就是我们返回的子类\n    function SubClass() {\n      if (!SubClass.initPrototype && this.init)\n        this.init.apply(this, arguments)//调用init真正的构造函数\n    }\n\n    // 赋值原型链，完成继承\n    SubClass.prototype = prototype\n\n    // 改变constructor引用\n    SubClass.prototype.constructor = SubClass\n\n    // 为子类也添加extend方法\n    SubClass.extend = _extend\n\n    return SubClass\n  }\n  //超级父类\n  var Class = function() {}\n  //为超级父类添加extend方法\n  Class.extend = _extend\n\n  return Class\n})()\n\n```\n这是拿John Resig的class简单修改了下。\n\n> 这边只是很简陋的实现了类的继承机制。如果对类的实现有兴趣可以参考我另一篇文章[javascript oo实现](http://purplebamboo.github.io/2014/07/13/javascript-oo-class/)\n\n我们看下使用方法：\n\n```js\n//继承超级父类，生成个子类Animal，并且混入一些方法。这些方法会到Animal的原型上。\n//另外这边不仅支持混入{}，还支持混入Function\nvar Animal = Class.extend({\n  init:function(opts){\n    this.msg = opts.msg\n    this.type = \"animal\"\n  },\n  say:function(){\n    alert(this.msg+\":i am a \"+this.type)\n  }\n})\n\n\n//继承Animal，并且混入一些方法\nvar Dog = Animal.extend({\n  init:function(opts){\n    //并未实现super方法，直接简单使用父类原型调用即可\n    Animal.prototype.init.call(this,opts)\n    //修改了type类型\n    this.type = \"dog\"\n  }\n})\n\n//new Animal({msg:'hello'}).say()\n\nnew Dog({msg:'hi'}).say()\n\n\n```\n使用很简单，超级父类具有extend方法，可以继承出一个子类。子类也具有extend方法。\n\n这边要强调的是，继承的父类都是一个也就是单继承。但是可以通过extend实现多重混入。详见下面用法。\n\n有了这个类的扩展，我们可以这么编写代码了：\n\n```js\n\nvar TextCount = Class.extend({\n  init:function(config){\n    this.input = $(config.id);\n    this._bind();\n    this.render();\n  },\n  render:function() {\n    var num = this._getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.input.after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n\n  },\n  _getNum:function(){\n    return this.input.val().length;\n  },\n  _bind:function(){\n    var self = this;\n    self.input.on('keyup',function(){\n      self.render();\n    });\n  }\n})\n\n$(function() {\n  new TextCount({\n    id:\"#J_input\"\n  });\n})\n\n\n```\n\n这边可能还没看见class的真正好处，不急我们继续往下。\n\n## 抽象出base\n\n可以看到，我们的组件有些方法，是大部分组件都会有的。\n\n* 比如init用来初始化属性。\n* 比如render用来处理渲染的逻辑。\n* 比如bind用来处理事件的绑定。\n\n当然这也是一种约定俗成的规范了。如果大家全部按照这种风格来写代码，开发大规模组件库就变得更加规范，相互之间配合也更容易。\n\n这个时候面向对象的好处就来了，我们抽象出一个Base类。其他组件编写时都继承它。\n\n```js\nvar Base = Class.extend({\n  init:function(config){\n    //自动保存配置项\n    this.__config = config\n    this.bind()\n    this.render()\n  },\n  //可以使用get来获取配置项\n  get:function(key){\n    return this.__config[key]\n  },\n  //可以使用set来设置配置项\n  set:function(key,value){\n    this.__config[key] = value\n  },\n  bind:function(){\n  },\n  render:function() {\n\n  },\n  //定义销毁的方法，一些收尾工作都应该在这里\n  destroy:function(){\n\n  }\n})\n\n```\n\nbase类主要把组件的一般性内容都提取了出来，这样我们编写组件时可以直接继承base类，覆盖里面的bind和render方法。\n\n于是我们可以这么写代码：\n\n```js\nvar TextCount = Base.extend({\n  _getNum:function(){\n    return this.get('input').val().length;\n  },\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      self.render();\n    });\n  },\n  render:function() {\n    var num = this._getNum();\n\n    if ($('#J_input_count').length == 0) {\n      this.get('input').after('<span id=\"J_input_count\"></span>');\n    };\n\n    $('#J_input_count').html(num+'个字');\n\n  }\n})\n\n$(function() {\n  new TextCount({\n  //这边直接传input的节点了，因为属性的赋值都是自动的。\n    input:$(\"#J_input\")\n  });\n})\n\n```\n可以看到我们直接实现一些固定的方法，bind，render就行了。其他的base会自动处理（这里只是简单处理了配置属性的赋值）。\n\n事实上，这边的init，bind，render就已经有了点生命周期的影子，但凡是组件都会具有这几个阶段，初始化，绑定事件，以及渲染。当然这边还可以加一个destroy销毁的方法，用来清理现场。\n\n此外为了方便，这边直接变成了传递input的节点。因为属性赋值自动化了，一般来说这种情况下都是使用getter，setter来处理。这边就不详细展开了。\n\n\n## 引入事件机制（观察者模式）\n\n有了base应该说我们编写组件更加的规范化，体系化了。下面我们继续深挖。\n\n\n还是上面的那个例子，如果我们希望输入字的时候超过5个字就弹出警告。该怎么办呢。\n\n小白可能会说，那简单啊直接改下bind方法：\n\n```js\nvar TextCount = Base.extend({\n  ...\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      if(self._getNum() > 5){\n        alert('超过了5个字了。。。')\n      }\n      self.render();\n    });\n  },\n  ...\n})\n\n\n```\n\n的确也是一种方法，但是太low了，代码严重耦合。当这种需求特别特别多，代码会越来越乱。\n\n这个时候就要引入事件机制，也就是经常说的观察者模式。\n\n> 注意这边的事件机制跟平时的浏览器那些事件不是一回事，要分开来看。\n\n什么是观察者模式呢，官方的解释就不说了，直接拿这个例子来说。\n\n想象一下base是个机器人会说话，他会一直监听输入的字数并且汇报出去（通知）。而你可以把耳朵凑上去，听着他的汇报（监听）。发现字数超过5个字了，你就做些操作。\n\n所以这分为两个部分，一个是通知，一个是监听。\n\n假设通知是 fire方法，监听是on。于是我们可以这么写代码：\n\n```js\nvar TextCount = Base.extend({\n  ...\n  bind:function(){\n    var self = this;\n    self.get('input').on('keyup',function(){\n      //通知,每当有输入的时候，就报告出去。\n      self.fire('Text.input',self._getNum())\n      self.render();\n    });\n  },\n  ...\n})\n\n$(function() {\n  var t = new TextCount({\n    input:$(\"#J_input\")\n  });\n  //监听这个输入事件\n  t.on('Text.input',function(num){\n    //可以获取到传递过来的值\n    if(num>5){\n       alert('超过了5个字了。。。')\n    }\n  })\n})\n\n```\n\nfire用来触发一个事件，可以传递数据。而on用来添加一个监听。这样组件里面只负责把一些关键的事件抛出来，至于具体的业务逻辑都可以添加监听来实现。没有事件的组件是不完整的。\n\n\n下面我们看看怎么实现这套事件机制。\n\n我们首先抛开base，想想怎么实现一个具有这套机制的类。\n\n```js\n\n//辅组函数，获取数组里某个元素的索引 index\nvar _indexOf = function(array,key){\n  if (array === null) return -1\n  var i = 0, length = array.length\n  for (; i < length; i++) if (array[i] === item) return i\n  return -1\n}\n\nvar Event = Class.extend({\n  //添加监听\n  on:function(key,listener){\n    //this.__events存储所有的处理函数\n    if (!this.__events) {\n      this.__events = {}\n    }\n    if (!this.__events[key]) {\n      this.__events[key] = []\n    }\n    if (_indexOf(this.__events,listener) === -1 && typeof listener === 'function') {\n      this.__events[key].push(listener)\n    }\n\n    return this\n  },\n  //触发一个事件，也就是通知\n  fire:function(key){\n\n    if (!this.__events || !this.__events[key]) return\n\n    var args = Array.prototype.slice.call(arguments, 1) || []\n\n    var listeners = this.__events[key]\n    var i = 0\n    var l = listeners.length\n\n    for (i; i < l; i++) {\n      listeners[i].apply(this,args)\n    }\n\n    return this\n  },\n  //取消监听\n  off:function(key,listener){\n\n    if (!key && !listener) {\n      this.__events = {}\n    }\n    //不传监听函数，就去掉当前key下面的所有的监听函数\n    if (key && !listener) {\n      delete this.__events[key]\n    }\n\n    if (key && listener) {\n      var listeners = this.__events[key]\n      var index = _indexOf(listeners, listener)\n\n      (index > -1) && listeners.splice(index, 1)\n    }\n\n    return this;\n  }\n})\n\n\nvar a = new Event()\n\n//添加监听 test事件\na.on('test',function(msg){\n  alert(msg)\n})\n\n//触发 test事件\na.fire('test','我是第一次触发')\na.fire('test','我又触发了')\n\na.off('test')\n\na.fire('test','你应该看不到我了')\n\n\n```\n实现起来并不复杂，只要使用this.__events存下所有的监听函数。在fire的时候去找到并且执行就行了。\n\n这个时候面向对象的好处就来了，如果我们希望base拥有事件机制。只需要这么写:\n\n```js\nvar Base = Class.extend(Event,{\n  ...\n  destroy:function(){\n    //去掉所有的事件监听\n    this.off()\n  }\n})\n//于是可以\n//var a  = new Base()\n// a.on(xxx,fn)\n//\n// a.fire()\n```\n是的只要extend的时候多混入一个Event，这样Base或者它的子类生成的对象都会自动具有事件机制。\n\n有了事件机制我们可以把组件内部很多状态暴露出来，比如我们可以在set方法中抛出一个事件，这样每次属性变更的时候我们都可以监听到。\n\n\n到这里为止，我们的base类已经像模像样了，具有了init，bind，render，destroy方法来表示组件的各个关键过程，并且具有了事件机制。基本上已经可以很好的来开发组件了。\n\n\n## 更进一步，richbase\n\n\n我们还可以继续深挖。看看我们的base，还差些什么。首先浏览器的事件监听还很落后，需要用户自己在bind里面绑定，再然后现在的TextCount里面还存在dom操作，也没有自己的模板机制。这都是需要扩展的，于是我们在base的基础上再继承出一个richbase用来实现更完备的组件基类。\n\n主要实现这些功能：\n\n* 事件代理：不需要用户自己去找dom元素绑定监听，也不需要用户去关心什么时候销毁。\n* 模板渲染：用户不需要覆盖render方法，而是覆盖实现setUp方法。可以通过在setUp里面调用render来达到渲染对应html的目的。\n* 单向绑定：通过setChuckdata方法，更新数据，同时会更新html内容，不再需要dom操作。\n\n\n我们看下我们实现richbase后怎么写组件：\n\n```js\nvar TextCount = RichBase.extend({\n  //事件直接在这里注册，会代理到parentNode节点，parentNode节点在下面指定\n  EVENTS:{\n    //选择器字符串，支持所有jQuery风格的选择器\n    'input':{\n      //注册keyup事件\n      keyup:function(self,e){\n        //单向绑定，修改数据直接更新对应模板\n        self.setChuckdata('count',self._getNum())\n\n      }\n    }\n  },\n  //指定当前组件的模板\n  template:'<span id=\"J_input_count\"><%= count %>个字</span>',\n  //私有方法\n  _getNum:function(){\n    return this.get('input').val().length || 0\n  },\n  //覆盖实现setUp方法，所有逻辑写在这里。最后可以使用render来决定需不需要渲染模板\n  //模板渲染后会append到parentNode节点下面，如果未指定，会append到document.body\n  setUp:function(){\n    var self = this;\n\n    var input = this.get('parentNode').find('#J_input')\n    self.set('input',input)\n\n    var num = this._getNum()\n    //赋值数据，渲染模板，选用。有的组件没有对应的模板就可以不调用这步。\n    self.render({\n      count:num\n    })\n\n  }\n})\n\n$(function() {\n  //传入parentNode节点，组件会挂载到这个节点上。所有事件都会代理到这个上面。\n  new TextCount({\n    parentNode:$(\"#J_test_container\")\n  });\n})\n\n/**对应的html,做了些修改，主要为了加上parentNode，这边就是J_test_container\n\n<div id=\"J_test_container\">\n  <input type=\"text\" id=\"J_input\"/>\n</div>\n\n*/\n\n\n```\n\n看下上面的用法，可以看到变得更简单清晰了：\n\n* 事件不需要自己绑定，直接注册在EVENTS属性上。程序会自动将事件代理到parentNode上。\n* 引入了模板机制，使用template规定组件的模板，然后在setUp里面使用render(data)的方式渲染模板，程序会自动帮你append到parentNode下面。\n* 单向绑定，无需操作dom，后面要改动内容，不需要操作dom，只需要调用setChuckdata(key,新的值)，选择性的更新某个数据，相应的html会自动重新渲染。\n\n\n\n\n下面我们看下richebase的实现：\n\n```js\n\nvar RichBase = Base.extend({\n  EVENTS:{},\n  template:'',\n  init:function(config){\n    //存储配置项\n    this.__config = config\n    //解析代理事件\n    this._delegateEvent()\n    this.setUp()\n  },\n  //循环遍历EVENTS，使用jQuery的delegate代理到parentNode\n  _delegateEvent:function(){\n    var self = this\n    var events = this.EVENTS || {}\n    var eventObjs,fn,select,type\n    var parentNode = this.get('parentNode') || $(document.body)\n\n    for (select in events) {\n      eventObjs = events[select]\n\n      for (type in eventObjs) {\n        fn = eventObjs[type]\n\n        parentNode.delegate(select,type,function(e){\n          fn.call(null,self,e)\n        })\n      }\n\n    }\n\n  },\n  //支持underscore的极简模板语法\n  //用来渲染模板，这边是抄的underscore的。非常简单的模板引擎，支持原生的js语法\n  _parseTemplate:function(str,data){\n    /**\n     * http://ejohn.org/blog/javascript-micro-templating/\n     * https://github.com/jashkenas/underscore/blob/0.1.0/underscore.js#L399\n     */\n    var fn = new Function('obj',\n        'var p=[],print=function(){p.push.apply(p,arguments);};' +\n        'with(obj){p.push(\\'' + str\n            .replace(/[\\r\\t\\n]/g, \" \")\n            .split(\"<%\").join(\"\\t\")\n            .replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n            .replace(/\\t=(.*?)%>/g, \"',$1,'\")\n            .split(\"\\t\").join(\"');\")\n            .split(\"%>\").join(\"p.push('\")\n            .split(\"\\r\").join(\"\\\\'\") +\n        \"');}return p.join('');\")\n    return data ? fn(data) : fn\n  },\n  //提供给子类覆盖实现\n  setUp:function(){\n    this.render()\n  },\n  //用来实现刷新，只需要传入之前render时的数据里的key还有更新值，就可以自动刷新模板\n  setChuckdata:function(key,value){\n    var self = this\n    var data = self.get('__renderData')\n\n    //更新对应的值\n    data[key] = value\n\n    if (!this.template) return;\n    //重新渲染\n    var newHtmlNode = $(self._parseTemplate(this.template,data))\n    //拿到存储的渲染后的节点\n    var currentNode = self.get('__currentNode')\n    if (!currentNode) return;\n    //替换内容\n    currentNode.replaceWith(newHtmlNode)\n\n    self.set('__currentNode',newHtmlNode)\n\n  },\n  //使用data来渲染模板并且append到parentNode下面\n  render:function(data){\n    var self = this\n    //先存储起来渲染的data,方便后面setChuckdata获取使用\n    self.set('__renderData',data)\n\n    if (!this.template) return;\n\n    //使用_parseTemplate解析渲染模板生成html\n    //子类可以覆盖这个方法使用其他的模板引擎解析\n    var html = self._parseTemplate(this.template,data)\n\n    var parentNode = this.get('parentNode') || $(document.body)\n\n    var currentNode = $(html)\n    //保存下来留待后面的区域刷新\n    //存储起来，方便后面setChuckdata获取使用\n    self.set('__currentNode',currentNode)\n    parentNode.append(currentNode)\n  },\n  destroy:function(){\n\n    var self = this\n    //去掉自身的事件监听\n    self.off()\n    //删除渲染好的dom节点\n    self.get('__currentNode').remove()\n    //去掉绑定的代理事件\n    var events = self.EVENTS || {}\n    var eventObjs,fn,select,type\n    var parentNode = self.get('parentNode')\n\n    for (select in events) {\n      eventObjs = events[select]\n\n      for (type in eventObjs) {\n        fn = eventObjs[type]\n\n        parentNode.undelegate(select,type,fn)\n      }\n\n    }\n\n  }\n})\n\n\n```\n\n主要做了两件事，一个就是事件的解析跟代理，全部代理到parentNode上面。另外就是把render抽出来，用户只需要实现setUp方法。如果需要模板支持就在setUp里面调用render来渲染模板，并且可以通过setChuckdata来刷新模板，实现单向绑定。\n\n\n\n\n## 结语\n\n有了richbase，基本上组件开发就没啥问题了。但是我们还是可以继续深挖下去。\n\n比如组件自动化加载渲染，局部刷新，比如父子组件的嵌套，再比如双向绑定，再比如实现ng-click这种风格的事件机制。\n\n当然这些东西已经不属于组件里面的内容了。再进一步其实已经是一个框架了。实际上最近比较流行的react，ploymer还有我们的brix等等都是实现了这套东西。受限于篇幅，这个以后有空再写篇文章详细分析下。\n\n\n>这是一个github上的相关demo\n\n转载地址:https://github.com/purplebamboo/demo-richbase\n请点[这里](https://github.com/purplebamboo/demo-richbase)。\n\n\n\n\n","slug":"javascript-code","published":1,"updated":"2016-12-12T01:06:25.814Z","comments":1,"photos":[],"link":"","_id":"cj4sal68z000dek5b8x91r7m0","content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序员，最终的目的，都是把产品或代码封装到一起，提供接口，让使用者很舒适的实现功能。所以对于我来说，</div><div class=\"line\">往往头疼的不是写代码，而是写注释和文档！如果接口很乱，肯定会头疼一整天。</div></pre></td></tr></table></figure>\n<p>用来演示怎么使用richbase来制作组件的例子</p>\n<p>作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。</p>\n<p>下面我们来谈谈，在现有的知识体系下，如何很好的写组件。</p>\n<p>比如我们要实现这样一个组件，就是一个输入框里面字数的计数。这个应该是个很简单的需求。</p>\n<p><img src=\"http://gtms03.alicdn.com/tps/i3/TB1QTOaHXXXXXbkaXXX0TQoKFXX-261-61.gif\" alt=\"图片\"></p>\n<p>我们来看看，下面的各种写法。</p>\n<blockquote>\n<p>为了更清楚的演示，下面全部使用jQuery作为基础语言库。</p>\n</blockquote>\n<h2 id=\"最简陋的写法\"><a href=\"#最简陋的写法\" class=\"headerlink\" title=\"最简陋的写法\"></a>最简陋的写法</h2><p>嗯 所谓的入门级写法呢，就是完完全全的全局函数全局变量的写法。（就我所知，现在好多外包还是这种写法）</p>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://code.jquery.com/jquery-1.9.1.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> input = $(<span class=\"string\">'#J_input'</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//用来获取字数</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> input.val().length;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//渲染元素</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = getNum();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//没有字数的容器就新建一个</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//监听事件</span></div><div class=\"line\">      input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        render();</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//初始化，第一次渲染</span></div><div class=\"line\">      render();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_input\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这段代码跑也是可以跑的，但是呢，各种变量混乱，没有很好的隔离作用域,当页面变的复杂的时候,会很难去维护。目前这种代码基本是用不了的。当然少数的活动页面可以简单用用。</p>\n<h2 id=\"作用域隔离\"><a href=\"#作用域隔离\" class=\"headerlink\" title=\"作用域隔离\"></a>作用域隔离</h2><p>让我们对上面的代码作些改动，使用单个变量模拟命名空间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> textCount = &#123;</div><div class=\"line\">  <span class=\"attr\">input</span>:<span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    <span class=\"keyword\">this</span>.bind();</div><div class=\"line\">    <span class=\"comment\">//这边范围对应的对象，可以实现链式调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.input.val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//渲染元素</span></div><div class=\"line\">  render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//在domready后调用</span></div><div class=\"line\">  textCount.init(&#123;<span class=\"attr\">id</span>:<span class=\"string\">'#J_input'</span>&#125;).render();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样一改造，立马变的清晰了很多，所有的功能都在一个变量下面。代码更清晰，并且有统一的入口调用方法。</p>\n<p>但是还是有些瑕疵，这种写法没有私有的概念，比如上面的getNum,bind应该都是私有的方法。但是其他代码可以很随意的改动这些。当代码量特别特别多的时候，很容易出现变量重复，或被修改的问题。</p>\n<p>于是又出现了一种函数闭包的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//私有方法，外面将访问不到</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>)</span>&#123;</div><div class=\"line\">    that.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      that.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> that.input.val().length;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> TextCountFun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  TextCountFun.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    _bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  TextCountFun.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = _getNum(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//返回构造函数</span></div><div class=\"line\">  <span class=\"keyword\">return</span> TextCountFun;</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount().init(&#123;<span class=\"attr\">id</span>:<span class=\"string\">'#J_input'</span>&#125;).render();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这种写法，把所有的东西都包在了一个自动执行的闭包里面，所以不会受到外面的影响，并且只对外公开了TextCountFun构造函数，生成的对象只能访问到init,render方法。这种写法已经满足绝大多数的需求了。事实上大部分的jQuery插件都是这种写法。</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>上面的写法已经可以满足绝大多数需求了。</p>\n<p>但是呢，当一个页面特别复杂，当我们需要的组件越来越多，当我们需要做一套组件。仅仅用这个就不行了。首先的问题就是，这种写法太灵活了，写单个组件还可以。如果我们需要做一套风格相近的组件，而且是多个人同时在写。那真的是噩梦。</p>\n<p>在编程的圈子里，面向对象一直是被认为最佳的编写代码方式。比如java，就是因为把面向对象发挥到了极致，所以多个人写出来的代码都很接近，维护也很方便。但是很不幸的是，javascript不支持class类的定义。但是我们可以模拟。</p>\n<p>下面我们先实现个简单的javascript类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _mix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r, s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> s) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (s.hasOwnProperty(p)) &#123;</div><div class=\"line\">        r[p] = s[p]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开关 用来使生成原型时,不调用真正的构成流程init</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.initPrototype = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">var</span> prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>()</div><div class=\"line\">    <span class=\"keyword\">this</span>.initPrototype = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> items = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>) || []</div><div class=\"line\">    <span class=\"keyword\">var</span> item</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//支持混入多个属性，并且支持&#123;&#125;也支持 Function</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (item = items.shift()) &#123;</div><div class=\"line\">      _mix(prototype, item.prototype || item)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这边是返回的类，其实就是我们返回的子类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!SubClass.initPrototype &amp;&amp; <span class=\"keyword\">this</span>.init)</div><div class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)<span class=\"comment\">//调用init真正的构造函数</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 赋值原型链，完成继承</span></div><div class=\"line\">    SubClass.prototype = prototype</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 改变constructor引用</span></div><div class=\"line\">    SubClass.prototype.constructor = SubClass</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 为子类也添加extend方法</span></div><div class=\"line\">    SubClass.extend = _extend</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> SubClass</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//超级父类</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Class = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">  <span class=\"comment\">//为超级父类添加extend方法</span></div><div class=\"line\">  Class.extend = _extend</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Class</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>这是拿John Resig的class简单修改了下。</p>\n<blockquote>\n<p>这边只是很简陋的实现了类的继承机制。如果对类的实现有兴趣可以参考我另一篇文章<a href=\"http://purplebamboo.github.io/2014/07/13/javascript-oo-class/\" target=\"_blank\" rel=\"external\">javascript oo实现</a></p>\n</blockquote>\n<p>我们看下使用方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//继承超级父类，生成个子类Animal，并且混入一些方法。这些方法会到Animal的原型上。</span></div><div class=\"line\"><span class=\"comment\">//另外这边不仅支持混入&#123;&#125;，还支持混入Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.msg = opts.msg</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">\"animal\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">say</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.msg+<span class=\"string\">\":i am a \"</span>+<span class=\"keyword\">this</span>.type)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//继承Animal，并且混入一些方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//并未实现super方法，直接简单使用父类原型调用即可</span></div><div class=\"line\">    Animal.prototype.init.call(<span class=\"keyword\">this</span>,opts)</div><div class=\"line\">    <span class=\"comment\">//修改了type类型</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">\"dog\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//new Animal(&#123;msg:'hello'&#125;).say()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Dog(&#123;<span class=\"attr\">msg</span>:<span class=\"string\">'hi'</span>&#125;).say()</div></pre></td></tr></table></figure>\n<p>使用很简单，超级父类具有extend方法，可以继承出一个子类。子类也具有extend方法。</p>\n<p>这边要强调的是，继承的父类都是一个也就是单继承。但是可以通过extend实现多重混入。详见下面用法。</p>\n<p>有了这个类的扩展，我们可以这么编写代码了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    <span class=\"keyword\">this</span>._bind();</div><div class=\"line\">    <span class=\"keyword\">this</span>.render();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">_getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.input.val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">_bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">\"#J_input\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这边可能还没看见class的真正好处，不急我们继续往下。</p>\n<h2 id=\"抽象出base\"><a href=\"#抽象出base\" class=\"headerlink\" title=\"抽象出base\"></a>抽象出base</h2><p>可以看到，我们的组件有些方法，是大部分组件都会有的。</p>\n<ul>\n<li>比如init用来初始化属性。</li>\n<li>比如render用来处理渲染的逻辑。</li>\n<li>比如bind用来处理事件的绑定。</li>\n</ul>\n<p>当然这也是一种约定俗成的规范了。如果大家全部按照这种风格来写代码，开发大规模组件库就变得更加规范，相互之间配合也更容易。</p>\n<p>这个时候面向对象的好处就来了，我们抽象出一个Base类。其他组件编写时都继承它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Base = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自动保存配置项</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.__config = config</div><div class=\"line\">    <span class=\"keyword\">this</span>.bind()</div><div class=\"line\">    <span class=\"keyword\">this</span>.render()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//可以使用get来获取配置项</span></div><div class=\"line\">  get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__config[key]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//可以使用set来设置配置项</span></div><div class=\"line\">  set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.__config[key] = value</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//定义销毁的方法，一些收尾工作都应该在这里</span></div><div class=\"line\">  destroy:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>base类主要把组件的一般性内容都提取了出来，这样我们编写组件时可以直接继承base类，覆盖里面的bind和render方法。</p>\n<p>于是我们可以这么写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">  <span class=\"comment\">//这边直接传input的节点了，因为属性的赋值都是自动的。</span></div><div class=\"line\">    input:$(<span class=\"string\">\"#J_input\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>可以看到我们直接实现一些固定的方法，bind，render就行了。其他的base会自动处理（这里只是简单处理了配置属性的赋值）。</p>\n<p>事实上，这边的init，bind，render就已经有了点生命周期的影子，但凡是组件都会具有这几个阶段，初始化，绑定事件，以及渲染。当然这边还可以加一个destroy销毁的方法，用来清理现场。</p>\n<p>此外为了方便，这边直接变成了传递input的节点。因为属性赋值自动化了，一般来说这种情况下都是使用getter，setter来处理。这边就不详细展开了。</p>\n<h2 id=\"引入事件机制（观察者模式）\"><a href=\"#引入事件机制（观察者模式）\" class=\"headerlink\" title=\"引入事件机制（观察者模式）\"></a>引入事件机制（观察者模式）</h2><p>有了base应该说我们编写组件更加的规范化，体系化了。下面我们继续深挖。</p>\n<p>还是上面的那个例子，如果我们希望输入字的时候超过5个字就弹出警告。该怎么办呢。</p>\n<p>小白可能会说，那简单啊直接改下bind方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  bind:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(self._getNum() &gt; <span class=\"number\">5</span>)&#123;</div><div class=\"line\">        alert(<span class=\"string\">'超过了5个字了。。。'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>的确也是一种方法，但是太low了，代码严重耦合。当这种需求特别特别多，代码会越来越乱。</p>\n<p>这个时候就要引入事件机制，也就是经常说的观察者模式。</p>\n<blockquote>\n<p>注意这边的事件机制跟平时的浏览器那些事件不是一回事，要分开来看。</p>\n</blockquote>\n<p>什么是观察者模式呢，官方的解释就不说了，直接拿这个例子来说。</p>\n<p>想象一下base是个机器人会说话，他会一直监听输入的字数并且汇报出去（通知）。而你可以把耳朵凑上去，听着他的汇报（监听）。发现字数超过5个字了，你就做些操作。</p>\n<p>所以这分为两个部分，一个是通知，一个是监听。</p>\n<p>假设通知是 fire方法，监听是on。于是我们可以这么写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  bind:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//通知,每当有输入的时候，就报告出去。</span></div><div class=\"line\">      self.fire(<span class=\"string\">'Text.input'</span>,self._getNum())</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">input</span>:$(<span class=\"string\">\"#J_input\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//监听这个输入事件</span></div><div class=\"line\">  t.on(<span class=\"string\">'Text.input'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可以获取到传递过来的值</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">       alert(<span class=\"string\">'超过了5个字了。。。'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>fire用来触发一个事件，可以传递数据。而on用来添加一个监听。这样组件里面只负责把一些关键的事件抛出来，至于具体的业务逻辑都可以添加监听来实现。没有事件的组件是不完整的。</p>\n<p>下面我们看看怎么实现这套事件机制。</p>\n<p>我们首先抛开base，想想怎么实现一个具有这套机制的类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//辅组函数，获取数组里某个元素的索引 index</span></div><div class=\"line\"><span class=\"keyword\">var</span> _indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array,key</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Event = Class.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">//添加监听</span></div><div class=\"line\">  on:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,listener</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//this.__events存储所有的处理函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events = &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events[key]) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events[key] = []</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_indexOf(<span class=\"keyword\">this</span>.__events,listener) === <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">typeof</span> listener === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events[key].push(listener)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//触发一个事件，也就是通知</span></div><div class=\"line\">  fire:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events || !<span class=\"keyword\">this</span>.__events[key]) <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>) || []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> l = listeners.length</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i; i &lt; l; i++) &#123;</div><div class=\"line\">      listeners[i].apply(<span class=\"keyword\">this</span>,args)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//取消监听</span></div><div class=\"line\">  off:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,listener</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!key &amp;&amp; !listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events = &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//不传监听函数，就去掉当前key下面的所有的监听函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (key &amp;&amp; !listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (key &amp;&amp; listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">      <span class=\"keyword\">var</span> index = _indexOf(listeners, listener)</div><div class=\"line\"></div><div class=\"line\">      (index &gt; <span class=\"number\">-1</span>) &amp;&amp; listeners.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Event()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加监听 test事件</span></div><div class=\"line\">a.on(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">  alert(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//触发 test事件</span></div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'我是第一次触发'</span>)</div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'我又触发了'</span>)</div><div class=\"line\"></div><div class=\"line\">a.off(<span class=\"string\">'test'</span>)</div><div class=\"line\"></div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'你应该看不到我了'</span>)</div></pre></td></tr></table></figure>\n<p>实现起来并不复杂，只要使用this.__events存下所有的监听函数。在fire的时候去找到并且执行就行了。</p>\n<p>这个时候面向对象的好处就来了，如果我们希望base拥有事件机制。只需要这么写:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Base = Class.extend(Event,&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  destroy:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//去掉所有的事件监听</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.off()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//于是可以</span></div><div class=\"line\"><span class=\"comment\">//var a  = new Base()</span></div><div class=\"line\"><span class=\"comment\">// a.on(xxx,fn)</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// a.fire()</span></div></pre></td></tr></table></figure>\n<p>是的只要extend的时候多混入一个Event，这样Base或者它的子类生成的对象都会自动具有事件机制。</p>\n<p>有了事件机制我们可以把组件内部很多状态暴露出来，比如我们可以在set方法中抛出一个事件，这样每次属性变更的时候我们都可以监听到。</p>\n<p>到这里为止，我们的base类已经像模像样了，具有了init，bind，render，destroy方法来表示组件的各个关键过程，并且具有了事件机制。基本上已经可以很好的来开发组件了。</p>\n<h2 id=\"更进一步，richbase\"><a href=\"#更进一步，richbase\" class=\"headerlink\" title=\"更进一步，richbase\"></a>更进一步，richbase</h2><p>我们还可以继续深挖。看看我们的base，还差些什么。首先浏览器的事件监听还很落后，需要用户自己在bind里面绑定，再然后现在的TextCount里面还存在dom操作，也没有自己的模板机制。这都是需要扩展的，于是我们在base的基础上再继承出一个richbase用来实现更完备的组件基类。</p>\n<p>主要实现这些功能：</p>\n<ul>\n<li>事件代理：不需要用户自己去找dom元素绑定监听，也不需要用户去关心什么时候销毁。</li>\n<li>模板渲染：用户不需要覆盖render方法，而是覆盖实现setUp方法。可以通过在setUp里面调用render来达到渲染对应html的目的。</li>\n<li>单向绑定：通过setChuckdata方法，更新数据，同时会更新html内容，不再需要dom操作。</li>\n</ul>\n<p>我们看下我们实现richbase后怎么写组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = RichBase.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">//事件直接在这里注册，会代理到parentNode节点，parentNode节点在下面指定</span></div><div class=\"line\">  EVENTS:&#123;</div><div class=\"line\">    <span class=\"comment\">//选择器字符串，支持所有jQuery风格的选择器</span></div><div class=\"line\">    <span class=\"string\">'input'</span>:&#123;</div><div class=\"line\">      <span class=\"comment\">//注册keyup事件</span></div><div class=\"line\">      keyup:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self,e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//单向绑定，修改数据直接更新对应模板</span></div><div class=\"line\">        self.setChuckdata(<span class=\"string\">'count'</span>,self._getNum())</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//指定当前组件的模板</span></div><div class=\"line\">  template:<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;%= count %&gt;个字&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"comment\">//私有方法</span></div><div class=\"line\">  _getNum:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).val().length || <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//覆盖实现setUp方法，所有逻辑写在这里。最后可以使用render来决定需不需要渲染模板</span></div><div class=\"line\">  <span class=\"comment\">//模板渲染后会append到parentNode节点下面，如果未指定，会append到document.body</span></div><div class=\"line\">  setUp:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>).find(<span class=\"string\">'#J_input'</span>)</div><div class=\"line\">    self.set(<span class=\"string\">'input'</span>,input)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum()</div><div class=\"line\">    <span class=\"comment\">//赋值数据，渲染模板，选用。有的组件没有对应的模板就可以不调用这步。</span></div><div class=\"line\">    self.render(&#123;</div><div class=\"line\">      <span class=\"attr\">count</span>:num</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//传入parentNode节点，组件会挂载到这个节点上。所有事件都会代理到这个上面。</span></div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">parentNode</span>:$(<span class=\"string\">\"#J_test_container\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**对应的html,做了些修改，主要为了加上parentNode，这边就是J_test_container</span></div><div class=\"line\"></div><div class=\"line\">&lt;div id=\"J_test_container\"&gt;</div><div class=\"line\">  &lt;input type=\"text\" id=\"J_input\"/&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>看下上面的用法，可以看到变得更简单清晰了：</p>\n<ul>\n<li>事件不需要自己绑定，直接注册在EVENTS属性上。程序会自动将事件代理到parentNode上。</li>\n<li>引入了模板机制，使用template规定组件的模板，然后在setUp里面使用render(data)的方式渲染模板，程序会自动帮你append到parentNode下面。</li>\n<li>单向绑定，无需操作dom，后面要改动内容，不需要操作dom，只需要调用setChuckdata(key,新的值)，选择性的更新某个数据，相应的html会自动重新渲染。</li>\n</ul>\n<p>下面我们看下richebase的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> RichBase = Base.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">EVENTS</span>:&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">template</span>:<span class=\"string\">''</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//存储配置项</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.__config = config</div><div class=\"line\">    <span class=\"comment\">//解析代理事件</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._delegateEvent()</div><div class=\"line\">    <span class=\"keyword\">this</span>.setUp()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//循环遍历EVENTS，使用jQuery的delegate代理到parentNode</span></div><div class=\"line\">  _delegateEvent:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">var</span> events = <span class=\"keyword\">this</span>.EVENTS || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> eventObjs,fn,select,type</div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>) || $(<span class=\"built_in\">document</span>.body)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (select <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">      eventObjs = events[select]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (type <span class=\"keyword\">in</span> eventObjs) &#123;</div><div class=\"line\">        fn = eventObjs[type]</div><div class=\"line\"></div><div class=\"line\">        parentNode.delegate(select,type,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">          fn.call(<span class=\"literal\">null</span>,self,e)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//支持underscore的极简模板语法</span></div><div class=\"line\">  <span class=\"comment\">//用来渲染模板，这边是抄的underscore的。非常简单的模板引擎，支持原生的js语法</span></div><div class=\"line\">  _parseTemplate:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str,data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * http://ejohn.org/blog/javascript-micro-templating/</div><div class=\"line\">     * https://github.com/jashkenas/underscore/blob/0.1.0/underscore.js#L399</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>,</div><div class=\"line\">        <span class=\"string\">'var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;'</span> +</div><div class=\"line\">        <span class=\"string\">'with(obj)&#123;p.push(\\''</span> + str</div><div class=\"line\">            .replace(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">\" \"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"&lt;%\"</span>).join(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">            .replace(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)'/g</span>, <span class=\"string\">\"$1\\r\"</span>)</div><div class=\"line\">            .replace(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">\"',$1,'\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"\\t\"</span>).join(<span class=\"string\">\"');\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"%&gt;\"</span>).join(<span class=\"string\">\"p.push('\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"\\r\"</span>).join(<span class=\"string\">\"\\\\'\"</span>) +</div><div class=\"line\">        <span class=\"string\">\"');&#125;return p.join('');\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> data ? fn(data) : fn</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//提供给子类覆盖实现</span></div><div class=\"line\">  setUp:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.render()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//用来实现刷新，只需要传入之前render时的数据里的key还有更新值，就可以自动刷新模板</span></div><div class=\"line\">  setChuckdata:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = self.get(<span class=\"string\">'__renderData'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//更新对应的值</span></div><div class=\"line\">    data[key] = value</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.template) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"comment\">//重新渲染</span></div><div class=\"line\">    <span class=\"keyword\">var</span> newHtmlNode = $(self._parseTemplate(<span class=\"keyword\">this</span>.template,data))</div><div class=\"line\">    <span class=\"comment\">//拿到存储的渲染后的节点</span></div><div class=\"line\">    <span class=\"keyword\">var</span> currentNode = self.get(<span class=\"string\">'__currentNode'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentNode) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"comment\">//替换内容</span></div><div class=\"line\">    currentNode.replaceWith(newHtmlNode)</div><div class=\"line\"></div><div class=\"line\">    self.set(<span class=\"string\">'__currentNode'</span>,newHtmlNode)</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//使用data来渲染模板并且append到parentNode下面</span></div><div class=\"line\">  render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">//先存储起来渲染的data,方便后面setChuckdata获取使用</span></div><div class=\"line\">    self.set(<span class=\"string\">'__renderData'</span>,data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.template) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//使用_parseTemplate解析渲染模板生成html</span></div><div class=\"line\">    <span class=\"comment\">//子类可以覆盖这个方法使用其他的模板引擎解析</span></div><div class=\"line\">    <span class=\"keyword\">var</span> html = self._parseTemplate(<span class=\"keyword\">this</span>.template,data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>) || $(<span class=\"built_in\">document</span>.body)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> currentNode = $(html)</div><div class=\"line\">    <span class=\"comment\">//保存下来留待后面的区域刷新</span></div><div class=\"line\">    <span class=\"comment\">//存储起来，方便后面setChuckdata获取使用</span></div><div class=\"line\">    self.set(<span class=\"string\">'__currentNode'</span>,currentNode)</div><div class=\"line\">    parentNode.append(currentNode)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">destroy</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">//去掉自身的事件监听</span></div><div class=\"line\">    self.off()</div><div class=\"line\">    <span class=\"comment\">//删除渲染好的dom节点</span></div><div class=\"line\">    self.get(<span class=\"string\">'__currentNode'</span>).remove()</div><div class=\"line\">    <span class=\"comment\">//去掉绑定的代理事件</span></div><div class=\"line\">    <span class=\"keyword\">var</span> events = self.EVENTS || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> eventObjs,fn,select,type</div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = self.get(<span class=\"string\">'parentNode'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (select <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">      eventObjs = events[select]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (type <span class=\"keyword\">in</span> eventObjs) &#123;</div><div class=\"line\">        fn = eventObjs[type]</div><div class=\"line\"></div><div class=\"line\">        parentNode.undelegate(select,type,fn)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>主要做了两件事，一个就是事件的解析跟代理，全部代理到parentNode上面。另外就是把render抽出来，用户只需要实现setUp方法。如果需要模板支持就在setUp里面调用render来渲染模板，并且可以通过setChuckdata来刷新模板，实现单向绑定。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>有了richbase，基本上组件开发就没啥问题了。但是我们还是可以继续深挖下去。</p>\n<p>比如组件自动化加载渲染，局部刷新，比如父子组件的嵌套，再比如双向绑定，再比如实现ng-click这种风格的事件机制。</p>\n<p>当然这些东西已经不属于组件里面的内容了。再进一步其实已经是一个框架了。实际上最近比较流行的react，ploymer还有我们的brix等等都是实现了这套东西。受限于篇幅，这个以后有空再写篇文章详细分析下。</p>\n<blockquote>\n<p>这是一个github上的相关demo</p>\n</blockquote>\n<p>转载地址:<a href=\"https://github.com/purplebamboo/demo-richbase\" target=\"_blank\" rel=\"external\">https://github.com/purplebamboo/demo-richbase</a><br>请点<a href=\"https://github.com/purplebamboo/demo-richbase\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n","excerpt":"","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序员，最终的目的，都是把产品或代码封装到一起，提供接口，让使用者很舒适的实现功能。所以对于我来说，</div><div class=\"line\">往往头疼的不是写代码，而是写注释和文档！如果接口很乱，肯定会头疼一整天。</div></pre></td></tr></table></figure>\n<p>用来演示怎么使用richbase来制作组件的例子</p>\n<p>作为一名前端工程师，写组件的能力至关重要。虽然javascript经常被人嘲笑是个小玩具，但是在一代代大牛的前仆后继的努力下，渐渐的也摸索了一套组件的编写方式。</p>\n<p>下面我们来谈谈，在现有的知识体系下，如何很好的写组件。</p>\n<p>比如我们要实现这样一个组件，就是一个输入框里面字数的计数。这个应该是个很简单的需求。</p>\n<p><img src=\"http://gtms03.alicdn.com/tps/i3/TB1QTOaHXXXXXbkaXXX0TQoKFXX-261-61.gif\" alt=\"图片\"></p>\n<p>我们来看看，下面的各种写法。</p>\n<blockquote>\n<p>为了更清楚的演示，下面全部使用jQuery作为基础语言库。</p>\n</blockquote>\n<h2 id=\"最简陋的写法\"><a href=\"#最简陋的写法\" class=\"headerlink\" title=\"最简陋的写法\"></a>最简陋的写法</h2><p>嗯 所谓的入门级写法呢，就是完完全全的全局函数全局变量的写法。（就我所知，现在好多外包还是这种写法）</p>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://code.jquery.com/jquery-1.9.1.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> input = $(<span class=\"string\">'#J_input'</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//用来获取字数</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> input.val().length;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//渲染元素</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = getNum();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//没有字数的容器就新建一个</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//监听事件</span></div><div class=\"line\">      input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        render();</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//初始化，第一次渲染</span></div><div class=\"line\">      render();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"J_input\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这段代码跑也是可以跑的，但是呢，各种变量混乱，没有很好的隔离作用域,当页面变的复杂的时候,会很难去维护。目前这种代码基本是用不了的。当然少数的活动页面可以简单用用。</p>\n<h2 id=\"作用域隔离\"><a href=\"#作用域隔离\" class=\"headerlink\" title=\"作用域隔离\"></a>作用域隔离</h2><p>让我们对上面的代码作些改动，使用单个变量模拟命名空间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> textCount = &#123;</div><div class=\"line\">  <span class=\"attr\">input</span>:<span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    <span class=\"keyword\">this</span>.bind();</div><div class=\"line\">    <span class=\"comment\">//这边范围对应的对象，可以实现链式调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.input.val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//渲染元素</span></div><div class=\"line\">  render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>.getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//在domready后调用</span></div><div class=\"line\">  textCount.init(&#123;<span class=\"attr\">id</span>:<span class=\"string\">'#J_input'</span>&#125;).render();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样一改造，立马变的清晰了很多，所有的功能都在一个变量下面。代码更清晰，并且有统一的入口调用方法。</p>\n<p>但是还是有些瑕疵，这种写法没有私有的概念，比如上面的getNum,bind应该都是私有的方法。但是其他代码可以很随意的改动这些。当代码量特别特别多的时候，很容易出现变量重复，或被修改的问题。</p>\n<p>于是又出现了一种函数闭包的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//私有方法，外面将访问不到</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>)</span>&#123;</div><div class=\"line\">    that.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      that.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _getNum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">that</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> that.input.val().length;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> TextCountFun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  TextCountFun.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    _bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  TextCountFun.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = _getNum(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//返回构造函数</span></div><div class=\"line\">  <span class=\"keyword\">return</span> TextCountFun;</div><div class=\"line\"></div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount().init(&#123;<span class=\"attr\">id</span>:<span class=\"string\">'#J_input'</span>&#125;).render();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这种写法，把所有的东西都包在了一个自动执行的闭包里面，所以不会受到外面的影响，并且只对外公开了TextCountFun构造函数，生成的对象只能访问到init,render方法。这种写法已经满足绝大多数的需求了。事实上大部分的jQuery插件都是这种写法。</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>上面的写法已经可以满足绝大多数需求了。</p>\n<p>但是呢，当一个页面特别复杂，当我们需要的组件越来越多，当我们需要做一套组件。仅仅用这个就不行了。首先的问题就是，这种写法太灵活了，写单个组件还可以。如果我们需要做一套风格相近的组件，而且是多个人同时在写。那真的是噩梦。</p>\n<p>在编程的圈子里，面向对象一直是被认为最佳的编写代码方式。比如java，就是因为把面向对象发挥到了极致，所以多个人写出来的代码都很接近，维护也很方便。但是很不幸的是，javascript不支持class类的定义。但是我们可以模拟。</p>\n<p>下面我们先实现个简单的javascript类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> _mix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">r, s</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> s) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (s.hasOwnProperty(p)) &#123;</div><div class=\"line\">        r[p] = s[p]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//开关 用来使生成原型时,不调用真正的构成流程init</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.initPrototype = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">var</span> prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>()</div><div class=\"line\">    <span class=\"keyword\">this</span>.initPrototype = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> items = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>) || []</div><div class=\"line\">    <span class=\"keyword\">var</span> item</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//支持混入多个属性，并且支持&#123;&#125;也支持 Function</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (item = items.shift()) &#123;</div><div class=\"line\">      _mix(prototype, item.prototype || item)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 这边是返回的类，其实就是我们返回的子类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!SubClass.initPrototype &amp;&amp; <span class=\"keyword\">this</span>.init)</div><div class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>)<span class=\"comment\">//调用init真正的构造函数</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 赋值原型链，完成继承</span></div><div class=\"line\">    SubClass.prototype = prototype</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 改变constructor引用</span></div><div class=\"line\">    SubClass.prototype.constructor = SubClass</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 为子类也添加extend方法</span></div><div class=\"line\">    SubClass.extend = _extend</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> SubClass</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//超级父类</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Class = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">  <span class=\"comment\">//为超级父类添加extend方法</span></div><div class=\"line\">  Class.extend = _extend</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> Class</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>这是拿John Resig的class简单修改了下。</p>\n<blockquote>\n<p>这边只是很简陋的实现了类的继承机制。如果对类的实现有兴趣可以参考我另一篇文章<a href=\"http://purplebamboo.github.io/2014/07/13/javascript-oo-class/\">javascript oo实现</a></p>\n</blockquote>\n<p>我们看下使用方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//继承超级父类，生成个子类Animal，并且混入一些方法。这些方法会到Animal的原型上。</span></div><div class=\"line\"><span class=\"comment\">//另外这边不仅支持混入&#123;&#125;，还支持混入Function</span></div><div class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.msg = opts.msg</div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">\"animal\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">say</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.msg+<span class=\"string\">\":i am a \"</span>+<span class=\"keyword\">this</span>.type)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//继承Animal，并且混入一些方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//并未实现super方法，直接简单使用父类原型调用即可</span></div><div class=\"line\">    Animal.prototype.init.call(<span class=\"keyword\">this</span>,opts)</div><div class=\"line\">    <span class=\"comment\">//修改了type类型</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">\"dog\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//new Animal(&#123;msg:'hello'&#125;).say()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Dog(&#123;<span class=\"attr\">msg</span>:<span class=\"string\">'hi'</span>&#125;).say()</div></pre></td></tr></table></figure>\n<p>使用很简单，超级父类具有extend方法，可以继承出一个子类。子类也具有extend方法。</p>\n<p>这边要强调的是，继承的父类都是一个也就是单继承。但是可以通过extend实现多重混入。详见下面用法。</p>\n<p>有了这个类的扩展，我们可以这么编写代码了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.input = $(config.id);</div><div class=\"line\">    <span class=\"keyword\">this</span>._bind();</div><div class=\"line\">    <span class=\"keyword\">this</span>.render();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.input.after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">_getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.input.val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">_bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.input.on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">\"#J_input\"</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这边可能还没看见class的真正好处，不急我们继续往下。</p>\n<h2 id=\"抽象出base\"><a href=\"#抽象出base\" class=\"headerlink\" title=\"抽象出base\"></a>抽象出base</h2><p>可以看到，我们的组件有些方法，是大部分组件都会有的。</p>\n<ul>\n<li>比如init用来初始化属性。</li>\n<li>比如render用来处理渲染的逻辑。</li>\n<li>比如bind用来处理事件的绑定。</li>\n</ul>\n<p>当然这也是一种约定俗成的规范了。如果大家全部按照这种风格来写代码，开发大规模组件库就变得更加规范，相互之间配合也更容易。</p>\n<p>这个时候面向对象的好处就来了，我们抽象出一个Base类。其他组件编写时都继承它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Base = Class.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自动保存配置项</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.__config = config</div><div class=\"line\">    <span class=\"keyword\">this</span>.bind()</div><div class=\"line\">    <span class=\"keyword\">this</span>.render()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//可以使用get来获取配置项</span></div><div class=\"line\">  get:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.__config[key]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//可以使用set来设置配置项</span></div><div class=\"line\">  set:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.__config[key] = value</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//定义销毁的方法，一些收尾工作都应该在这里</span></div><div class=\"line\">  destroy:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>base类主要把组件的一般性内容都提取了出来，这样我们编写组件时可以直接继承base类，覆盖里面的bind和render方法。</p>\n<p>于是我们可以这么写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">_getNum</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).val().length;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bind</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ($(<span class=\"string\">'#J_input_count'</span>).length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).after(<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;/span&gt;'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#J_input_count'</span>).html(num+<span class=\"string\">'个字'</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">  <span class=\"comment\">//这边直接传input的节点了，因为属性的赋值都是自动的。</span></div><div class=\"line\">    input:$(<span class=\"string\">\"#J_input\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>可以看到我们直接实现一些固定的方法，bind，render就行了。其他的base会自动处理（这里只是简单处理了配置属性的赋值）。</p>\n<p>事实上，这边的init，bind，render就已经有了点生命周期的影子，但凡是组件都会具有这几个阶段，初始化，绑定事件，以及渲染。当然这边还可以加一个destroy销毁的方法，用来清理现场。</p>\n<p>此外为了方便，这边直接变成了传递input的节点。因为属性赋值自动化了，一般来说这种情况下都是使用getter，setter来处理。这边就不详细展开了。</p>\n<h2 id=\"引入事件机制（观察者模式）\"><a href=\"#引入事件机制（观察者模式）\" class=\"headerlink\" title=\"引入事件机制（观察者模式）\"></a>引入事件机制（观察者模式）</h2><p>有了base应该说我们编写组件更加的规范化，体系化了。下面我们继续深挖。</p>\n<p>还是上面的那个例子，如果我们希望输入字的时候超过5个字就弹出警告。该怎么办呢。</p>\n<p>小白可能会说，那简单啊直接改下bind方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  bind:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(self._getNum() &gt; <span class=\"number\">5</span>)&#123;</div><div class=\"line\">        alert(<span class=\"string\">'超过了5个字了。。。'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>的确也是一种方法，但是太low了，代码严重耦合。当这种需求特别特别多，代码会越来越乱。</p>\n<p>这个时候就要引入事件机制，也就是经常说的观察者模式。</p>\n<blockquote>\n<p>注意这边的事件机制跟平时的浏览器那些事件不是一回事，要分开来看。</p>\n</blockquote>\n<p>什么是观察者模式呢，官方的解释就不说了，直接拿这个例子来说。</p>\n<p>想象一下base是个机器人会说话，他会一直监听输入的字数并且汇报出去（通知）。而你可以把耳朵凑上去，听着他的汇报（监听）。发现字数超过5个字了，你就做些操作。</p>\n<p>所以这分为两个部分，一个是通知，一个是监听。</p>\n<p>假设通知是 fire方法，监听是on。于是我们可以这么写代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = Base.extend(&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  bind:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    self.get(<span class=\"string\">'input'</span>).on(<span class=\"string\">'keyup'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//通知,每当有输入的时候，就报告出去。</span></div><div class=\"line\">      self.fire(<span class=\"string\">'Text.input'</span>,self._getNum())</div><div class=\"line\">      self.render();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">input</span>:$(<span class=\"string\">\"#J_input\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">//监听这个输入事件</span></div><div class=\"line\">  t.on(<span class=\"string\">'Text.input'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可以获取到传递过来的值</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">       alert(<span class=\"string\">'超过了5个字了。。。'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>fire用来触发一个事件，可以传递数据。而on用来添加一个监听。这样组件里面只负责把一些关键的事件抛出来，至于具体的业务逻辑都可以添加监听来实现。没有事件的组件是不完整的。</p>\n<p>下面我们看看怎么实现这套事件机制。</p>\n<p>我们首先抛开base，想想怎么实现一个具有这套机制的类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//辅组函数，获取数组里某个元素的索引 index</span></div><div class=\"line\"><span class=\"keyword\">var</span> _indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array,key</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length</div><div class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Event = Class.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">//添加监听</span></div><div class=\"line\">  on:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,listener</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//this.__events存储所有的处理函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events = &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events[key]) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events[key] = []</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (_indexOf(<span class=\"keyword\">this</span>.__events,listener) === <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">typeof</span> listener === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events[key].push(listener)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//触发一个事件，也就是通知</span></div><div class=\"line\">  fire:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.__events || !<span class=\"keyword\">this</span>.__events[key]) <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>) || []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> l = listeners.length</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i; i &lt; l; i++) &#123;</div><div class=\"line\">      listeners[i].apply(<span class=\"keyword\">this</span>,args)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//取消监听</span></div><div class=\"line\">  off:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,listener</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!key &amp;&amp; !listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.__events = &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//不传监听函数，就去掉当前key下面的所有的监听函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (key &amp;&amp; !listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (key &amp;&amp; listener) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>.__events[key]</div><div class=\"line\">      <span class=\"keyword\">var</span> index = _indexOf(listeners, listener)</div><div class=\"line\"></div><div class=\"line\">      (index &gt; <span class=\"number\">-1</span>) &amp;&amp; listeners.splice(index, <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Event()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加监听 test事件</span></div><div class=\"line\">a.on(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">  alert(msg)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//触发 test事件</span></div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'我是第一次触发'</span>)</div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'我又触发了'</span>)</div><div class=\"line\"></div><div class=\"line\">a.off(<span class=\"string\">'test'</span>)</div><div class=\"line\"></div><div class=\"line\">a.fire(<span class=\"string\">'test'</span>,<span class=\"string\">'你应该看不到我了'</span>)</div></pre></td></tr></table></figure>\n<p>实现起来并不复杂，只要使用this.__events存下所有的监听函数。在fire的时候去找到并且执行就行了。</p>\n<p>这个时候面向对象的好处就来了，如果我们希望base拥有事件机制。只需要这么写:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Base = Class.extend(Event,&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  destroy:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//去掉所有的事件监听</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.off()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//于是可以</span></div><div class=\"line\"><span class=\"comment\">//var a  = new Base()</span></div><div class=\"line\"><span class=\"comment\">// a.on(xxx,fn)</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// a.fire()</span></div></pre></td></tr></table></figure>\n<p>是的只要extend的时候多混入一个Event，这样Base或者它的子类生成的对象都会自动具有事件机制。</p>\n<p>有了事件机制我们可以把组件内部很多状态暴露出来，比如我们可以在set方法中抛出一个事件，这样每次属性变更的时候我们都可以监听到。</p>\n<p>到这里为止，我们的base类已经像模像样了，具有了init，bind，render，destroy方法来表示组件的各个关键过程，并且具有了事件机制。基本上已经可以很好的来开发组件了。</p>\n<h2 id=\"更进一步，richbase\"><a href=\"#更进一步，richbase\" class=\"headerlink\" title=\"更进一步，richbase\"></a>更进一步，richbase</h2><p>我们还可以继续深挖。看看我们的base，还差些什么。首先浏览器的事件监听还很落后，需要用户自己在bind里面绑定，再然后现在的TextCount里面还存在dom操作，也没有自己的模板机制。这都是需要扩展的，于是我们在base的基础上再继承出一个richbase用来实现更完备的组件基类。</p>\n<p>主要实现这些功能：</p>\n<ul>\n<li>事件代理：不需要用户自己去找dom元素绑定监听，也不需要用户去关心什么时候销毁。</li>\n<li>模板渲染：用户不需要覆盖render方法，而是覆盖实现setUp方法。可以通过在setUp里面调用render来达到渲染对应html的目的。</li>\n<li>单向绑定：通过setChuckdata方法，更新数据，同时会更新html内容，不再需要dom操作。</li>\n</ul>\n<p>我们看下我们实现richbase后怎么写组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TextCount = RichBase.extend(&#123;</div><div class=\"line\">  <span class=\"comment\">//事件直接在这里注册，会代理到parentNode节点，parentNode节点在下面指定</span></div><div class=\"line\">  EVENTS:&#123;</div><div class=\"line\">    <span class=\"comment\">//选择器字符串，支持所有jQuery风格的选择器</span></div><div class=\"line\">    <span class=\"string\">'input'</span>:&#123;</div><div class=\"line\">      <span class=\"comment\">//注册keyup事件</span></div><div class=\"line\">      keyup:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">self,e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//单向绑定，修改数据直接更新对应模板</span></div><div class=\"line\">        self.setChuckdata(<span class=\"string\">'count'</span>,self._getNum())</div><div class=\"line\"></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//指定当前组件的模板</span></div><div class=\"line\">  template:<span class=\"string\">'&lt;span id=\"J_input_count\"&gt;&lt;%= count %&gt;个字&lt;/span&gt;'</span>,</div><div class=\"line\">  <span class=\"comment\">//私有方法</span></div><div class=\"line\">  _getNum:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.get(<span class=\"string\">'input'</span>).val().length || <span class=\"number\">0</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//覆盖实现setUp方法，所有逻辑写在这里。最后可以使用render来决定需不需要渲染模板</span></div><div class=\"line\">  <span class=\"comment\">//模板渲染后会append到parentNode节点下面，如果未指定，会append到document.body</span></div><div class=\"line\">  setUp:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>).find(<span class=\"string\">'#J_input'</span>)</div><div class=\"line\">    self.set(<span class=\"string\">'input'</span>,input)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"keyword\">this</span>._getNum()</div><div class=\"line\">    <span class=\"comment\">//赋值数据，渲染模板，选用。有的组件没有对应的模板就可以不调用这步。</span></div><div class=\"line\">    self.render(&#123;</div><div class=\"line\">      <span class=\"attr\">count</span>:num</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//传入parentNode节点，组件会挂载到这个节点上。所有事件都会代理到这个上面。</span></div><div class=\"line\">  <span class=\"keyword\">new</span> TextCount(&#123;</div><div class=\"line\">    <span class=\"attr\">parentNode</span>:$(<span class=\"string\">\"#J_test_container\"</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**对应的html,做了些修改，主要为了加上parentNode，这边就是J_test_container</div><div class=\"line\"></div><div class=\"line\">&lt;div id=\"J_test_container\"&gt;</div><div class=\"line\">  &lt;input type=\"text\" id=\"J_input\"/&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">*/</span></div></pre></td></tr></table></figure>\n<p>看下上面的用法，可以看到变得更简单清晰了：</p>\n<ul>\n<li>事件不需要自己绑定，直接注册在EVENTS属性上。程序会自动将事件代理到parentNode上。</li>\n<li>引入了模板机制，使用template规定组件的模板，然后在setUp里面使用render(data)的方式渲染模板，程序会自动帮你append到parentNode下面。</li>\n<li>单向绑定，无需操作dom，后面要改动内容，不需要操作dom，只需要调用setChuckdata(key,新的值)，选择性的更新某个数据，相应的html会自动重新渲染。</li>\n</ul>\n<p>下面我们看下richebase的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> RichBase = Base.extend(&#123;</div><div class=\"line\">  <span class=\"attr\">EVENTS</span>:&#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">template</span>:<span class=\"string\">''</span>,</div><div class=\"line\">  <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//存储配置项</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.__config = config</div><div class=\"line\">    <span class=\"comment\">//解析代理事件</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._delegateEvent()</div><div class=\"line\">    <span class=\"keyword\">this</span>.setUp()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//循环遍历EVENTS，使用jQuery的delegate代理到parentNode</span></div><div class=\"line\">  _delegateEvent:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">var</span> events = <span class=\"keyword\">this</span>.EVENTS || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> eventObjs,fn,select,type</div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>) || $(<span class=\"built_in\">document</span>.body)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (select <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">      eventObjs = events[select]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (type <span class=\"keyword\">in</span> eventObjs) &#123;</div><div class=\"line\">        fn = eventObjs[type]</div><div class=\"line\"></div><div class=\"line\">        parentNode.delegate(select,type,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">          fn.call(<span class=\"literal\">null</span>,self,e)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//支持underscore的极简模板语法</span></div><div class=\"line\">  <span class=\"comment\">//用来渲染模板，这边是抄的underscore的。非常简单的模板引擎，支持原生的js语法</span></div><div class=\"line\">  _parseTemplate:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str,data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * http://ejohn.org/blog/javascript-micro-templating/</div><div class=\"line\">     * https://github.com/jashkenas/underscore/blob/0.1.0/underscore.js#L399</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'obj'</span>,</div><div class=\"line\">        <span class=\"string\">'var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;'</span> +</div><div class=\"line\">        <span class=\"string\">'with(obj)&#123;p.push(\\''</span> + str</div><div class=\"line\">            .replace(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">\" \"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"&lt;%\"</span>).join(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">            .replace(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)'/g</span>, <span class=\"string\">\"$1\\r\"</span>)</div><div class=\"line\">            .replace(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">\"',$1,'\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"\\t\"</span>).join(<span class=\"string\">\"');\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"%&gt;\"</span>).join(<span class=\"string\">\"p.push('\"</span>)</div><div class=\"line\">            .split(<span class=\"string\">\"\\r\"</span>).join(<span class=\"string\">\"\\\\'\"</span>) +</div><div class=\"line\">        <span class=\"string\">\"');&#125;return p.join('');\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> data ? fn(data) : fn</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//提供给子类覆盖实现</span></div><div class=\"line\">  setUp:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.render()</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//用来实现刷新，只需要传入之前render时的数据里的key还有更新值，就可以自动刷新模板</span></div><div class=\"line\">  setChuckdata:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = self.get(<span class=\"string\">'__renderData'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//更新对应的值</span></div><div class=\"line\">    data[key] = value</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.template) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"comment\">//重新渲染</span></div><div class=\"line\">    <span class=\"keyword\">var</span> newHtmlNode = $(self._parseTemplate(<span class=\"keyword\">this</span>.template,data))</div><div class=\"line\">    <span class=\"comment\">//拿到存储的渲染后的节点</span></div><div class=\"line\">    <span class=\"keyword\">var</span> currentNode = self.get(<span class=\"string\">'__currentNode'</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (!currentNode) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"comment\">//替换内容</span></div><div class=\"line\">    currentNode.replaceWith(newHtmlNode)</div><div class=\"line\"></div><div class=\"line\">    self.set(<span class=\"string\">'__currentNode'</span>,newHtmlNode)</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//使用data来渲染模板并且append到parentNode下面</span></div><div class=\"line\">  render:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">//先存储起来渲染的data,方便后面setChuckdata获取使用</span></div><div class=\"line\">    self.set(<span class=\"string\">'__renderData'</span>,data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.template) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//使用_parseTemplate解析渲染模板生成html</span></div><div class=\"line\">    <span class=\"comment\">//子类可以覆盖这个方法使用其他的模板引擎解析</span></div><div class=\"line\">    <span class=\"keyword\">var</span> html = self._parseTemplate(<span class=\"keyword\">this</span>.template,data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = <span class=\"keyword\">this</span>.get(<span class=\"string\">'parentNode'</span>) || $(<span class=\"built_in\">document</span>.body)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> currentNode = $(html)</div><div class=\"line\">    <span class=\"comment\">//保存下来留待后面的区域刷新</span></div><div class=\"line\">    <span class=\"comment\">//存储起来，方便后面setChuckdata获取使用</span></div><div class=\"line\">    self.set(<span class=\"string\">'__currentNode'</span>,currentNode)</div><div class=\"line\">    parentNode.append(currentNode)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">destroy</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"comment\">//去掉自身的事件监听</span></div><div class=\"line\">    self.off()</div><div class=\"line\">    <span class=\"comment\">//删除渲染好的dom节点</span></div><div class=\"line\">    self.get(<span class=\"string\">'__currentNode'</span>).remove()</div><div class=\"line\">    <span class=\"comment\">//去掉绑定的代理事件</span></div><div class=\"line\">    <span class=\"keyword\">var</span> events = self.EVENTS || &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> eventObjs,fn,select,type</div><div class=\"line\">    <span class=\"keyword\">var</span> parentNode = self.get(<span class=\"string\">'parentNode'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (select <span class=\"keyword\">in</span> events) &#123;</div><div class=\"line\">      eventObjs = events[select]</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">for</span> (type <span class=\"keyword\">in</span> eventObjs) &#123;</div><div class=\"line\">        fn = eventObjs[type]</div><div class=\"line\"></div><div class=\"line\">        parentNode.undelegate(select,type,fn)</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>主要做了两件事，一个就是事件的解析跟代理，全部代理到parentNode上面。另外就是把render抽出来，用户只需要实现setUp方法。如果需要模板支持就在setUp里面调用render来渲染模板，并且可以通过setChuckdata来刷新模板，实现单向绑定。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>有了richbase，基本上组件开发就没啥问题了。但是我们还是可以继续深挖下去。</p>\n<p>比如组件自动化加载渲染，局部刷新，比如父子组件的嵌套，再比如双向绑定，再比如实现ng-click这种风格的事件机制。</p>\n<p>当然这些东西已经不属于组件里面的内容了。再进一步其实已经是一个框架了。实际上最近比较流行的react，ploymer还有我们的brix等等都是实现了这套东西。受限于篇幅，这个以后有空再写篇文章详细分析下。</p>\n<blockquote>\n<p>这是一个github上的相关demo</p>\n</blockquote>\n<p>转载地址:<a href=\"https://github.com/purplebamboo/demo-richbase\">https://github.com/purplebamboo/demo-richbase</a><br>请点<a href=\"https://github.com/purplebamboo/demo-richbase\">这里</a>。</p>\n"},{"title":"移动端rem适配方案","date":"2017-03-11T12:34:28.000Z","comments":1,"keywords":null,"description":"移动手机端界面写了挺多,倒没有认真想过适配方案的问题,今天记录一下移动端适配方案-媒体查询方案,淘宝手淘移动端JS适配方案","_content":"\n## 选择 rem 做移动端适配的原理\n\n\n> 什么是 rem 呢? `rem` 是在W3C上面的解析——“font size of the root element”,它是根据根元素'html'的大小变化而变化的,HTML默认的`font-szie`为`16px`\n\n\n##媒体查询方式适配\n>媒体查询方式适配就是根据 `media screen`大小的变化浏览器来自动选择对应的适配代码,将html设置10px\n```\nhtml{font-size:10px}\n@media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n@media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n@media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n@media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n@media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n@media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n@media screen and (min-width:800px){html{font-size:25px}}\n\n```\n\n##根据JavaScript来改变根字体的大小\n\n```\n;(function(designWidth, maxWidth) {\n    var doc = document,\n        win = window;\n    var docEl = doc.documentElement;\n    var tid;\n    var rootItem, rootStyle;\n\n    function refreshRem() {\n        var width = docEl.getBoundingClientRect().width;\n        var dpr = window.devicePixelRatio || 1;\n        docEl.setAttribute('data-dpr', dpr);\n        if (!maxWidth) {\n            maxWidth = 750;\n        };\n        if (width > maxWidth) {\n            width = maxWidth;\n        }\n        //与淘宝做法不同，直接采用简单的rem换算方法1rem=100px\n        var rem = width * 100 / designWidth;\n        //兼容UC开始\n        rootStyle = \"html{font-size:\" + rem + 'px !important}';\n        rootItem = document.getElementById('rootsize') || document.createElement(\"style\");\n        if (!document.getElementById('rootsize')) {\n            document.getElementsByTagName(\"head\")[0].appendChild(rootItem);\n            rootItem.id = 'rootsize';\n        }\n        if (rootItem.styleSheet) {\n            rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)\n        } else {\n            try {\n                rootItem.innerHTML = rootStyle\n            } catch (f) {\n                rootItem.innerText = rootStyle\n            }\n        }\n        //兼容UC结束\n        docEl.style.fontSize = rem + \"px\";\n    };\n    refreshRem();\n\n    win.addEventListener(\"resize\", function() {\n        clearTimeout(tid); //防止执行两次\n        tid = setTimeout(refreshRem, 300);\n    }, false);\n\n    win.addEventListener(\"pageshow\", function(e) {\n        if (e.persisted) { // 浏览器后退的时候重新计算\n            clearTimeout(tid);\n            tid = setTimeout(refreshRem, 300);\n        }\n    }, false);\n\n    if (doc.readyState === \"complete\") {\n        doc.body.style.fontSize = \"16px\";\n    } else {\n        doc.addEventListener(\"DOMContentLoaded\", function(e) {\n            doc.body.style.fontSize = \"16px\";\n\n        }, false);\n    }\n})(750, 768);\n```\n上面核心的几行代码\n```\nvar width = docEl.getBoundingClientRect().width; //获取移动设备的宽度\nvar rem = width * 100 / designWidth;  //rem的值等于(设备的宽度)x100/(设计稿宽度)\ndocEl.style.fontSize = rem + \"px\";   //设置html的字号为第二行的值\n```\n假如设计稿的大小实际是750px的设计稿,计算出来根字体为50px,Iphone 实际是375px的宽度,计算就是7.5rem的宽度\n\n阿里团队开源的一个库\nhttps://github.com/amfe/lib-flexible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mobile-responsive.md","raw":"---\ntitle: 移动端rem适配方案\ndate: 2017-03-11 20:34:28\ncomments: true\ncategories: Blog\ntags: [css,javascript]\nkeywords: \ndescription: 移动手机端界面写了挺多,倒没有认真想过适配方案的问题,今天记录一下移动端适配方案-媒体查询方案,淘宝手淘移动端JS适配方案\n\n---\n\n## 选择 rem 做移动端适配的原理\n\n\n> 什么是 rem 呢? `rem` 是在W3C上面的解析——“font size of the root element”,它是根据根元素'html'的大小变化而变化的,HTML默认的`font-szie`为`16px`\n\n\n##媒体查询方式适配\n>媒体查询方式适配就是根据 `media screen`大小的变化浏览器来自动选择对应的适配代码,将html设置10px\n```\nhtml{font-size:10px}\n@media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}\n@media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}\n@media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}\n@media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}\n@media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}\n@media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}\n@media screen and (min-width:800px){html{font-size:25px}}\n\n```\n\n##根据JavaScript来改变根字体的大小\n\n```\n;(function(designWidth, maxWidth) {\n    var doc = document,\n        win = window;\n    var docEl = doc.documentElement;\n    var tid;\n    var rootItem, rootStyle;\n\n    function refreshRem() {\n        var width = docEl.getBoundingClientRect().width;\n        var dpr = window.devicePixelRatio || 1;\n        docEl.setAttribute('data-dpr', dpr);\n        if (!maxWidth) {\n            maxWidth = 750;\n        };\n        if (width > maxWidth) {\n            width = maxWidth;\n        }\n        //与淘宝做法不同，直接采用简单的rem换算方法1rem=100px\n        var rem = width * 100 / designWidth;\n        //兼容UC开始\n        rootStyle = \"html{font-size:\" + rem + 'px !important}';\n        rootItem = document.getElementById('rootsize') || document.createElement(\"style\");\n        if (!document.getElementById('rootsize')) {\n            document.getElementsByTagName(\"head\")[0].appendChild(rootItem);\n            rootItem.id = 'rootsize';\n        }\n        if (rootItem.styleSheet) {\n            rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)\n        } else {\n            try {\n                rootItem.innerHTML = rootStyle\n            } catch (f) {\n                rootItem.innerText = rootStyle\n            }\n        }\n        //兼容UC结束\n        docEl.style.fontSize = rem + \"px\";\n    };\n    refreshRem();\n\n    win.addEventListener(\"resize\", function() {\n        clearTimeout(tid); //防止执行两次\n        tid = setTimeout(refreshRem, 300);\n    }, false);\n\n    win.addEventListener(\"pageshow\", function(e) {\n        if (e.persisted) { // 浏览器后退的时候重新计算\n            clearTimeout(tid);\n            tid = setTimeout(refreshRem, 300);\n        }\n    }, false);\n\n    if (doc.readyState === \"complete\") {\n        doc.body.style.fontSize = \"16px\";\n    } else {\n        doc.addEventListener(\"DOMContentLoaded\", function(e) {\n            doc.body.style.fontSize = \"16px\";\n\n        }, false);\n    }\n})(750, 768);\n```\n上面核心的几行代码\n```\nvar width = docEl.getBoundingClientRect().width; //获取移动设备的宽度\nvar rem = width * 100 / designWidth;  //rem的值等于(设备的宽度)x100/(设计稿宽度)\ndocEl.style.fontSize = rem + \"px\";   //设置html的字号为第二行的值\n```\n假如设计稿的大小实际是750px的设计稿,计算出来根字体为50px,Iphone 实际是375px的宽度,计算就是7.5rem的宽度\n\n阿里团队开源的一个库\nhttps://github.com/amfe/lib-flexible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mobile-responsive","published":1,"updated":"2017-06-12T01:35:38.207Z","layout":"post","photos":[],"link":"","_id":"cj4sal691000fek5b6cspkese","content":"<h2 id=\"选择-rem-做移动端适配的原理\"><a href=\"#选择-rem-做移动端适配的原理\" class=\"headerlink\" title=\"选择 rem 做移动端适配的原理\"></a>选择 rem 做移动端适配的原理</h2><blockquote>\n<p>什么是 rem 呢? <code>rem</code> 是在W3C上面的解析——“font size of the root element”,它是根据根元素’html’的大小变化而变化的,HTML默认的<code>font-szie</code>为<code>16px</code></p>\n</blockquote>\n<p>##媒体查询方式适配</p>\n<blockquote>\n<p>媒体查询方式适配就是根据 <code>media screen</code>大小的变化浏览器来自动选择对应的适配代码,将html设置10px<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">10px</span>&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">321px</span>) and (max-width:<span class=\"number\">375px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">11px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">376px</span>) and (max-width:<span class=\"number\">414px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">415px</span>) and (max-width:<span class=\"number\">639px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">15px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">640px</span>) and (max-width:<span class=\"number\">719px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">720px</span>) and (max-width:<span class=\"number\">749px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">22.5px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">750px</span>) and (max-width:<span class=\"number\">799px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">23.5px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">800px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">25px</span>&#125;&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>##根据JavaScript来改变根字体的大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">designWidth, maxWidth</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>,</div><div class=\"line\">        win = <span class=\"built_in\">window</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement;</div><div class=\"line\">    <span class=\"keyword\">var</span> tid;</div><div class=\"line\">    <span class=\"keyword\">var</span> rootItem, rootStyle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshRem</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> width = docEl.getBoundingClientRect().width;</div><div class=\"line\">        <span class=\"keyword\">var</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>;</div><div class=\"line\">        docEl.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!maxWidth) &#123;</div><div class=\"line\">            maxWidth = <span class=\"number\">750</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">if</span> (width &gt; maxWidth) &#123;</div><div class=\"line\">            width = maxWidth;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//与淘宝做法不同，直接采用简单的rem换算方法1rem=100px</span></div><div class=\"line\">        <span class=\"keyword\">var</span> rem = width * <span class=\"number\">100</span> / designWidth;</div><div class=\"line\">        <span class=\"comment\">//兼容UC开始</span></div><div class=\"line\">        rootStyle = <span class=\"string\">\"html&#123;font-size:\"</span> + rem + <span class=\"string\">'px !important&#125;'</span>;</div><div class=\"line\">        rootItem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'rootsize'</span>) || <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'rootsize'</span>)) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(rootItem);</div><div class=\"line\">            rootItem.id = <span class=\"string\">'rootsize'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rootItem.styleSheet) &#123;</div><div class=\"line\">            rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                rootItem.innerHTML = rootStyle</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (f) &#123;</div><div class=\"line\">                rootItem.innerText = rootStyle</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//兼容UC结束</span></div><div class=\"line\">        docEl.style.fontSize = rem + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    refreshRem();</div><div class=\"line\"></div><div class=\"line\">    win.addEventListener(<span class=\"string\">\"resize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        clearTimeout(tid); <span class=\"comment\">//防止执行两次</span></div><div class=\"line\">        tid = setTimeout(refreshRem, <span class=\"number\">300</span>);</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    win.addEventListener(<span class=\"string\">\"pageshow\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.persisted) &#123; <span class=\"comment\">// 浏览器后退的时候重新计算</span></div><div class=\"line\">            clearTimeout(tid);</div><div class=\"line\">            tid = setTimeout(refreshRem, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doc.readyState === <span class=\"string\">\"complete\"</span>) &#123;</div><div class=\"line\">        doc.body.style.fontSize = <span class=\"string\">\"16px\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        doc.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            doc.body.style.fontSize = <span class=\"string\">\"16px\"</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(<span class=\"number\">750</span>, <span class=\"number\">768</span>);</div></pre></td></tr></table></figure>\n<p>上面核心的几行代码<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">width</span> = docEl.getBoundingClientRect().<span class=\"built_in\">width</span>; //获取移动设备的宽度</div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">rem</span> = <span class=\"built_in\">width</span> * <span class=\"number\">100</span> / designWidth;  //<span class=\"built_in\">rem</span>的值等于(设备的宽度)x100/(设计稿宽度)</div><div class=\"line\">docEl.<span class=\"built_in\">style</span>.fontSize = <span class=\"built_in\">rem</span> + <span class=\"string\">\"px\"</span>;   //设置html的字号为第二行的值</div></pre></td></tr></table></figure></p>\n<p>假如设计稿的大小实际是750px的设计稿,计算出来根字体为50px,Iphone 实际是375px的宽度,计算就是7.5rem的宽度</p>\n<p>阿里团队开源的一个库<br><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">https://github.com/amfe/lib-flexible</a></p>\n","excerpt":"","more":"<h2 id=\"选择-rem-做移动端适配的原理\"><a href=\"#选择-rem-做移动端适配的原理\" class=\"headerlink\" title=\"选择 rem 做移动端适配的原理\"></a>选择 rem 做移动端适配的原理</h2><blockquote>\n<p>什么是 rem 呢? <code>rem</code> 是在W3C上面的解析——“font size of the root element”,它是根据根元素’html’的大小变化而变化的,HTML默认的<code>font-szie</code>为<code>16px</code></p>\n</blockquote>\n<p>##媒体查询方式适配</p>\n<blockquote>\n<p>媒体查询方式适配就是根据 <code>media screen</code>大小的变化浏览器来自动选择对应的适配代码,将html设置10px<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">10px</span>&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">321px</span>) and (max-width:<span class=\"number\">375px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">11px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">376px</span>) and (max-width:<span class=\"number\">414px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">415px</span>) and (max-width:<span class=\"number\">639px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">15px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">640px</span>) and (max-width:<span class=\"number\">719px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">720px</span>) and (max-width:<span class=\"number\">749px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">22.5px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">750px</span>) and (max-width:<span class=\"number\">799px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">23.5px</span>&#125;&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width:<span class=\"number\">800px</span>)&#123;<span class=\"selector-tag\">html</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">25px</span>&#125;&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>##根据JavaScript来改变根字体的大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">designWidth, maxWidth</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>,</div><div class=\"line\">        win = <span class=\"built_in\">window</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> docEl = doc.documentElement;</div><div class=\"line\">    <span class=\"keyword\">var</span> tid;</div><div class=\"line\">    <span class=\"keyword\">var</span> rootItem, rootStyle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refreshRem</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> width = docEl.getBoundingClientRect().width;</div><div class=\"line\">        <span class=\"keyword\">var</span> dpr = <span class=\"built_in\">window</span>.devicePixelRatio || <span class=\"number\">1</span>;</div><div class=\"line\">        docEl.setAttribute(<span class=\"string\">'data-dpr'</span>, dpr);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!maxWidth) &#123;</div><div class=\"line\">            maxWidth = <span class=\"number\">750</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">if</span> (width &gt; maxWidth) &#123;</div><div class=\"line\">            width = maxWidth;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//与淘宝做法不同，直接采用简单的rem换算方法1rem=100px</span></div><div class=\"line\">        <span class=\"keyword\">var</span> rem = width * <span class=\"number\">100</span> / designWidth;</div><div class=\"line\">        <span class=\"comment\">//兼容UC开始</span></div><div class=\"line\">        rootStyle = <span class=\"string\">\"html&#123;font-size:\"</span> + rem + <span class=\"string\">'px !important&#125;'</span>;</div><div class=\"line\">        rootItem = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'rootsize'</span>) || <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'rootsize'</span>)) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(rootItem);</div><div class=\"line\">            rootItem.id = <span class=\"string\">'rootsize'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rootItem.styleSheet) &#123;</div><div class=\"line\">            rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                rootItem.innerHTML = rootStyle</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (f) &#123;</div><div class=\"line\">                rootItem.innerText = rootStyle</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//兼容UC结束</span></div><div class=\"line\">        docEl.style.fontSize = rem + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    refreshRem();</div><div class=\"line\"></div><div class=\"line\">    win.addEventListener(<span class=\"string\">\"resize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        clearTimeout(tid); <span class=\"comment\">//防止执行两次</span></div><div class=\"line\">        tid = setTimeout(refreshRem, <span class=\"number\">300</span>);</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    win.addEventListener(<span class=\"string\">\"pageshow\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.persisted) &#123; <span class=\"comment\">// 浏览器后退的时候重新计算</span></div><div class=\"line\">            clearTimeout(tid);</div><div class=\"line\">            tid = setTimeout(refreshRem, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doc.readyState === <span class=\"string\">\"complete\"</span>) &#123;</div><div class=\"line\">        doc.body.style.fontSize = <span class=\"string\">\"16px\"</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        doc.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">            doc.body.style.fontSize = <span class=\"string\">\"16px\"</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(<span class=\"number\">750</span>, <span class=\"number\">768</span>);</div></pre></td></tr></table></figure>\n<p>上面核心的几行代码<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">width</span> = docEl.getBoundingClientRect().<span class=\"built_in\">width</span>; //获取移动设备的宽度</div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">rem</span> = <span class=\"built_in\">width</span> * <span class=\"number\">100</span> / designWidth;  //<span class=\"built_in\">rem</span>的值等于(设备的宽度)x100/(设计稿宽度)</div><div class=\"line\">docEl.<span class=\"built_in\">style</span>.fontSize = <span class=\"built_in\">rem</span> + <span class=\"string\">\"px\"</span>;   //设置html的字号为第二行的值</div></pre></td></tr></table></figure></p>\n<p>假如设计稿的大小实际是750px的设计稿,计算出来根字体为50px,Iphone 实际是375px的宽度,计算就是7.5rem的宽度</p>\n<p>阿里团队开源的一个库<br><a href=\"https://github.com/amfe/lib-flexible\">https://github.com/amfe/lib-flexible</a></p>\n"},{"title":"javascript 常用方法整理","date":"2016-12-31T14:53:28.000Z","comments":1,"keywords":null,"description":"javascript常用的一些方法整理、简单只为整理。","_content":"\n## 获取url中的参数\n```\nfunction GetQueryStringRegExp(name,url) {\n    var reg = new RegExp(\"(^|\\\\?|&)\" + name + \"=([^&]*)(\\\\s|&|$)\", \"i\");\n    if (reg.test(url)) return decodeURIComponent(RegExp.$2.replace(/\\+/g, \" \")); return \"\";\n}\n\n```\n## js 绑定事件\n```\nfunction eventBind(obj, eventType, callBack) {\n        if (obj.addEventListener) {\n            obj.addEventListener(eventType, callBack, false);\n        }\n        else if (window.attachEvent) {\n            obj.attachEvent('on' + eventType, callBack);\n        }\n        else {\n            obj['on' + eventType] = callBack;\n        }\n    };\neventBind(document, 'click', bodyClick);\n\n```\n\n## Enter回车提交\n```\n $(\"id\").onkeypress = function (event) {\n    event = (event) ? event : ((window.event) ? window.event : \"\")\n    keyCode = event.keyCode ? event.keyCode : (event.which ? event.which : event.charCode);\n    if (keyCode == 13) {\n        $(\"SubmitLogin\").onclick();\n    }\n }\n```\n## Json对象与Json字符串互转\n\n\n```\n$.parseJSON( jsonstr ); //jQuery.parseJSON(jsonstr),可以将json字符串转换成json对象 \n```\n```\nJSON.parse(jsonstr); //可以将json字符串转换成json对象 \nJSON.stringify(jsonobj); //可以将json对象转换成json对符串 \n```\n\n\n## 金钱金额大小写\n```\n  //金额大写转换函数 transform('123431233132.23')  \n    function transform(tranvalue) {  \n        try {  \n            var i = 1;  \n            var dw2 = new Array(\"\", \"万\", \"亿\"); //大单位  \n            var dw1 = new Array(\"拾\", \"佰\", \"仟\"); //小单位  \n            var dw = new Array(\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"); //整数部分用  \n            //以下是小写转换成大写显示在合计大写的文本框中       \n            //分离整数与小数  \n            var source = splits(tranvalue);  \n            var num = source[0];  \n            var dig = source[1];  \n            //转换整数部分  \n            var k1 = 0; //计小单位  \n            var k2 = 0; //计大单位  \n            var sum = 0;  \n            var str = \"\";  \n            var len = source[0].length; //整数的长度  \n            for (i = 1; i <= len; i++) {  \n                var n = source[0].charAt(len - i); //取得某个位数上的数字  \n                var bn = 0;  \n                if (len - i - 1 >= 0) {  \n                    bn = source[0].charAt(len - i - 1); //取得某个位数前一位上的数字  \n                }  \n                sum = sum + Number(n);  \n                if (sum != 0) {  \n                    str = dw[Number(n)].concat(str); //取得该数字对应的大写数字，并插入到str字符串的前面  \n                    if (n == '0') sum = 0;  \n                }  \n                if (len - i - 1 >= 0) { //在数字范围内  \n                    if (k1 != 3) { //加小单位  \n                        if (bn != 0) {  \n                            str = dw1[k1].concat(str);  \n                        }  \n                        k1++;  \n                    } else { //不加小单位，加大单位  \n                        k1 = 0;  \n                        var temp = str.charAt(0);  \n                        if (temp == \"万\" || temp == \"亿\") //若大单位前没有数字则舍去大单位  \n                            str = str.substr(1, str.length - 1);  \n                        str = dw2[k2].concat(str);  \n                        sum = 0;  \n                    }  \n                }  \n                if (k1 == 3) { //小单位到千则大单位进一  \n                    k2++;  \n                }  \n            }  \n            //转换小数部分  \n            var strdig = \"\";  \n            if (dig != \"\") {  \n                var n = dig.charAt(0);  \n                if (n != 0) {  \n                    strdig += dw[Number(n)] + \"角\"; //加数字  \n                }  \n                var n = dig.charAt(1);  \n                if (n != 0) {  \n                    strdig += dw[Number(n)] + \"分\"; //加数字  \n                }  \n            }  \n            str += \"元\" + strdig;  \n        } catch (e) {  \n            return \"0元\";  \n        }  \n        return str;  \n    }  \n    //拆分整数与小数  \n    function splits(tranvalue) {  \n        var value = new Array('', '');  \n        temp = tranvalue.split(\".\");  \n        for (var i = 0; i < temp.length; i++) {  \n            value = temp;  \n        }  \n        return value;  \n    }  \n      \n```\n\n## 数字格式化整理\n```\n //格式化数字  \n    function number_format(number, decimals, dec_point, thousands_sep) {  \n        /* \n        * 参数说明： \n        * number：要格式化的数字 \n        * decimals：保留几位小数 \n        * dec_point：小数点符号 \n        * thousands_sep：千分位符号 \n        * */  \n        number = (number + '').replace(/[^0-9+-Ee.]/g, '');  \n        var n = !isFinite(+number) ? 0 : +number,  \n            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),  \n            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,  \n            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,  \n            s = '',  \n            toFixedFix = function (n, prec) {  \n                var k = Math.pow(10, prec);  \n                return '' + Math.ceil(n * k) / k;  \n            };  \n      \n        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');  \n        var re = /(-?\\d+)(\\d{3})/;  \n        while (re.test(s[0])) {  \n            s[0] = s[0].replace(re, \"$1\" + sep + \"$2\");  \n        }  \n      \n        if ((s[1] || '').length < prec) {  \n            s[1] = s[1] || '';  \n            s[1] += new Array(prec - s[1].length + 1).join('0');  \n        }  \n        return s.join(dec);  \n    }  \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript_base.md","raw":"---\ntitle: javascript 常用方法整理\ndate: 2016-12-31 22:53:28\ncomments: true\ncategories: javascript\ntags: [javascript]\nkeywords: \ndescription: javascript常用的一些方法整理、简单只为整理。\n\n---\n\n## 获取url中的参数\n```\nfunction GetQueryStringRegExp(name,url) {\n    var reg = new RegExp(\"(^|\\\\?|&)\" + name + \"=([^&]*)(\\\\s|&|$)\", \"i\");\n    if (reg.test(url)) return decodeURIComponent(RegExp.$2.replace(/\\+/g, \" \")); return \"\";\n}\n\n```\n## js 绑定事件\n```\nfunction eventBind(obj, eventType, callBack) {\n        if (obj.addEventListener) {\n            obj.addEventListener(eventType, callBack, false);\n        }\n        else if (window.attachEvent) {\n            obj.attachEvent('on' + eventType, callBack);\n        }\n        else {\n            obj['on' + eventType] = callBack;\n        }\n    };\neventBind(document, 'click', bodyClick);\n\n```\n\n## Enter回车提交\n```\n $(\"id\").onkeypress = function (event) {\n    event = (event) ? event : ((window.event) ? window.event : \"\")\n    keyCode = event.keyCode ? event.keyCode : (event.which ? event.which : event.charCode);\n    if (keyCode == 13) {\n        $(\"SubmitLogin\").onclick();\n    }\n }\n```\n## Json对象与Json字符串互转\n\n\n```\n$.parseJSON( jsonstr ); //jQuery.parseJSON(jsonstr),可以将json字符串转换成json对象 \n```\n```\nJSON.parse(jsonstr); //可以将json字符串转换成json对象 \nJSON.stringify(jsonobj); //可以将json对象转换成json对符串 \n```\n\n\n## 金钱金额大小写\n```\n  //金额大写转换函数 transform('123431233132.23')  \n    function transform(tranvalue) {  \n        try {  \n            var i = 1;  \n            var dw2 = new Array(\"\", \"万\", \"亿\"); //大单位  \n            var dw1 = new Array(\"拾\", \"佰\", \"仟\"); //小单位  \n            var dw = new Array(\"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\"); //整数部分用  \n            //以下是小写转换成大写显示在合计大写的文本框中       \n            //分离整数与小数  \n            var source = splits(tranvalue);  \n            var num = source[0];  \n            var dig = source[1];  \n            //转换整数部分  \n            var k1 = 0; //计小单位  \n            var k2 = 0; //计大单位  \n            var sum = 0;  \n            var str = \"\";  \n            var len = source[0].length; //整数的长度  \n            for (i = 1; i <= len; i++) {  \n                var n = source[0].charAt(len - i); //取得某个位数上的数字  \n                var bn = 0;  \n                if (len - i - 1 >= 0) {  \n                    bn = source[0].charAt(len - i - 1); //取得某个位数前一位上的数字  \n                }  \n                sum = sum + Number(n);  \n                if (sum != 0) {  \n                    str = dw[Number(n)].concat(str); //取得该数字对应的大写数字，并插入到str字符串的前面  \n                    if (n == '0') sum = 0;  \n                }  \n                if (len - i - 1 >= 0) { //在数字范围内  \n                    if (k1 != 3) { //加小单位  \n                        if (bn != 0) {  \n                            str = dw1[k1].concat(str);  \n                        }  \n                        k1++;  \n                    } else { //不加小单位，加大单位  \n                        k1 = 0;  \n                        var temp = str.charAt(0);  \n                        if (temp == \"万\" || temp == \"亿\") //若大单位前没有数字则舍去大单位  \n                            str = str.substr(1, str.length - 1);  \n                        str = dw2[k2].concat(str);  \n                        sum = 0;  \n                    }  \n                }  \n                if (k1 == 3) { //小单位到千则大单位进一  \n                    k2++;  \n                }  \n            }  \n            //转换小数部分  \n            var strdig = \"\";  \n            if (dig != \"\") {  \n                var n = dig.charAt(0);  \n                if (n != 0) {  \n                    strdig += dw[Number(n)] + \"角\"; //加数字  \n                }  \n                var n = dig.charAt(1);  \n                if (n != 0) {  \n                    strdig += dw[Number(n)] + \"分\"; //加数字  \n                }  \n            }  \n            str += \"元\" + strdig;  \n        } catch (e) {  \n            return \"0元\";  \n        }  \n        return str;  \n    }  \n    //拆分整数与小数  \n    function splits(tranvalue) {  \n        var value = new Array('', '');  \n        temp = tranvalue.split(\".\");  \n        for (var i = 0; i < temp.length; i++) {  \n            value = temp;  \n        }  \n        return value;  \n    }  \n      \n```\n\n## 数字格式化整理\n```\n //格式化数字  \n    function number_format(number, decimals, dec_point, thousands_sep) {  \n        /* \n        * 参数说明： \n        * number：要格式化的数字 \n        * decimals：保留几位小数 \n        * dec_point：小数点符号 \n        * thousands_sep：千分位符号 \n        * */  \n        number = (number + '').replace(/[^0-9+-Ee.]/g, '');  \n        var n = !isFinite(+number) ? 0 : +number,  \n            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),  \n            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,  \n            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,  \n            s = '',  \n            toFixedFix = function (n, prec) {  \n                var k = Math.pow(10, prec);  \n                return '' + Math.ceil(n * k) / k;  \n            };  \n      \n        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');  \n        var re = /(-?\\d+)(\\d{3})/;  \n        while (re.test(s[0])) {  \n            s[0] = s[0].replace(re, \"$1\" + sep + \"$2\");  \n        }  \n      \n        if ((s[1] || '').length < prec) {  \n            s[1] = s[1] || '';  \n            s[1] += new Array(prec - s[1].length + 1).join('0');  \n        }  \n        return s.join(dec);  \n    }  \n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript_base","published":1,"updated":"2017-01-17T01:41:52.255Z","layout":"post","photos":[],"link":"","_id":"cj4sal694000iek5b403y0xbz","content":"<h2 id=\"获取url中的参数\"><a href=\"#获取url中的参数\" class=\"headerlink\" title=\"获取url中的参数\"></a>获取url中的参数</h2><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetQueryStringRegExp</span>(<span class=\"params\">name,url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|\\\\?|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(\\\\s|&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (reg.test(<span class=\"built_in\">url</span>)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2.</span>replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">\" \"</span>)); <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"js-绑定事件\"><a href=\"#js-绑定事件\" class=\"headerlink\" title=\"js 绑定事件\"></a>js 绑定事件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventBind</span>(<span class=\"params\">obj, eventType, callBack</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj.addEventListener) &#123;</div><div class=\"line\">            obj.addEventListener(eventType, callBack, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">            obj.attachEvent(<span class=\"string\">'on'</span> + eventType, callBack);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            obj[<span class=\"string\">'on'</span> + eventType] = callBack;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">eventBind(<span class=\"built_in\">document</span>, <span class=\"string\">'click'</span>, bodyClick);</div></pre></td></tr></table></figure>\n<h2 id=\"Enter回车提交\"><a href=\"#Enter回车提交\" class=\"headerlink\" title=\"Enter回车提交\"></a>Enter回车提交</h2><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"id\"</span>).onkeypress = function (<span class=\"keyword\">event</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">event</span> = (<span class=\"keyword\">event</span>) ? <span class=\"keyword\">event</span> : ((<span class=\"keyword\">window</span>.<span class=\"keyword\">event</span>) ? <span class=\"keyword\">window</span>.<span class=\"keyword\">event</span> : <span class=\"string\">\"\"</span>)</div><div class=\"line\">   keyCode = <span class=\"keyword\">event</span>.keyCode ? <span class=\"keyword\">event</span>.keyCode : (<span class=\"keyword\">event</span>.which ? <span class=\"keyword\">event</span>.which : <span class=\"keyword\">event</span>.charCode);</div><div class=\"line\">   <span class=\"keyword\">if</span> (keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">       $(<span class=\"string\">\"SubmitLogin\"</span>).onclick();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Json对象与Json字符串互转\"><a href=\"#Json对象与Json字符串互转\" class=\"headerlink\" title=\"Json对象与Json字符串互转\"></a>Json对象与Json字符串互转</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$.</span>parseJSON( jsonstr ); <span class=\"regexp\">//j</span>Query.parseJSON(jsonstr),可以将json字符串转换成json对象</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(jsonstr); <span class=\"comment\">//可以将json字符串转换成json对象 </span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(jsonobj); <span class=\"comment\">//可以将json对象转换成json对符串</span></div></pre></td></tr></table></figure>\n<h2 id=\"金钱金额大小写\"><a href=\"#金钱金额大小写\" class=\"headerlink\" title=\"金钱金额大小写\"></a>金钱金额大小写</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//金额大写转换函数 transform('123431233132.23')  </span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">tranvalue</span>) </span>&#123;  </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">          <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> dw2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"\"</span>, <span class=\"string\">\"万\"</span>, <span class=\"string\">\"亿\"</span>); <span class=\"comment\">//大单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> dw1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"拾\"</span>, <span class=\"string\">\"佰\"</span>, <span class=\"string\">\"仟\"</span>); <span class=\"comment\">//小单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> dw = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"零\"</span>, <span class=\"string\">\"壹\"</span>, <span class=\"string\">\"贰\"</span>, <span class=\"string\">\"叁\"</span>, <span class=\"string\">\"肆\"</span>, <span class=\"string\">\"伍\"</span>, <span class=\"string\">\"陆\"</span>, <span class=\"string\">\"柒\"</span>, <span class=\"string\">\"捌\"</span>, <span class=\"string\">\"玖\"</span>); <span class=\"comment\">//整数部分用  </span></div><div class=\"line\">          <span class=\"comment\">//以下是小写转换成大写显示在合计大写的文本框中       </span></div><div class=\"line\">          <span class=\"comment\">//分离整数与小数  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> source = splits(tranvalue);  </div><div class=\"line\">          <span class=\"keyword\">var</span> num = source[<span class=\"number\">0</span>];  </div><div class=\"line\">          <span class=\"keyword\">var</span> dig = source[<span class=\"number\">1</span>];  </div><div class=\"line\">          <span class=\"comment\">//转换整数部分  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> k1 = <span class=\"number\">0</span>; <span class=\"comment\">//计小单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> k2 = <span class=\"number\">0</span>; <span class=\"comment\">//计大单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> len = source[<span class=\"number\">0</span>].length; <span class=\"comment\">//整数的长度  </span></div><div class=\"line\">          <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= len; i++) &#123;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = source[<span class=\"number\">0</span>].charAt(len - i); <span class=\"comment\">//取得某个位数上的数字  </span></div><div class=\"line\">              <span class=\"keyword\">var</span> bn = <span class=\"number\">0</span>;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (len - i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  bn = source[<span class=\"number\">0</span>].charAt(len - i - <span class=\"number\">1</span>); <span class=\"comment\">//取得某个位数前一位上的数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">              sum = sum + <span class=\"built_in\">Number</span>(n);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (sum != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  str = dw[<span class=\"built_in\">Number</span>(n)].concat(str); <span class=\"comment\">//取得该数字对应的大写数字，并插入到str字符串的前面  </span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (n == <span class=\"string\">'0'</span>) sum = <span class=\"number\">0</span>;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (len - i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">//在数字范围内  </span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (k1 != <span class=\"number\">3</span>) &#123; <span class=\"comment\">//加小单位  </span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (bn != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                          str = dw1[k1].concat(str);  </div><div class=\"line\">                      &#125;  </div><div class=\"line\">                      k1++;  </div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//不加小单位，加大单位  </span></div><div class=\"line\">                      k1 = <span class=\"number\">0</span>;  </div><div class=\"line\">                      <span class=\"keyword\">var</span> temp = str.charAt(<span class=\"number\">0</span>);  </div><div class=\"line\">                      <span class=\"keyword\">if</span> (temp == <span class=\"string\">\"万\"</span> || temp == <span class=\"string\">\"亿\"</span>) <span class=\"comment\">//若大单位前没有数字则舍去大单位  </span></div><div class=\"line\">                          str = str.substr(<span class=\"number\">1</span>, str.length - <span class=\"number\">1</span>);  </div><div class=\"line\">                      str = dw2[k2].concat(str);  </div><div class=\"line\">                      sum = <span class=\"number\">0</span>;  </div><div class=\"line\">                  &#125;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (k1 == <span class=\"number\">3</span>) &#123; <span class=\"comment\">//小单位到千则大单位进一  </span></div><div class=\"line\">                  k2++;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">          <span class=\"comment\">//转换小数部分  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> strdig = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">          <span class=\"keyword\">if</span> (dig != <span class=\"string\">\"\"</span>) &#123;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = dig.charAt(<span class=\"number\">0</span>);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  strdig += dw[<span class=\"built_in\">Number</span>(n)] + <span class=\"string\">\"角\"</span>; <span class=\"comment\">//加数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = dig.charAt(<span class=\"number\">1</span>);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  strdig += dw[<span class=\"built_in\">Number</span>(n)] + <span class=\"string\">\"分\"</span>; <span class=\"comment\">//加数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">          str += <span class=\"string\">\"元\"</span> + strdig;  </div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;  </div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">\"0元\"</span>;  </div><div class=\"line\">      &#125;  </div><div class=\"line\">      <span class=\"keyword\">return</span> str;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"comment\">//拆分整数与小数  </span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splits</span>(<span class=\"params\">tranvalue</span>) </span>&#123;  </div><div class=\"line\">      <span class=\"keyword\">var</span> value = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">''</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">      temp = tranvalue.split(<span class=\"string\">\".\"</span>);  </div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;  </div><div class=\"line\">          value = temp;  </div><div class=\"line\">      &#125;  </div><div class=\"line\">      <span class=\"keyword\">return</span> value;  </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数字格式化整理\"><a href=\"#数字格式化整理\" class=\"headerlink\" title=\"数字格式化整理\"></a>数字格式化整理</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式化数字  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number_format</span>(<span class=\"params\"><span class=\"built_in\">number</span>, decimals, dec_point, thousands_sep</span>) </span>&#123;  </div><div class=\"line\">       <span class=\"comment\">/* </span></div><div class=\"line\">       * 参数说明： </div><div class=\"line\">       * number：要格式化的数字 </div><div class=\"line\">       * decimals：保留几位小数 </div><div class=\"line\">       * dec_point：小数点符号 </div><div class=\"line\">       * thousands_sep：千分位符号 </div><div class=\"line\">       * */  </div><div class=\"line\">       <span class=\"built_in\">number</span> = (<span class=\"built_in\">number</span> + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[^0-9+-Ee.]/g</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">       <span class=\"keyword\">var</span> n = !<span class=\"built_in\">isFinite</span>(+<span class=\"built_in\">number</span>) ? <span class=\"number\">0</span> : +<span class=\"built_in\">number</span>,  </div><div class=\"line\">           prec = !<span class=\"built_in\">isFinite</span>(+decimals) ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.abs(decimals),  </div><div class=\"line\">           sep = (<span class=\"keyword\">typeof</span> thousands_sep === <span class=\"string\">'undefined'</span>) ? <span class=\"string\">','</span> : thousands_sep,  </div><div class=\"line\">           dec = (<span class=\"keyword\">typeof</span> dec_point === <span class=\"string\">'undefined'</span>) ? <span class=\"string\">'.'</span> : dec_point,  </div><div class=\"line\">           s = <span class=\"string\">''</span>,  </div><div class=\"line\">           toFixedFix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, prec</span>) </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">var</span> k = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, prec);  </div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.ceil(n * k) / k;  </div><div class=\"line\">           &#125;;  </div><div class=\"line\">     </div><div class=\"line\">       s = (prec ? toFixedFix(n, prec) : <span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.round(n)).split(<span class=\"string\">'.'</span>);  </div><div class=\"line\">       <span class=\"keyword\">var</span> re = <span class=\"regexp\">/(-?\\d+)(\\d&#123;3&#125;)/</span>;  </div><div class=\"line\">       <span class=\"keyword\">while</span> (re.test(s[<span class=\"number\">0</span>])) &#123;  </div><div class=\"line\">           s[<span class=\"number\">0</span>] = s[<span class=\"number\">0</span>].replace(re, <span class=\"string\">\"$1\"</span> + sep + <span class=\"string\">\"$2\"</span>);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">     </div><div class=\"line\">       <span class=\"keyword\">if</span> ((s[<span class=\"number\">1</span>] || <span class=\"string\">''</span>).length &lt; prec) &#123;  </div><div class=\"line\">           s[<span class=\"number\">1</span>] = s[<span class=\"number\">1</span>] || <span class=\"string\">''</span>;  </div><div class=\"line\">           s[<span class=\"number\">1</span>] += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(prec - s[<span class=\"number\">1</span>].length + <span class=\"number\">1</span>).join(<span class=\"string\">'0'</span>);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">       <span class=\"keyword\">return</span> s.join(dec);  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"获取url中的参数\"><a href=\"#获取url中的参数\" class=\"headerlink\" title=\"获取url中的参数\"></a>获取url中的参数</h2><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetQueryStringRegExp</span>(<span class=\"params\">name,url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|\\\\?|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(\\\\s|&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (reg.test(<span class=\"built_in\">url</span>)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2.</span>replace(<span class=\"regexp\">/\\+/g</span>, <span class=\"string\">\" \"</span>)); <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"js-绑定事件\"><a href=\"#js-绑定事件\" class=\"headerlink\" title=\"js 绑定事件\"></a>js 绑定事件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventBind</span>(<span class=\"params\">obj, eventType, callBack</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj.addEventListener) &#123;</div><div class=\"line\">            obj.addEventListener(eventType, callBack, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">            obj.attachEvent(<span class=\"string\">'on'</span> + eventType, callBack);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            obj[<span class=\"string\">'on'</span> + eventType] = callBack;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">eventBind(<span class=\"built_in\">document</span>, <span class=\"string\">'click'</span>, bodyClick);</div></pre></td></tr></table></figure>\n<h2 id=\"Enter回车提交\"><a href=\"#Enter回车提交\" class=\"headerlink\" title=\"Enter回车提交\"></a>Enter回车提交</h2><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"id\"</span>).onkeypress = function (<span class=\"keyword\">event</span>) &#123;</div><div class=\"line\">   <span class=\"keyword\">event</span> = (<span class=\"keyword\">event</span>) ? <span class=\"keyword\">event</span> : ((<span class=\"keyword\">window</span>.<span class=\"keyword\">event</span>) ? <span class=\"keyword\">window</span>.<span class=\"keyword\">event</span> : <span class=\"string\">\"\"</span>)</div><div class=\"line\">   keyCode = <span class=\"keyword\">event</span>.keyCode ? <span class=\"keyword\">event</span>.keyCode : (<span class=\"keyword\">event</span>.which ? <span class=\"keyword\">event</span>.which : <span class=\"keyword\">event</span>.charCode);</div><div class=\"line\">   <span class=\"keyword\">if</span> (keyCode == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">       $(<span class=\"string\">\"SubmitLogin\"</span>).onclick();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Json对象与Json字符串互转\"><a href=\"#Json对象与Json字符串互转\" class=\"headerlink\" title=\"Json对象与Json字符串互转\"></a>Json对象与Json字符串互转</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$.</span>parseJSON( jsonstr ); <span class=\"regexp\">//j</span>Query.parseJSON(jsonstr),可以将json字符串转换成json对象</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(jsonstr); <span class=\"comment\">//可以将json字符串转换成json对象 </span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(jsonobj); <span class=\"comment\">//可以将json对象转换成json对符串</span></div></pre></td></tr></table></figure>\n<h2 id=\"金钱金额大小写\"><a href=\"#金钱金额大小写\" class=\"headerlink\" title=\"金钱金额大小写\"></a>金钱金额大小写</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//金额大写转换函数 transform('123431233132.23')  </span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">tranvalue</span>) </span>&#123;  </div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">          <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> dw2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"\"</span>, <span class=\"string\">\"万\"</span>, <span class=\"string\">\"亿\"</span>); <span class=\"comment\">//大单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> dw1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"拾\"</span>, <span class=\"string\">\"佰\"</span>, <span class=\"string\">\"仟\"</span>); <span class=\"comment\">//小单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> dw = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">\"零\"</span>, <span class=\"string\">\"壹\"</span>, <span class=\"string\">\"贰\"</span>, <span class=\"string\">\"叁\"</span>, <span class=\"string\">\"肆\"</span>, <span class=\"string\">\"伍\"</span>, <span class=\"string\">\"陆\"</span>, <span class=\"string\">\"柒\"</span>, <span class=\"string\">\"捌\"</span>, <span class=\"string\">\"玖\"</span>); <span class=\"comment\">//整数部分用  </span></div><div class=\"line\">          <span class=\"comment\">//以下是小写转换成大写显示在合计大写的文本框中       </span></div><div class=\"line\">          <span class=\"comment\">//分离整数与小数  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> source = splits(tranvalue);  </div><div class=\"line\">          <span class=\"keyword\">var</span> num = source[<span class=\"number\">0</span>];  </div><div class=\"line\">          <span class=\"keyword\">var</span> dig = source[<span class=\"number\">1</span>];  </div><div class=\"line\">          <span class=\"comment\">//转换整数部分  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> k1 = <span class=\"number\">0</span>; <span class=\"comment\">//计小单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> k2 = <span class=\"number\">0</span>; <span class=\"comment\">//计大单位  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">          <span class=\"keyword\">var</span> len = source[<span class=\"number\">0</span>].length; <span class=\"comment\">//整数的长度  </span></div><div class=\"line\">          <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= len; i++) &#123;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = source[<span class=\"number\">0</span>].charAt(len - i); <span class=\"comment\">//取得某个位数上的数字  </span></div><div class=\"line\">              <span class=\"keyword\">var</span> bn = <span class=\"number\">0</span>;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (len - i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  bn = source[<span class=\"number\">0</span>].charAt(len - i - <span class=\"number\">1</span>); <span class=\"comment\">//取得某个位数前一位上的数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">              sum = sum + <span class=\"built_in\">Number</span>(n);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (sum != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  str = dw[<span class=\"built_in\">Number</span>(n)].concat(str); <span class=\"comment\">//取得该数字对应的大写数字，并插入到str字符串的前面  </span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (n == <span class=\"string\">'0'</span>) sum = <span class=\"number\">0</span>;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (len - i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">//在数字范围内  </span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (k1 != <span class=\"number\">3</span>) &#123; <span class=\"comment\">//加小单位  </span></div><div class=\"line\">                      <span class=\"keyword\">if</span> (bn != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                          str = dw1[k1].concat(str);  </div><div class=\"line\">                      &#125;  </div><div class=\"line\">                      k1++;  </div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//不加小单位，加大单位  </span></div><div class=\"line\">                      k1 = <span class=\"number\">0</span>;  </div><div class=\"line\">                      <span class=\"keyword\">var</span> temp = str.charAt(<span class=\"number\">0</span>);  </div><div class=\"line\">                      <span class=\"keyword\">if</span> (temp == <span class=\"string\">\"万\"</span> || temp == <span class=\"string\">\"亿\"</span>) <span class=\"comment\">//若大单位前没有数字则舍去大单位  </span></div><div class=\"line\">                          str = str.substr(<span class=\"number\">1</span>, str.length - <span class=\"number\">1</span>);  </div><div class=\"line\">                      str = dw2[k2].concat(str);  </div><div class=\"line\">                      sum = <span class=\"number\">0</span>;  </div><div class=\"line\">                  &#125;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">if</span> (k1 == <span class=\"number\">3</span>) &#123; <span class=\"comment\">//小单位到千则大单位进一  </span></div><div class=\"line\">                  k2++;  </div><div class=\"line\">              &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">          <span class=\"comment\">//转换小数部分  </span></div><div class=\"line\">          <span class=\"keyword\">var</span> strdig = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">          <span class=\"keyword\">if</span> (dig != <span class=\"string\">\"\"</span>) &#123;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = dig.charAt(<span class=\"number\">0</span>);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  strdig += dw[<span class=\"built_in\">Number</span>(n)] + <span class=\"string\">\"角\"</span>; <span class=\"comment\">//加数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">              <span class=\"keyword\">var</span> n = dig.charAt(<span class=\"number\">1</span>);  </div><div class=\"line\">              <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">                  strdig += dw[<span class=\"built_in\">Number</span>(n)] + <span class=\"string\">\"分\"</span>; <span class=\"comment\">//加数字  </span></div><div class=\"line\">              &#125;  </div><div class=\"line\">          &#125;  </div><div class=\"line\">          str += <span class=\"string\">\"元\"</span> + strdig;  </div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;  </div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">\"0元\"</span>;  </div><div class=\"line\">      &#125;  </div><div class=\"line\">      <span class=\"keyword\">return</span> str;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"comment\">//拆分整数与小数  </span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splits</span>(<span class=\"params\">tranvalue</span>) </span>&#123;  </div><div class=\"line\">      <span class=\"keyword\">var</span> value = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">''</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">      temp = tranvalue.split(<span class=\"string\">\".\"</span>);  </div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; temp.length; i++) &#123;  </div><div class=\"line\">          value = temp;  </div><div class=\"line\">      &#125;  </div><div class=\"line\">      <span class=\"keyword\">return</span> value;  </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"数字格式化整理\"><a href=\"#数字格式化整理\" class=\"headerlink\" title=\"数字格式化整理\"></a>数字格式化整理</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式化数字  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">number_format</span>(<span class=\"params\"><span class=\"built_in\">number</span>, decimals, dec_point, thousands_sep</span>) </span>&#123;  </div><div class=\"line\">       <span class=\"comment\">/* </div><div class=\"line\">       * 参数说明： </div><div class=\"line\">       * number：要格式化的数字 </div><div class=\"line\">       * decimals：保留几位小数 </div><div class=\"line\">       * dec_point：小数点符号 </div><div class=\"line\">       * thousands_sep：千分位符号 </div><div class=\"line\">       * */</span>  </div><div class=\"line\">       <span class=\"built_in\">number</span> = (<span class=\"built_in\">number</span> + <span class=\"string\">''</span>).replace(<span class=\"regexp\">/[^0-9+-Ee.]/g</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">       <span class=\"keyword\">var</span> n = !<span class=\"built_in\">isFinite</span>(+<span class=\"built_in\">number</span>) ? <span class=\"number\">0</span> : +<span class=\"built_in\">number</span>,  </div><div class=\"line\">           prec = !<span class=\"built_in\">isFinite</span>(+decimals) ? <span class=\"number\">0</span> : <span class=\"built_in\">Math</span>.abs(decimals),  </div><div class=\"line\">           sep = (<span class=\"keyword\">typeof</span> thousands_sep === <span class=\"string\">'undefined'</span>) ? <span class=\"string\">','</span> : thousands_sep,  </div><div class=\"line\">           dec = (<span class=\"keyword\">typeof</span> dec_point === <span class=\"string\">'undefined'</span>) ? <span class=\"string\">'.'</span> : dec_point,  </div><div class=\"line\">           s = <span class=\"string\">''</span>,  </div><div class=\"line\">           toFixedFix = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, prec</span>) </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">var</span> k = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, prec);  </div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.ceil(n * k) / k;  </div><div class=\"line\">           &#125;;  </div><div class=\"line\">     </div><div class=\"line\">       s = (prec ? toFixedFix(n, prec) : <span class=\"string\">''</span> + <span class=\"built_in\">Math</span>.round(n)).split(<span class=\"string\">'.'</span>);  </div><div class=\"line\">       <span class=\"keyword\">var</span> re = <span class=\"regexp\">/(-?\\d+)(\\d&#123;3&#125;)/</span>;  </div><div class=\"line\">       <span class=\"keyword\">while</span> (re.test(s[<span class=\"number\">0</span>])) &#123;  </div><div class=\"line\">           s[<span class=\"number\">0</span>] = s[<span class=\"number\">0</span>].replace(re, <span class=\"string\">\"$1\"</span> + sep + <span class=\"string\">\"$2\"</span>);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">     </div><div class=\"line\">       <span class=\"keyword\">if</span> ((s[<span class=\"number\">1</span>] || <span class=\"string\">''</span>).length &lt; prec) &#123;  </div><div class=\"line\">           s[<span class=\"number\">1</span>] = s[<span class=\"number\">1</span>] || <span class=\"string\">''</span>;  </div><div class=\"line\">           s[<span class=\"number\">1</span>] += <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(prec - s[<span class=\"number\">1</span>].length + <span class=\"number\">1</span>).join(<span class=\"string\">'0'</span>);  </div><div class=\"line\">       &#125;  </div><div class=\"line\">       <span class=\"keyword\">return</span> s.join(dec);  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n"},{"title":"Node.js+Express+MySQL 操作数据库小记","date":"2017-05-21T05:04:28.000Z","comments":1,"keywords":null,"description":"随著前端届技术大百花齐放, node已俨然成为前端开发中最具牛X的,里程碑式的技术之一,了掌握 node.js,已是每个前端程序员必备的技能了,近期接触 node.js操作 MySQL 数据库,进一步的加深对 node.js 的认识,随笔记录之","_content":"\n## 一、node MySQL 的安装\n\n\n1.进入项目命令行安装,我这里使用的是 cnpm 安装。\n```\ncnpm install mysql \n\n```\n\n ![node mysql](https://dn-coding-net-production-pp.qbox.me/a4b9cf89-08e9-4cc7-a8f0-850959fc5ca8.png) \n\n2.在安装成功 MySQL 之后就是编写相关MySQL配置了,我写了一个mysql.js文件,node.js的mysql驱动\n\n```\n//mysql.js\nvar mysql = require('mysql'); //调用MySQL模块\n//创建一个connection\nvar connection = mysql.createConnection({\n    host: '127.0.0.1', //主机\n    user: 'root',     //数据库用户名\n    password: '123456',     //数据库密码\n    port: '3306',       \n    database: 'tpcms', //数据库名称\n    charset: 'UTF8_GENERAL_CI' //数据库编码\n});\n\nmodule.exports = connection  \n\n```\n这样一个简单的数据库连接驱动就写好了,当然需要填写正确相关配置 数据库用户名、密码、数据库名称,这里要注意的是 charset 编码的问题,一开始我没有添加,返现返回回来的数据是乱码的,将 配置 exports,再其他文件就可以导入使用了\n\n\n3.我现在再新建一个select.js select 操作查询数据库的文件\n\n```\n//select.js\nconst express = require('express');\nconst http = require('http');\nconst app = express()\nvar router = express.Router();\nconst connection = require('./sql');//导入mysq配置文件\n\n//创建一个connection连接\nconnection.connect(function(err) {\n    if (err) {\n        console.log('[query] - :' + err);\n        return;\n    }\n    console.log('[connection connect]  succeed!'); //如果连接成功 控制台输出 success 了\n});\n\n\napp.get('/', function(req, res) {\n    var res = res;\n    var req = req;\n\n    //执行SQL语句,这里是一条简单的MySQL查询语句\n    var sql = \"select description, title,content,time from tp_post\";\n    connection.query(sql, function(err, rows, fields) {\n        if (err) {\n            console.log('[query] - :' + err);\n            return;\n        }\n        console.log(rows)\n        res.send(rows)  //这里在页面上输出数据\n        console.log('The solution is: ', rows[0].solution);\n    });\n})\n \n\n module.exports = app\n```\n好的,select.js 文件编写好了，expor t导出，在 app.js 入口文件使用\n\n\n4.编写配置好app.js入口文件了\n```\nconst express = require('express');\nconst http = require('http');\nconst app = express()\nvar router = express.Router();\n\n//配置路由 这样访问localhost:3000/select就能访问的接口了\napp.use('/select', require('./api/select'))\napp.use(router);\napp.listen(3000);\nconsole.log(3000);\n```\nok,现在在命令行启动项目了,进入项目目录,执行 node app,项目监听的3000端口\n```\nnode app\n```\n我这里是出现 启动成功,也就是输出了select.js文件里面的这一句\n```\nconsole.log('[connection connect]  succeed!'); //如果连接成功 控制台输出success了\n```\n![图片](https://dn-coding-net-production-pp.qbox.me/2ea0b5ff-fba4-40c0-9557-6f8bc6c784ff.png) \n运行成功了，我在浏览器上输入 访问地址 localhost:3000/mysql,在页面上返回的就是以下json 数据了\n\n![json](https://dn-coding-net-production-pp.qbox.me/1c79ba48-7245-4f81-9a2d-8d1352974647.png) \n\n\n到这里为止，一个简单的node.js+Express 操作MySQL就完成了，一个小demo作为自己的总结记录。\n\n\n\n\n文献参看\nhttp://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&utm_medium=referral\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node_mysql.md","raw":"---\ntitle: Node.js+Express+MySQL 操作数据库小记\ndate: 2017-05-21 13:04:28\ncomments: true\ncategories: Node\ntags: [node,javascript]\nkeywords: \ndescription: 随著前端届技术大百花齐放, node已俨然成为前端开发中最具牛X的,里程碑式的技术之一,了掌握 node.js,已是每个前端程序员必备的技能了,近期接触 node.js操作 MySQL 数据库,进一步的加深对 node.js 的认识,随笔记录之\n---\n\n## 一、node MySQL 的安装\n\n\n1.进入项目命令行安装,我这里使用的是 cnpm 安装。\n```\ncnpm install mysql \n\n```\n\n ![node mysql](https://dn-coding-net-production-pp.qbox.me/a4b9cf89-08e9-4cc7-a8f0-850959fc5ca8.png) \n\n2.在安装成功 MySQL 之后就是编写相关MySQL配置了,我写了一个mysql.js文件,node.js的mysql驱动\n\n```\n//mysql.js\nvar mysql = require('mysql'); //调用MySQL模块\n//创建一个connection\nvar connection = mysql.createConnection({\n    host: '127.0.0.1', //主机\n    user: 'root',     //数据库用户名\n    password: '123456',     //数据库密码\n    port: '3306',       \n    database: 'tpcms', //数据库名称\n    charset: 'UTF8_GENERAL_CI' //数据库编码\n});\n\nmodule.exports = connection  \n\n```\n这样一个简单的数据库连接驱动就写好了,当然需要填写正确相关配置 数据库用户名、密码、数据库名称,这里要注意的是 charset 编码的问题,一开始我没有添加,返现返回回来的数据是乱码的,将 配置 exports,再其他文件就可以导入使用了\n\n\n3.我现在再新建一个select.js select 操作查询数据库的文件\n\n```\n//select.js\nconst express = require('express');\nconst http = require('http');\nconst app = express()\nvar router = express.Router();\nconst connection = require('./sql');//导入mysq配置文件\n\n//创建一个connection连接\nconnection.connect(function(err) {\n    if (err) {\n        console.log('[query] - :' + err);\n        return;\n    }\n    console.log('[connection connect]  succeed!'); //如果连接成功 控制台输出 success 了\n});\n\n\napp.get('/', function(req, res) {\n    var res = res;\n    var req = req;\n\n    //执行SQL语句,这里是一条简单的MySQL查询语句\n    var sql = \"select description, title,content,time from tp_post\";\n    connection.query(sql, function(err, rows, fields) {\n        if (err) {\n            console.log('[query] - :' + err);\n            return;\n        }\n        console.log(rows)\n        res.send(rows)  //这里在页面上输出数据\n        console.log('The solution is: ', rows[0].solution);\n    });\n})\n \n\n module.exports = app\n```\n好的,select.js 文件编写好了，expor t导出，在 app.js 入口文件使用\n\n\n4.编写配置好app.js入口文件了\n```\nconst express = require('express');\nconst http = require('http');\nconst app = express()\nvar router = express.Router();\n\n//配置路由 这样访问localhost:3000/select就能访问的接口了\napp.use('/select', require('./api/select'))\napp.use(router);\napp.listen(3000);\nconsole.log(3000);\n```\nok,现在在命令行启动项目了,进入项目目录,执行 node app,项目监听的3000端口\n```\nnode app\n```\n我这里是出现 启动成功,也就是输出了select.js文件里面的这一句\n```\nconsole.log('[connection connect]  succeed!'); //如果连接成功 控制台输出success了\n```\n![图片](https://dn-coding-net-production-pp.qbox.me/2ea0b5ff-fba4-40c0-9557-6f8bc6c784ff.png) \n运行成功了，我在浏览器上输入 访问地址 localhost:3000/mysql,在页面上返回的就是以下json 数据了\n\n![json](https://dn-coding-net-production-pp.qbox.me/1c79ba48-7245-4f81-9a2d-8d1352974647.png) \n\n\n到这里为止，一个简单的node.js+Express 操作MySQL就完成了，一个小demo作为自己的总结记录。\n\n\n\n\n文献参看\nhttp://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&utm_medium=referral\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node_mysql","published":1,"updated":"2017-05-22T01:16:02.469Z","layout":"post","photos":[],"link":"","_id":"cj4sal696000jek5bn0gar53r","content":"<h2 id=\"一、node-MySQL-的安装\"><a href=\"#一、node-MySQL-的安装\" class=\"headerlink\" title=\"一、node MySQL 的安装\"></a>一、node MySQL 的安装</h2><p>1.进入项目命令行安装,我这里使用的是 cnpm 安装。<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm <span class=\"keyword\">install</span> mysql</div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/a4b9cf89-08e9-4cc7-a8f0-850959fc5ca8.png\" alt=\"node mysql\"> </p>\n<p>2.在安装成功 MySQL 之后就是编写相关MySQL配置了,我写了一个mysql.js文件,node.js的mysql驱动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mysql.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">//调用MySQL模块</span></div><div class=\"line\"><span class=\"comment\">//创建一个connection</span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>, <span class=\"comment\">//主机</span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,     <span class=\"comment\">//数据库用户名</span></div><div class=\"line\">    password: <span class=\"string\">'123456'</span>,     <span class=\"comment\">//数据库密码</span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,       </div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'tpcms'</span>, <span class=\"comment\">//数据库名称</span></div><div class=\"line\">    charset: <span class=\"string\">'UTF8_GENERAL_CI'</span> <span class=\"comment\">//数据库编码</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = connection</div></pre></td></tr></table></figure>\n<p>这样一个简单的数据库连接驱动就写好了,当然需要填写正确相关配置 数据库用户名、密码、数据库名称,这里要注意的是 charset 编码的问题,一开始我没有添加,返现返回回来的数据是乱码的,将 配置 exports,再其他文件就可以导入使用了</p>\n<p>3.我现在再新建一个select.js select 操作查询数据库的文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//select.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">const</span> connection = <span class=\"built_in\">require</span>(<span class=\"string\">'./sql'</span>);<span class=\"comment\">//导入mysq配置文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个connection连接</span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>); <span class=\"comment\">//如果连接成功 控制台输出 success 了</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> res = res;</div><div class=\"line\">    <span class=\"keyword\">var</span> req = req;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//执行SQL语句,这里是一条简单的MySQL查询语句</span></div><div class=\"line\">    <span class=\"keyword\">var</span> sql = <span class=\"string\">\"select description, title,content,time from tp_post\"</span>;</div><div class=\"line\">    connection.query(sql, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, rows, fields</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(rows)</div><div class=\"line\">        res.send(rows)  <span class=\"comment\">//这里在页面上输出数据</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>, rows[<span class=\"number\">0</span>].solution);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"> <span class=\"built_in\">module</span>.exports = app</div></pre></td></tr></table></figure>\n<p>好的,select.js 文件编写好了，expor t导出，在 app.js 入口文件使用</p>\n<p>4.编写配置好app.js入口文件了<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"keyword\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置路由 这样访问localhost:3000/select就能访问的接口了</span></div><div class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"string\">'/select'</span>, <span class=\"keyword\">require</span>(<span class=\"string\">'./api/select'</span>))</div><div class=\"line\">app.<span class=\"keyword\">use</span>(router);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\">console.log(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>ok,现在在命令行启动项目了,进入项目目录,执行 node app,项目监听的3000端口<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">app</span></div></pre></td></tr></table></figure></p>\n<p>我这里是出现 启动成功,也就是输出了select.js文件里面的这一句<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built-in\">log</span>(<span class=\"string\">'[connection connect]  succeed!'</span>); <span class=\"comment\">//如果连接成功 控制台输出success了</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/2ea0b5ff-fba4-40c0-9557-6f8bc6c784ff.png\" alt=\"图片\"><br>运行成功了，我在浏览器上输入 访问地址 localhost:3000/mysql,在页面上返回的就是以下json 数据了</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/1c79ba48-7245-4f81-9a2d-8d1352974647.png\" alt=\"json\"> </p>\n<p>到这里为止，一个简单的node.js+Express 操作MySQL就完成了，一个小demo作为自己的总结记录。</p>\n<p>文献参看<br><a href=\"http://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">http://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&amp;utm_medium=referral</a></p>\n","excerpt":"","more":"<h2 id=\"一、node-MySQL-的安装\"><a href=\"#一、node-MySQL-的安装\" class=\"headerlink\" title=\"一、node MySQL 的安装\"></a>一、node MySQL 的安装</h2><p>1.进入项目命令行安装,我这里使用的是 cnpm 安装。<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm <span class=\"keyword\">install</span> mysql</div></pre></td></tr></table></figure></p>\n<p> <img src=\"https://dn-coding-net-production-pp.qbox.me/a4b9cf89-08e9-4cc7-a8f0-850959fc5ca8.png\" alt=\"node mysql\"> </p>\n<p>2.在安装成功 MySQL 之后就是编写相关MySQL配置了,我写了一个mysql.js文件,node.js的mysql驱动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//mysql.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">//调用MySQL模块</span></div><div class=\"line\"><span class=\"comment\">//创建一个connection</span></div><div class=\"line\"><span class=\"keyword\">var</span> connection = mysql.createConnection(&#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>, <span class=\"comment\">//主机</span></div><div class=\"line\">    user: <span class=\"string\">'root'</span>,     <span class=\"comment\">//数据库用户名</span></div><div class=\"line\">    password: <span class=\"string\">'123456'</span>,     <span class=\"comment\">//数据库密码</span></div><div class=\"line\">    port: <span class=\"string\">'3306'</span>,       </div><div class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">'tpcms'</span>, <span class=\"comment\">//数据库名称</span></div><div class=\"line\">    charset: <span class=\"string\">'UTF8_GENERAL_CI'</span> <span class=\"comment\">//数据库编码</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = connection</div></pre></td></tr></table></figure>\n<p>这样一个简单的数据库连接驱动就写好了,当然需要填写正确相关配置 数据库用户名、密码、数据库名称,这里要注意的是 charset 编码的问题,一开始我没有添加,返现返回回来的数据是乱码的,将 配置 exports,再其他文件就可以导入使用了</p>\n<p>3.我现在再新建一个select.js select 操作查询数据库的文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//select.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">const</span> connection = <span class=\"built_in\">require</span>(<span class=\"string\">'./sql'</span>);<span class=\"comment\">//导入mysq配置文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建一个connection连接</span></div><div class=\"line\">connection.connect(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[connection connect]  succeed!'</span>); <span class=\"comment\">//如果连接成功 控制台输出 success 了</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> res = res;</div><div class=\"line\">    <span class=\"keyword\">var</span> req = req;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//执行SQL语句,这里是一条简单的MySQL查询语句</span></div><div class=\"line\">    <span class=\"keyword\">var</span> sql = <span class=\"string\">\"select description, title,content,time from tp_post\"</span>;</div><div class=\"line\">    connection.query(sql, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, rows, fields</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'[query] - :'</span> + err);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(rows)</div><div class=\"line\">        res.send(rows)  <span class=\"comment\">//这里在页面上输出数据</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'The solution is: '</span>, rows[<span class=\"number\">0</span>].solution);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\"> <span class=\"built_in\">module</span>.exports = app</div></pre></td></tr></table></figure>\n<p>好的,select.js 文件编写好了，expor t导出，在 app.js 入口文件使用</p>\n<p>4.编写配置好app.js入口文件了<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"keyword\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置路由 这样访问localhost:3000/select就能访问的接口了</span></div><div class=\"line\">app.<span class=\"keyword\">use</span>(<span class=\"string\">'/select'</span>, <span class=\"keyword\">require</span>(<span class=\"string\">'./api/select'</span>))</div><div class=\"line\">app.<span class=\"keyword\">use</span>(router);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\">console.log(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>ok,现在在命令行启动项目了,进入项目目录,执行 node app,项目监听的3000端口<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">app</span></div></pre></td></tr></table></figure></p>\n<p>我这里是出现 启动成功,也就是输出了select.js文件里面的这一句<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built-in\">log</span>(<span class=\"string\">'[connection connect]  succeed!'</span>); <span class=\"comment\">//如果连接成功 控制台输出success了</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/2ea0b5ff-fba4-40c0-9557-6f8bc6c784ff.png\" alt=\"图片\"><br>运行成功了，我在浏览器上输入 访问地址 localhost:3000/mysql,在页面上返回的就是以下json 数据了</p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/1c79ba48-7245-4f81-9a2d-8d1352974647.png\" alt=\"json\"> </p>\n<p>到这里为止，一个简单的node.js+Express 操作MySQL就完成了，一个小demo作为自己的总结记录。</p>\n<p>文献参看<br><a href=\"http://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&amp;utm_medium=referral\">http://www.oschina.net/translate/node-mysql-tutorial?utm_source=tuicool&amp;utm_medium=referral</a></p>\n"},{"title":"php设置跨域问题,允许指定域名能够跨域","date":"2017-05-25T12:34:28.000Z","comments":1,"keywords":null,"description":"这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用,写好的接口只想自己指定的域名下能够访问,所以需要怎么去做呢?","_content":"\n\n### php设置跨域问题\n>这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用，写好的接口只想自己指定的域名下能够访问、所以需要怎么去做呢？\n\n####  为什么会跨域、造成跨域的原因是什么\n\n浏览器的同源策略是浏览器为安全性考虑实施的非常重要的安全策略，从一个域上加载的脚本就不能去访问另外一个域下的文档，所以就会出现下面提示不能跨域问题\n```\nXMLHttpRequest cannot load https://api.it919.cn/public/index.php/api/News/new_detail?postid=CM5VQ6UE0001899N. \nThe 'Access-Control-Allow-Origin' header has a value 'https://code.it919.cn' that is not equal to the supplied origin. Origin 'http://192.168.1.2:800' is therefore not allowed access.\n```\n\n1、允许单个域名访问，也就是指定某个域名能跨域请求php接口\n```\nheader('content-type:application:json;charset=utf8');  \nheader('Access-Control-Allow-Origin:https://code.it919.cn');\nheader('Access-Control-Allow-Methods:*');  \nheader('Access-Control-Allow-Headers:x-requested-with,content-type'); \n```\n主要设置的还是\nheader('Access-Control-Allow-Origin:`https://code.it919.cn`');将其设置为自己跨域的域名，如果允许全部访问的话 设置 `*`\n```\nheader('Access-Control-Allow-Origin:*');\n```\nok这样就能够 访问接口数据不跨域了\n\n2、允许多个域名能够跨域访问接口数据\n指定多个域名（https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面\n```\n$allow_origin = array(  \n    'https://code.it919.cn',\n    'http://www.it919.cn'  \n);  \n```\n\n获取需要访问接口数据的域名\n```\n$origin = isset($_SERVER['HTTP_ORIGIN'])? $_SERVER['HTTP_ORIGIN'] : '';  \n```\n判断该域名是否是在我们定义好的数组里面\n```\nif(in_array($origin, $allow_origin)){  \n    header('Access-Control-Allow-Origin:'.$origin);       \n} \n```\n\n","source":"_posts/php_cross.md","raw":"---\ntitle: php设置跨域问题,允许指定域名能够跨域\ndate: 2017-05-25 20:34:28\ncomments: true\ncategories: php\ntags: [php]\nkeywords:\ndescription: 这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用,写好的接口只想自己指定的域名下能够访问,所以需要怎么去做呢?\n\n---\n\n\n### php设置跨域问题\n>这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用，写好的接口只想自己指定的域名下能够访问、所以需要怎么去做呢？\n\n####  为什么会跨域、造成跨域的原因是什么\n\n浏览器的同源策略是浏览器为安全性考虑实施的非常重要的安全策略，从一个域上加载的脚本就不能去访问另外一个域下的文档，所以就会出现下面提示不能跨域问题\n```\nXMLHttpRequest cannot load https://api.it919.cn/public/index.php/api/News/new_detail?postid=CM5VQ6UE0001899N. \nThe 'Access-Control-Allow-Origin' header has a value 'https://code.it919.cn' that is not equal to the supplied origin. Origin 'http://192.168.1.2:800' is therefore not allowed access.\n```\n\n1、允许单个域名访问，也就是指定某个域名能跨域请求php接口\n```\nheader('content-type:application:json;charset=utf8');  \nheader('Access-Control-Allow-Origin:https://code.it919.cn');\nheader('Access-Control-Allow-Methods:*');  \nheader('Access-Control-Allow-Headers:x-requested-with,content-type'); \n```\n主要设置的还是\nheader('Access-Control-Allow-Origin:`https://code.it919.cn`');将其设置为自己跨域的域名，如果允许全部访问的话 设置 `*`\n```\nheader('Access-Control-Allow-Origin:*');\n```\nok这样就能够 访问接口数据不跨域了\n\n2、允许多个域名能够跨域访问接口数据\n指定多个域名（https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面\n```\n$allow_origin = array(  \n    'https://code.it919.cn',\n    'http://www.it919.cn'  \n);  \n```\n\n获取需要访问接口数据的域名\n```\n$origin = isset($_SERVER['HTTP_ORIGIN'])? $_SERVER['HTTP_ORIGIN'] : '';  \n```\n判断该域名是否是在我们定义好的数组里面\n```\nif(in_array($origin, $allow_origin)){  \n    header('Access-Control-Allow-Origin:'.$origin);       \n} \n```\n\n","slug":"php_cross","published":1,"updated":"2017-06-12T01:35:38.208Z","layout":"post","photos":[],"link":"","_id":"cj4sal69a000nek5bnsx5g8h4","content":"<h3 id=\"php设置跨域问题\"><a href=\"#php设置跨域问题\" class=\"headerlink\" title=\"php设置跨域问题\"></a>php设置跨域问题</h3><blockquote>\n<p>这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用，写好的接口只想自己指定的域名下能够访问、所以需要怎么去做呢？</p>\n</blockquote>\n<h4 id=\"为什么会跨域、造成跨域的原因是什么\"><a href=\"#为什么会跨域、造成跨域的原因是什么\" class=\"headerlink\" title=\"为什么会跨域、造成跨域的原因是什么\"></a>为什么会跨域、造成跨域的原因是什么</h4><p>浏览器的同源策略是浏览器为安全性考虑实施的非常重要的安全策略，从一个域上加载的脚本就不能去访问另外一个域下的文档，所以就会出现下面提示不能跨域问题<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">XMLHttpRequest cannot <span class=\"built_in\">load</span> <span class=\"keyword\">https</span>://api.it919.cn/public/index.php/api/News/new_detail?postid=CM5VQ6UE0001899N. </div><div class=\"line\">The <span class=\"string\">'Access-Control-Allow-Origin'</span> header has <span class=\"keyword\">a</span> <span class=\"built_in\">value</span> <span class=\"string\">'https://code.it919.cn'</span> that is <span class=\"keyword\">not</span> equal <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> supplied origin. Origin <span class=\"string\">'http://192.168.1.2:800'</span> is therefore <span class=\"keyword\">not</span> allowed access.</div></pre></td></tr></table></figure></p>\n<p>1、允许单个域名访问，也就是指定某个域名能跨域请求php接口<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">header('content-type<span class=\"symbol\">:application</span><span class=\"symbol\">:json</span><span class=\"comment\">;charset=utf8');  </span></div><div class=\"line\">header('Access-Control-Allow-Origin<span class=\"symbol\">:https</span><span class=\"symbol\">://code</span>.it919.cn')<span class=\"comment\">;</span></div><div class=\"line\">header('Access-Control-Allow-Methods<span class=\"symbol\">:*</span>')<span class=\"comment\">;  </span></div><div class=\"line\">header('Access-Control-Allow-Headers<span class=\"symbol\">:x-requested-with</span>,content-type')<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>主要设置的还是<br>header(‘Access-Control-Allow-Origin:<code>https://code.it919.cn</code>‘);将其设置为自己跨域的域名，如果允许全部访问的话 设置 <code>*</code><br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">header('Access-Control-Allow-Origin<span class=\"symbol\">:*</span>')<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>ok这样就能够 访问接口数据不跨域了</p>\n<p>2、允许多个域名能够跨域访问接口数据<br>指定多个域名（<a href=\"https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面\" target=\"_blank\" rel=\"external\">https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面</a><br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$allow</span>_origin = array(  </span></div><div class=\"line\">    <span class=\"string\">'https://code.it919.cn'</span>,</div><div class=\"line\">    <span class=\"string\">'http://www.it919.cn'</span>  </div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>获取需要访问接口数据的域名<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$origin = <span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'HTTP_ORIGIN'</span>])? $_SERVER[<span class=\"string\">'HTTP_ORIGIN'</span>] : <span class=\"string\">''</span>;</div></pre></td></tr></table></figure></p>\n<p>判断该域名是否是在我们定义好的数组里面<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(in_array($origin, $allow_origin))&#123;  </div><div class=\"line\">    <span class=\"keyword\">header</span>(<span class=\"string\">'Access-Control-Allow-Origin:'</span>.$origin);       </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"php设置跨域问题\"><a href=\"#php设置跨域问题\" class=\"headerlink\" title=\"php设置跨域问题\"></a>php设置跨域问题</h3><blockquote>\n<p>这段时间使用php写了一些接口来提供给Vue.js 项目学习开发使用，写好的接口只想自己指定的域名下能够访问、所以需要怎么去做呢？</p>\n</blockquote>\n<h4 id=\"为什么会跨域、造成跨域的原因是什么\"><a href=\"#为什么会跨域、造成跨域的原因是什么\" class=\"headerlink\" title=\"为什么会跨域、造成跨域的原因是什么\"></a>为什么会跨域、造成跨域的原因是什么</h4><p>浏览器的同源策略是浏览器为安全性考虑实施的非常重要的安全策略，从一个域上加载的脚本就不能去访问另外一个域下的文档，所以就会出现下面提示不能跨域问题<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">XMLHttpRequest cannot <span class=\"built_in\">load</span> <span class=\"keyword\">https</span>://api.it919.cn/public/index.php/api/News/new_detail?postid=CM5VQ6UE0001899N. </div><div class=\"line\">The <span class=\"string\">'Access-Control-Allow-Origin'</span> header has <span class=\"keyword\">a</span> <span class=\"built_in\">value</span> <span class=\"string\">'https://code.it919.cn'</span> that is <span class=\"keyword\">not</span> equal <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> supplied origin. Origin <span class=\"string\">'http://192.168.1.2:800'</span> is therefore <span class=\"keyword\">not</span> allowed access.</div></pre></td></tr></table></figure></p>\n<p>1、允许单个域名访问，也就是指定某个域名能跨域请求php接口<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">header('content-type<span class=\"symbol\">:application</span><span class=\"symbol\">:json</span><span class=\"comment\">;charset=utf8');  </span></div><div class=\"line\">header('Access-Control-Allow-Origin<span class=\"symbol\">:https</span><span class=\"symbol\">://code</span>.it919.cn')<span class=\"comment\">;</span></div><div class=\"line\">header('Access-Control-Allow-Methods<span class=\"symbol\">:*</span>')<span class=\"comment\">;  </span></div><div class=\"line\">header('Access-Control-Allow-Headers<span class=\"symbol\">:x-requested-with</span>,content-type')<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>主要设置的还是<br>header(‘Access-Control-Allow-Origin:<code>https://code.it919.cn</code>‘);将其设置为自己跨域的域名，如果允许全部访问的话 设置 <code>*</code><br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">header('Access-Control-Allow-Origin<span class=\"symbol\">:*</span>')<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>ok这样就能够 访问接口数据不跨域了</p>\n<p>2、允许多个域名能够跨域访问接口数据<br>指定多个域名（<a href=\"https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面\">https://code.it919.cn、http://www.it919.cn）跨域访问，这样的话就配置一个数组包含允许跨域的域名载这里面</a><br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$allow</span>_origin = array(  </span></div><div class=\"line\">    <span class=\"string\">'https://code.it919.cn'</span>,</div><div class=\"line\">    <span class=\"string\">'http://www.it919.cn'</span>  </div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>获取需要访问接口数据的域名<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$origin = <span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'HTTP_ORIGIN'</span>])? $_SERVER[<span class=\"string\">'HTTP_ORIGIN'</span>] : <span class=\"string\">''</span>;</div></pre></td></tr></table></figure></p>\n<p>判断该域名是否是在我们定义好的数组里面<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(in_array($origin, $allow_origin))&#123;  </div><div class=\"line\">    <span class=\"keyword\">header</span>(<span class=\"string\">'Access-Control-Allow-Origin:'</span>.$origin);       </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Sublime_text3 实用插件整理","date":"2017-06-16T15:04:28.000Z","comments":1,"keywords":null,"description":"实用插件整理录一些自己在使用sublime时常用的一些插件:cssrem , SublimeServer , FileHeader ,OmniMarkupPreviewer , sublime-jsdocs  , AutoFileName,SublimeText-Nodejs , Sublime-Better-Completion , SublimeAllAutocomplete,JsFormat ,jQuery等等插件扩展介绍","_content":"\n\n###  Sublime text 常用插件\n\n>记录一些自己在使用sublime时常用的一些插件 cssrem 、SublimeServer 、 FileHeader 、OmniMarkupPreviewer 、sublime-jsdocs  、AutoFileName、SublimeText-Nodejs 、Sublime-Better-Completion 、SublimeAllAutocomplete 、JsFormat 、jQuery\n\n__安装插件__\n\n>需要先Package install安装\n\n按Ctrl+`调出console 复制代码运行\n\n```\n\nimporturllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n\n```\n\n#### cssrem\n\n> 一个CSS的px值转rem值的Sublime Text 3自动完成插件。[下载地址](https://github.com/flashlizi/cssrem) https://github.com/flashlizi/cssrem\n\n插件效果如下：\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-43f835019408ae5d.gif?imageMogr2/auto-orient/strip)\n\n###### 安装\n\n* 下载本项目，比如：git clone https://github.com/flashlizi/cssrem\n\n* 进入packages目录：Sublime Text -> Preferences -> Browse Packages...\n\n* 复制下载的cssrem目录到刚才的packges目录里。\n\n* 重启Sublime Text。\n\n###### 配置参数\n\n参数配置文件：Sublime Text -> Preferences -> Package Settings -> cssrem\n\n* `px_to_rem` - px转rem的单位比例，默认为40。\n\n* `max_rem_fraction_length` - px转rem的小数部分的最大长度。默认为6。\n\n* `available_file_types` - 启用此插件的文件类型。默认为：[\".css\", \".less\", \".sass\"]。\n\n#### SublimeServer\n\n>静态WEB服务器：SublimeServer [GitHub地址](https://github.com/learning/SublimeServer)\n\n#### FileHeader\n\n>快速新建文件、并生产头部注释    [GitHub地址](https://github.com/shiyanhui/FileHeader)\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-a2f3b7b8c148b861.gif?imageMogr2/auto-orient/strip)\n\n#### OmniMarkupPreviewer\n\n>为 Sublime Text 的一款强大插件，支持将标记语言(Markdown仅是其中一种)渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件  [GitHub地址](https://github.com/timonwong/OmniMarkupPreviewer)\n\n#### sublime-jsdocs\n\n> 这个插件可以很好的生成js ,php 等语言函数注释,只需要在函数上面输入/** ,然后按tab 就会自动生成注释 [GitHub地址](https://github.com/spadgos/sublime-jsdocs)\n\n#### AutoFileName\n\n>自动提示路径插件  [GitHub地址](https://github.com/BoundInCode/AutoFileName)\n\n#### SublimeText-Nodejs\n\n> 基于sublime text3的node.js开发环境搭建  [GitHub地址](https://github.com/tanepiper/SublimeText-Nodejs)\n\n#### Sublime-Better-Completion\n\n>支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件  [GitHub地址](https://github.com/Pleasurazy/Sublime-Better-Completion)\n\n#### AllAutocomplete\n\n>Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。  [GitHub地址](https://github.com/alienhard/SublimeAllAutocomplete)\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-b7ea09d7e92c8074.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### JsFormat\n\n>js格式化插件  [GitHub地址](https://github.com/jdc0589/JsFormat)\n\n>使用方法：\n\n1、快捷键：`ctrl+alt+f`\n\n2、先用快捷键打开命令面板 “`ctrl + shift + p`”, 再输入 “`Format: Javascript`” 就可以使用格式化命令\n\n#### jQuery\n\n>jQuery 提示插件\n\n\n\n#### ConvertToUTF8\n>sublime text本身是不支持中文编码的，所以需要通过安装插件来解决，ConvertToUTF8插件可以实现。\n\n\n#### SublimeTmpl\n>能够很好的新建文件时使用模版的内容了, 目前添加了html/js/css/php/python/ruby的模版. \n```\nctrl+alt+h html\nctrl+alt+j javascript\nctrl+alt+c css\nctrl+alt+p php\nctrl+alt+r ruby\nctrl+alt++shift+p python\n```\n\n#### BracketHighlighter\n>BracketHighlighter 插件能为Sublime Text提供括号，引号这类高亮功能  [GitHub地址](https://github.com/facelessuser/BracketHighlighter)\n\n1. 在Sublime Text中用package control安装 BracketHighlighter ；\n\n2. 安装完成后，打开Preferences -> package settings -> Bracket Highlighter -> Bracket Settings – User，然后添加如下代码：\n```\n{\n\t\"bracket_styles\": {\n\t\t\"default\": {\n\t\t\t\"icon\": \"dot\",\n\t\t\t// \"color\": \"entity.name.class\",\n\t\t\t\"color\": \"brackethighlighter.default\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"unmatched\": {\n\t\t\t\"icon\": \"question\",\n\t\t\t\"color\": \"brackethighlighter.unmatched\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"curly\": {\n\t\t\t\"icon\": \"curly_bracket\",\n\t\t\t\"color\": \"brackethighlighter.curly\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"round\": {\n\t\t\t\"icon\": \"round_bracket\",\n\t\t\t\"color\": \"brackethighlighter.round\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"square\": {\n\t\t\t\"icon\": \"square_bracket\",\n\t\t\t\"color\": \"brackethighlighter.square\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"angle\": {\n\t\t\t\"icon\": \"angle_bracket\",\n\t\t\t\"color\": \"brackethighlighter.angle\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"tag\": {\n\t\t\t\"icon\": \"tag\",\n\t\t\t\"color\": \"brackethighlighter.tag\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"single_quote\": {\n\t\t\t\"icon\": \"single_quote\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"double_quote\": {\n\t\t\t\"icon\": \"double_quote\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"regex\": {\n\t\t\t\"icon\": \"regex\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"outline\"\n\t\t}\n\t}\n}\n```\n\n#### Alignment （代码对齐）\n>单和易于使用的插件,使你的代码组织和美观。当您重温代码时候非常有用。\n使用方法：选中要调整的行，然后按 `Ctrl+ Alt + A` 一些对应的设置可以参看[配置](https://my.oschina.net/shede333/blog/170536)\n\n#### SideBar Enhancements　　\n>这个插件改进了侧边栏，增加了许多功能\n\n#### SublimeLinter\n>使用SublimeLinter配置JS,CSS,HTML语法检查 可参看   [配置](https://segmentfault.com/a/1190000004169261)\n\n\n\n#### Vue.js 文件代码高亮支持\n>[让sublime text3支持Vue语法高亮显示](https://github.com/vuejs/vue-syntax-highlight)\n\n#### sublime 支持PHP语法提示\n>https://github.com/benmatselby/sublime-phpcs\n\n\n\n\n#### 主题插件\n>自己比较喜欢的主题\n\n__Theme - itg.flat__\nhttps://github.com/itsthatguy/theme-itg-flat\n\nhttps://github.com/voronianski/oceanic-next-color-scheme\n\nhttps://github.com/babel/babel-sublime\n\n查看20款sublime [主题](http://www.itbulu.com/20-sublime-themes.html)\n\n[PackageControl官网地址：](https://packagecontrol.io/packages/CodeFormatter)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sublime插件.md","raw":"---\ntitle: Sublime_text3 实用插件整理\ndate: 2017-06-16 23:04:28\ncomments: true\ncategories: \ntags: [js]\nkeywords: \ndescription: 实用插件整理录一些自己在使用sublime时常用的一些插件:cssrem , SublimeServer , FileHeader ,OmniMarkupPreviewer , sublime-jsdocs  , AutoFileName,SublimeText-Nodejs , Sublime-Better-Completion , SublimeAllAutocomplete,JsFormat ,jQuery等等插件扩展介绍\n\n---\n\n\n###  Sublime text 常用插件\n\n>记录一些自己在使用sublime时常用的一些插件 cssrem 、SublimeServer 、 FileHeader 、OmniMarkupPreviewer 、sublime-jsdocs  、AutoFileName、SublimeText-Nodejs 、Sublime-Better-Completion 、SublimeAllAutocomplete 、JsFormat 、jQuery\n\n__安装插件__\n\n>需要先Package install安装\n\n按Ctrl+`调出console 复制代码运行\n\n```\n\nimporturllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n\n```\n\n#### cssrem\n\n> 一个CSS的px值转rem值的Sublime Text 3自动完成插件。[下载地址](https://github.com/flashlizi/cssrem) https://github.com/flashlizi/cssrem\n\n插件效果如下：\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-43f835019408ae5d.gif?imageMogr2/auto-orient/strip)\n\n###### 安装\n\n* 下载本项目，比如：git clone https://github.com/flashlizi/cssrem\n\n* 进入packages目录：Sublime Text -> Preferences -> Browse Packages...\n\n* 复制下载的cssrem目录到刚才的packges目录里。\n\n* 重启Sublime Text。\n\n###### 配置参数\n\n参数配置文件：Sublime Text -> Preferences -> Package Settings -> cssrem\n\n* `px_to_rem` - px转rem的单位比例，默认为40。\n\n* `max_rem_fraction_length` - px转rem的小数部分的最大长度。默认为6。\n\n* `available_file_types` - 启用此插件的文件类型。默认为：[\".css\", \".less\", \".sass\"]。\n\n#### SublimeServer\n\n>静态WEB服务器：SublimeServer [GitHub地址](https://github.com/learning/SublimeServer)\n\n#### FileHeader\n\n>快速新建文件、并生产头部注释    [GitHub地址](https://github.com/shiyanhui/FileHeader)\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-a2f3b7b8c148b861.gif?imageMogr2/auto-orient/strip)\n\n#### OmniMarkupPreviewer\n\n>为 Sublime Text 的一款强大插件，支持将标记语言(Markdown仅是其中一种)渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件  [GitHub地址](https://github.com/timonwong/OmniMarkupPreviewer)\n\n#### sublime-jsdocs\n\n> 这个插件可以很好的生成js ,php 等语言函数注释,只需要在函数上面输入/** ,然后按tab 就会自动生成注释 [GitHub地址](https://github.com/spadgos/sublime-jsdocs)\n\n#### AutoFileName\n\n>自动提示路径插件  [GitHub地址](https://github.com/BoundInCode/AutoFileName)\n\n#### SublimeText-Nodejs\n\n> 基于sublime text3的node.js开发环境搭建  [GitHub地址](https://github.com/tanepiper/SublimeText-Nodejs)\n\n#### Sublime-Better-Completion\n\n>支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件  [GitHub地址](https://github.com/Pleasurazy/Sublime-Better-Completion)\n\n#### AllAutocomplete\n\n>Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。  [GitHub地址](https://github.com/alienhard/SublimeAllAutocomplete)\n\n![效果演示图](http://upload-images.jianshu.io/upload_images/1838578-b7ea09d7e92c8074.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### JsFormat\n\n>js格式化插件  [GitHub地址](https://github.com/jdc0589/JsFormat)\n\n>使用方法：\n\n1、快捷键：`ctrl+alt+f`\n\n2、先用快捷键打开命令面板 “`ctrl + shift + p`”, 再输入 “`Format: Javascript`” 就可以使用格式化命令\n\n#### jQuery\n\n>jQuery 提示插件\n\n\n\n#### ConvertToUTF8\n>sublime text本身是不支持中文编码的，所以需要通过安装插件来解决，ConvertToUTF8插件可以实现。\n\n\n#### SublimeTmpl\n>能够很好的新建文件时使用模版的内容了, 目前添加了html/js/css/php/python/ruby的模版. \n```\nctrl+alt+h html\nctrl+alt+j javascript\nctrl+alt+c css\nctrl+alt+p php\nctrl+alt+r ruby\nctrl+alt++shift+p python\n```\n\n#### BracketHighlighter\n>BracketHighlighter 插件能为Sublime Text提供括号，引号这类高亮功能  [GitHub地址](https://github.com/facelessuser/BracketHighlighter)\n\n1. 在Sublime Text中用package control安装 BracketHighlighter ；\n\n2. 安装完成后，打开Preferences -> package settings -> Bracket Highlighter -> Bracket Settings – User，然后添加如下代码：\n```\n{\n\t\"bracket_styles\": {\n\t\t\"default\": {\n\t\t\t\"icon\": \"dot\",\n\t\t\t// \"color\": \"entity.name.class\",\n\t\t\t\"color\": \"brackethighlighter.default\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"unmatched\": {\n\t\t\t\"icon\": \"question\",\n\t\t\t\"color\": \"brackethighlighter.unmatched\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"curly\": {\n\t\t\t\"icon\": \"curly_bracket\",\n\t\t\t\"color\": \"brackethighlighter.curly\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"round\": {\n\t\t\t\"icon\": \"round_bracket\",\n\t\t\t\"color\": \"brackethighlighter.round\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"square\": {\n\t\t\t\"icon\": \"square_bracket\",\n\t\t\t\"color\": \"brackethighlighter.square\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"angle\": {\n\t\t\t\"icon\": \"angle_bracket\",\n\t\t\t\"color\": \"brackethighlighter.angle\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"tag\": {\n\t\t\t\"icon\": \"tag\",\n\t\t\t\"color\": \"brackethighlighter.tag\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"single_quote\": {\n\t\t\t\"icon\": \"single_quote\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"double_quote\": {\n\t\t\t\"icon\": \"double_quote\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"highlight\"\n\t\t},\n\t\t\"regex\": {\n\t\t\t\"icon\": \"regex\",\n\t\t\t\"color\": \"brackethighlighter.quote\",\n\t\t\t\"style\": \"outline\"\n\t\t}\n\t}\n}\n```\n\n#### Alignment （代码对齐）\n>单和易于使用的插件,使你的代码组织和美观。当您重温代码时候非常有用。\n使用方法：选中要调整的行，然后按 `Ctrl+ Alt + A` 一些对应的设置可以参看[配置](https://my.oschina.net/shede333/blog/170536)\n\n#### SideBar Enhancements　　\n>这个插件改进了侧边栏，增加了许多功能\n\n#### SublimeLinter\n>使用SublimeLinter配置JS,CSS,HTML语法检查 可参看   [配置](https://segmentfault.com/a/1190000004169261)\n\n\n\n#### Vue.js 文件代码高亮支持\n>[让sublime text3支持Vue语法高亮显示](https://github.com/vuejs/vue-syntax-highlight)\n\n#### sublime 支持PHP语法提示\n>https://github.com/benmatselby/sublime-phpcs\n\n\n\n\n#### 主题插件\n>自己比较喜欢的主题\n\n__Theme - itg.flat__\nhttps://github.com/itsthatguy/theme-itg-flat\n\nhttps://github.com/voronianski/oceanic-next-color-scheme\n\nhttps://github.com/babel/babel-sublime\n\n查看20款sublime [主题](http://www.itbulu.com/20-sublime-themes.html)\n\n[PackageControl官网地址：](https://packagecontrol.io/packages/CodeFormatter)\n\n\n\n\n\n\n\n\n\n\n","slug":"sublime插件","published":1,"updated":"2017-07-06T10:29:04.812Z","layout":"post","photos":[],"link":"","_id":"cj4sal69d000pek5btsatj27r","content":"<h3 id=\"Sublime-text-常用插件\"><a href=\"#Sublime-text-常用插件\" class=\"headerlink\" title=\"Sublime text 常用插件\"></a>Sublime text 常用插件</h3><blockquote>\n<p>记录一些自己在使用sublime时常用的一些插件 cssrem 、SublimeServer 、 FileHeader 、OmniMarkupPreviewer 、sublime-jsdocs  、AutoFileName、SublimeText-Nodejs 、Sublime-Better-Completion 、SublimeAllAutocomplete 、JsFormat 、jQuery</p>\n</blockquote>\n<p><strong>安装插件</strong></p>\n<blockquote>\n<p>需要先Package install安装</p>\n</blockquote>\n<p>按Ctrl+`调出console 复制代码运行</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">importurllib.request,os;pf=<span class=\"string\">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class=\"built_in\">open</span>(os.path.join(ipp,pf),<span class=\"string\">'wb'</span>).<span class=\"built_in\">write</span>(urllib.request.urlopen(<span class=\"string\">'http://sublime.wbond.net/'</span>+pf.<span class=\"built_in\">replace</span>(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>())</div></pre></td></tr></table></figure>\n<h4 id=\"cssrem\"><a href=\"#cssrem\" class=\"headerlink\" title=\"cssrem\"></a>cssrem</h4><blockquote>\n<p>一个CSS的px值转rem值的Sublime Text 3自动完成插件。<a href=\"https://github.com/flashlizi/cssrem\" target=\"_blank\" rel=\"external\">下载地址</a> <a href=\"https://github.com/flashlizi/cssrem\" target=\"_blank\" rel=\"external\">https://github.com/flashlizi/cssrem</a></p>\n</blockquote>\n<p>插件效果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-43f835019408ae5d.gif?imageMogr2/auto-orient/strip\" alt=\"效果演示图\"></p>\n<h6 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h6><ul>\n<li><p>下载本项目，比如：git clone <a href=\"https://github.com/flashlizi/cssrem\" target=\"_blank\" rel=\"external\">https://github.com/flashlizi/cssrem</a></p>\n</li>\n<li><p>进入packages目录：Sublime Text -&gt; Preferences -&gt; Browse Packages…</p>\n</li>\n<li><p>复制下载的cssrem目录到刚才的packges目录里。</p>\n</li>\n<li><p>重启Sublime Text。</p>\n</li>\n</ul>\n<h6 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h6><p>参数配置文件：Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem</p>\n<ul>\n<li><p><code>px_to_rem</code> - px转rem的单位比例，默认为40。</p>\n</li>\n<li><p><code>max_rem_fraction_length</code> - px转rem的小数部分的最大长度。默认为6。</p>\n</li>\n<li><p><code>available_file_types</code> - 启用此插件的文件类型。默认为：[“.css”, “.less”, “.sass”]。</p>\n</li>\n</ul>\n<h4 id=\"SublimeServer\"><a href=\"#SublimeServer\" class=\"headerlink\" title=\"SublimeServer\"></a>SublimeServer</h4><blockquote>\n<p>静态WEB服务器：SublimeServer <a href=\"https://github.com/learning/SublimeServer\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"FileHeader\"><a href=\"#FileHeader\" class=\"headerlink\" title=\"FileHeader\"></a>FileHeader</h4><blockquote>\n<p>快速新建文件、并生产头部注释    <a href=\"https://github.com/shiyanhui/FileHeader\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-a2f3b7b8c148b861.gif?imageMogr2/auto-orient/strip\" alt=\"效果演示图\"></p>\n<h4 id=\"OmniMarkupPreviewer\"><a href=\"#OmniMarkupPreviewer\" class=\"headerlink\" title=\"OmniMarkupPreviewer\"></a>OmniMarkupPreviewer</h4><blockquote>\n<p>为 Sublime Text 的一款强大插件，支持将标记语言(Markdown仅是其中一种)渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件  <a href=\"https://github.com/timonwong/OmniMarkupPreviewer\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"sublime-jsdocs\"><a href=\"#sublime-jsdocs\" class=\"headerlink\" title=\"sublime-jsdocs\"></a>sublime-jsdocs</h4><blockquote>\n<p>这个插件可以很好的生成js ,php 等语言函数注释,只需要在函数上面输入/** ,然后按tab 就会自动生成注释 <a href=\"https://github.com/spadgos/sublime-jsdocs\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"AutoFileName\"><a href=\"#AutoFileName\" class=\"headerlink\" title=\"AutoFileName\"></a>AutoFileName</h4><blockquote>\n<p>自动提示路径插件  <a href=\"https://github.com/BoundInCode/AutoFileName\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"SublimeText-Nodejs\"><a href=\"#SublimeText-Nodejs\" class=\"headerlink\" title=\"SublimeText-Nodejs\"></a>SublimeText-Nodejs</h4><blockquote>\n<p>基于sublime text3的node.js开发环境搭建  <a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"Sublime-Better-Completion\"><a href=\"#Sublime-Better-Completion\" class=\"headerlink\" title=\"Sublime-Better-Completion\"></a>Sublime-Better-Completion</h4><blockquote>\n<p>支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件  <a href=\"https://github.com/Pleasurazy/Sublime-Better-Completion\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"AllAutocomplete\"><a href=\"#AllAutocomplete\" class=\"headerlink\" title=\"AllAutocomplete\"></a>AllAutocomplete</h4><blockquote>\n<p>Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。  <a href=\"https://github.com/alienhard/SublimeAllAutocomplete\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-b7ea09d7e92c8074.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果演示图\"></p>\n<h4 id=\"JsFormat\"><a href=\"#JsFormat\" class=\"headerlink\" title=\"JsFormat\"></a>JsFormat</h4><blockquote>\n<p>js格式化插件  <a href=\"https://github.com/jdc0589/JsFormat\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n<p>使用方法：</p>\n</blockquote>\n<p>1、快捷键：<code>ctrl+alt+f</code></p>\n<p>2、先用快捷键打开命令面板 “<code>ctrl + shift + p</code>”, 再输入 “<code>Format: Javascript</code>” 就可以使用格式化命令</p>\n<h4 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h4><blockquote>\n<p>jQuery 提示插件</p>\n</blockquote>\n<h4 id=\"ConvertToUTF8\"><a href=\"#ConvertToUTF8\" class=\"headerlink\" title=\"ConvertToUTF8\"></a>ConvertToUTF8</h4><blockquote>\n<p>sublime text本身是不支持中文编码的，所以需要通过安装插件来解决，ConvertToUTF8插件可以实现。</p>\n</blockquote>\n<h4 id=\"SublimeTmpl\"><a href=\"#SublimeTmpl\" class=\"headerlink\" title=\"SublimeTmpl\"></a>SublimeTmpl</h4><blockquote>\n<p>能够很好的新建文件时使用模版的内容了, 目前添加了html/js/css/php/python/ruby的模版.<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+alt+h <span class=\"selector-tag\">html</span></div><div class=\"line\">ctrl+alt+j javascript</div><div class=\"line\">ctrl+alt+c css</div><div class=\"line\">ctrl+alt+<span class=\"selector-tag\">p</span> php</div><div class=\"line\">ctrl+alt+r ruby</div><div class=\"line\">ctrl+alt++shift+<span class=\"selector-tag\">p</span> python</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"BracketHighlighter\"><a href=\"#BracketHighlighter\" class=\"headerlink\" title=\"BracketHighlighter\"></a>BracketHighlighter</h4><blockquote>\n<p>BracketHighlighter 插件能为Sublime Text提供括号，引号这类高亮功能  <a href=\"https://github.com/facelessuser/BracketHighlighter\" target=\"_blank\" rel=\"external\">GitHub地址</a></p>\n</blockquote>\n<ol>\n<li><p>在Sublime Text中用package control安装 BracketHighlighter ；</p>\n</li>\n<li><p>安装完成后，打开Preferences -&gt; package settings -&gt; Bracket Highlighter -&gt; Bracket Settings – User，然后添加如下代码：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">\"bracket_styles\"</span>: &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"default\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"dot\"</span>,</div><div class=\"line\">\t\t\t// <span class=\"string\">\"color\"</span>: <span class=\"string\">\"entity.name.class\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.default\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"unmatched\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"question\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.unmatched\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"curly\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"curly_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.curly\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"round\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"round_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.round\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"square\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"square_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.square\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"angle\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"angle_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.angle\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"tag\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"tag\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.tag\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"single_quote\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"single_quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"double_quote\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"double_quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"regex\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"regex\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"outline\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Alignment-（代码对齐）\"><a href=\"#Alignment-（代码对齐）\" class=\"headerlink\" title=\"Alignment （代码对齐）\"></a>Alignment （代码对齐）</h4><blockquote>\n<p>单和易于使用的插件,使你的代码组织和美观。当您重温代码时候非常有用。<br>使用方法：选中要调整的行，然后按 <code>Ctrl+ Alt + A</code> 一些对应的设置可以参看<a href=\"https://my.oschina.net/shede333/blog/170536\" target=\"_blank\" rel=\"external\">配置</a></p>\n</blockquote>\n<h4 id=\"SideBar-Enhancements\"><a href=\"#SideBar-Enhancements\" class=\"headerlink\" title=\"SideBar Enhancements　　\"></a>SideBar Enhancements　　</h4><blockquote>\n<p>这个插件改进了侧边栏，增加了许多功能</p>\n</blockquote>\n<h4 id=\"SublimeLinter\"><a href=\"#SublimeLinter\" class=\"headerlink\" title=\"SublimeLinter\"></a>SublimeLinter</h4><blockquote>\n<p>使用SublimeLinter配置JS,CSS,HTML语法检查 可参看   <a href=\"https://segmentfault.com/a/1190000004169261\" target=\"_blank\" rel=\"external\">配置</a></p>\n</blockquote>\n<h4 id=\"Vue-js-文件代码高亮支持\"><a href=\"#Vue-js-文件代码高亮支持\" class=\"headerlink\" title=\"Vue.js 文件代码高亮支持\"></a>Vue.js 文件代码高亮支持</h4><blockquote>\n<p><a href=\"https://github.com/vuejs/vue-syntax-highlight\" target=\"_blank\" rel=\"external\">让sublime text3支持Vue语法高亮显示</a></p>\n</blockquote>\n<h4 id=\"sublime-支持PHP语法提示\"><a href=\"#sublime-支持PHP语法提示\" class=\"headerlink\" title=\"sublime 支持PHP语法提示\"></a>sublime 支持PHP语法提示</h4><blockquote>\n<p><a href=\"https://github.com/benmatselby/sublime-phpcs\" target=\"_blank\" rel=\"external\">https://github.com/benmatselby/sublime-phpcs</a></p>\n</blockquote>\n<h4 id=\"主题插件\"><a href=\"#主题插件\" class=\"headerlink\" title=\"主题插件\"></a>主题插件</h4><blockquote>\n<p>自己比较喜欢的主题</p>\n</blockquote>\n<p><strong>Theme - itg.flat</strong><br><a href=\"https://github.com/itsthatguy/theme-itg-flat\" target=\"_blank\" rel=\"external\">https://github.com/itsthatguy/theme-itg-flat</a></p>\n<p><a href=\"https://github.com/voronianski/oceanic-next-color-scheme\" target=\"_blank\" rel=\"external\">https://github.com/voronianski/oceanic-next-color-scheme</a></p>\n<p><a href=\"https://github.com/babel/babel-sublime\" target=\"_blank\" rel=\"external\">https://github.com/babel/babel-sublime</a></p>\n<p>查看20款sublime <a href=\"http://www.itbulu.com/20-sublime-themes.html\" target=\"_blank\" rel=\"external\">主题</a></p>\n<p><a href=\"https://packagecontrol.io/packages/CodeFormatter\" target=\"_blank\" rel=\"external\">PackageControl官网地址：</a></p>\n","excerpt":"","more":"<h3 id=\"Sublime-text-常用插件\"><a href=\"#Sublime-text-常用插件\" class=\"headerlink\" title=\"Sublime text 常用插件\"></a>Sublime text 常用插件</h3><blockquote>\n<p>记录一些自己在使用sublime时常用的一些插件 cssrem 、SublimeServer 、 FileHeader 、OmniMarkupPreviewer 、sublime-jsdocs  、AutoFileName、SublimeText-Nodejs 、Sublime-Better-Completion 、SublimeAllAutocomplete 、JsFormat 、jQuery</p>\n</blockquote>\n<p><strong>安装插件</strong></p>\n<blockquote>\n<p>需要先Package install安装</p>\n</blockquote>\n<p>按Ctrl+`调出console 复制代码运行</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">importurllib.request,os;pf=<span class=\"string\">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class=\"built_in\">open</span>(os.path.join(ipp,pf),<span class=\"string\">'wb'</span>).<span class=\"built_in\">write</span>(urllib.request.urlopen(<span class=\"string\">'http://sublime.wbond.net/'</span>+pf.<span class=\"built_in\">replace</span>(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>())</div></pre></td></tr></table></figure>\n<h4 id=\"cssrem\"><a href=\"#cssrem\" class=\"headerlink\" title=\"cssrem\"></a>cssrem</h4><blockquote>\n<p>一个CSS的px值转rem值的Sublime Text 3自动完成插件。<a href=\"https://github.com/flashlizi/cssrem\">下载地址</a> <a href=\"https://github.com/flashlizi/cssrem\">https://github.com/flashlizi/cssrem</a></p>\n</blockquote>\n<p>插件效果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-43f835019408ae5d.gif?imageMogr2/auto-orient/strip\" alt=\"效果演示图\"></p>\n<h6 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h6><ul>\n<li><p>下载本项目，比如：git clone <a href=\"https://github.com/flashlizi/cssrem\">https://github.com/flashlizi/cssrem</a></p>\n</li>\n<li><p>进入packages目录：Sublime Text -&gt; Preferences -&gt; Browse Packages…</p>\n</li>\n<li><p>复制下载的cssrem目录到刚才的packges目录里。</p>\n</li>\n<li><p>重启Sublime Text。</p>\n</li>\n</ul>\n<h6 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h6><p>参数配置文件：Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem</p>\n<ul>\n<li><p><code>px_to_rem</code> - px转rem的单位比例，默认为40。</p>\n</li>\n<li><p><code>max_rem_fraction_length</code> - px转rem的小数部分的最大长度。默认为6。</p>\n</li>\n<li><p><code>available_file_types</code> - 启用此插件的文件类型。默认为：[“.css”, “.less”, “.sass”]。</p>\n</li>\n</ul>\n<h4 id=\"SublimeServer\"><a href=\"#SublimeServer\" class=\"headerlink\" title=\"SublimeServer\"></a>SublimeServer</h4><blockquote>\n<p>静态WEB服务器：SublimeServer <a href=\"https://github.com/learning/SublimeServer\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"FileHeader\"><a href=\"#FileHeader\" class=\"headerlink\" title=\"FileHeader\"></a>FileHeader</h4><blockquote>\n<p>快速新建文件、并生产头部注释    <a href=\"https://github.com/shiyanhui/FileHeader\">GitHub地址</a></p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-a2f3b7b8c148b861.gif?imageMogr2/auto-orient/strip\" alt=\"效果演示图\"></p>\n<h4 id=\"OmniMarkupPreviewer\"><a href=\"#OmniMarkupPreviewer\" class=\"headerlink\" title=\"OmniMarkupPreviewer\"></a>OmniMarkupPreviewer</h4><blockquote>\n<p>为 Sublime Text 的一款强大插件，支持将标记语言(Markdown仅是其中一种)渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件  <a href=\"https://github.com/timonwong/OmniMarkupPreviewer\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"sublime-jsdocs\"><a href=\"#sublime-jsdocs\" class=\"headerlink\" title=\"sublime-jsdocs\"></a>sublime-jsdocs</h4><blockquote>\n<p>这个插件可以很好的生成js ,php 等语言函数注释,只需要在函数上面输入/** ,然后按tab 就会自动生成注释 <a href=\"https://github.com/spadgos/sublime-jsdocs\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"AutoFileName\"><a href=\"#AutoFileName\" class=\"headerlink\" title=\"AutoFileName\"></a>AutoFileName</h4><blockquote>\n<p>自动提示路径插件  <a href=\"https://github.com/BoundInCode/AutoFileName\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"SublimeText-Nodejs\"><a href=\"#SublimeText-Nodejs\" class=\"headerlink\" title=\"SublimeText-Nodejs\"></a>SublimeText-Nodejs</h4><blockquote>\n<p>基于sublime text3的node.js开发环境搭建  <a href=\"https://github.com/tanepiper/SublimeText-Nodejs\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"Sublime-Better-Completion\"><a href=\"#Sublime-Better-Completion\" class=\"headerlink\" title=\"Sublime-Better-Completion\"></a>Sublime-Better-Completion</h4><blockquote>\n<p>支持Javascript、JQuery、Twitter Bootstrap框架、HTML5标签属性提示的插件  <a href=\"https://github.com/Pleasurazy/Sublime-Better-Completion\">GitHub地址</a></p>\n</blockquote>\n<h4 id=\"AllAutocomplete\"><a href=\"#AllAutocomplete\" class=\"headerlink\" title=\"AllAutocomplete\"></a>AllAutocomplete</h4><blockquote>\n<p>Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。  <a href=\"https://github.com/alienhard/SublimeAllAutocomplete\">GitHub地址</a></p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1838578-b7ea09d7e92c8074.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果演示图\"></p>\n<h4 id=\"JsFormat\"><a href=\"#JsFormat\" class=\"headerlink\" title=\"JsFormat\"></a>JsFormat</h4><blockquote>\n<p>js格式化插件  <a href=\"https://github.com/jdc0589/JsFormat\">GitHub地址</a></p>\n<p>使用方法：</p>\n</blockquote>\n<p>1、快捷键：<code>ctrl+alt+f</code></p>\n<p>2、先用快捷键打开命令面板 “<code>ctrl + shift + p</code>”, 再输入 “<code>Format: Javascript</code>” 就可以使用格式化命令</p>\n<h4 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h4><blockquote>\n<p>jQuery 提示插件</p>\n</blockquote>\n<h4 id=\"ConvertToUTF8\"><a href=\"#ConvertToUTF8\" class=\"headerlink\" title=\"ConvertToUTF8\"></a>ConvertToUTF8</h4><blockquote>\n<p>sublime text本身是不支持中文编码的，所以需要通过安装插件来解决，ConvertToUTF8插件可以实现。</p>\n</blockquote>\n<h4 id=\"SublimeTmpl\"><a href=\"#SublimeTmpl\" class=\"headerlink\" title=\"SublimeTmpl\"></a>SublimeTmpl</h4><blockquote>\n<p>能够很好的新建文件时使用模版的内容了, 目前添加了html/js/css/php/python/ruby的模版.<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+alt+h <span class=\"selector-tag\">html</span></div><div class=\"line\">ctrl+alt+j javascript</div><div class=\"line\">ctrl+alt+c css</div><div class=\"line\">ctrl+alt+<span class=\"selector-tag\">p</span> php</div><div class=\"line\">ctrl+alt+r ruby</div><div class=\"line\">ctrl+alt++shift+<span class=\"selector-tag\">p</span> python</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"BracketHighlighter\"><a href=\"#BracketHighlighter\" class=\"headerlink\" title=\"BracketHighlighter\"></a>BracketHighlighter</h4><blockquote>\n<p>BracketHighlighter 插件能为Sublime Text提供括号，引号这类高亮功能  <a href=\"https://github.com/facelessuser/BracketHighlighter\">GitHub地址</a></p>\n</blockquote>\n<ol>\n<li><p>在Sublime Text中用package control安装 BracketHighlighter ；</p>\n</li>\n<li><p>安装完成后，打开Preferences -&gt; package settings -&gt; Bracket Highlighter -&gt; Bracket Settings – User，然后添加如下代码：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">\"bracket_styles\"</span>: &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"default\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"dot\"</span>,</div><div class=\"line\">\t\t\t// <span class=\"string\">\"color\"</span>: <span class=\"string\">\"entity.name.class\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.default\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"unmatched\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"question\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.unmatched\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"curly\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"curly_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.curly\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"round\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"round_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.round\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"square\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"square_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.square\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"angle\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"angle_bracket\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.angle\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"tag\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"tag\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.tag\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"single_quote\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"single_quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"double_quote\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"double_quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"highlight\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"string\">\"regex\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"regex\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"color\"</span>: <span class=\"string\">\"brackethighlighter.quote\"</span>,</div><div class=\"line\">\t\t\t<span class=\"string\">\"style\"</span>: <span class=\"string\">\"outline\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Alignment-（代码对齐）\"><a href=\"#Alignment-（代码对齐）\" class=\"headerlink\" title=\"Alignment （代码对齐）\"></a>Alignment （代码对齐）</h4><blockquote>\n<p>单和易于使用的插件,使你的代码组织和美观。当您重温代码时候非常有用。<br>使用方法：选中要调整的行，然后按 <code>Ctrl+ Alt + A</code> 一些对应的设置可以参看<a href=\"https://my.oschina.net/shede333/blog/170536\">配置</a></p>\n</blockquote>\n<h4 id=\"SideBar-Enhancements\"><a href=\"#SideBar-Enhancements\" class=\"headerlink\" title=\"SideBar Enhancements　　\"></a>SideBar Enhancements　　</h4><blockquote>\n<p>这个插件改进了侧边栏，增加了许多功能</p>\n</blockquote>\n<h4 id=\"SublimeLinter\"><a href=\"#SublimeLinter\" class=\"headerlink\" title=\"SublimeLinter\"></a>SublimeLinter</h4><blockquote>\n<p>使用SublimeLinter配置JS,CSS,HTML语法检查 可参看   <a href=\"https://segmentfault.com/a/1190000004169261\">配置</a></p>\n</blockquote>\n<h4 id=\"Vue-js-文件代码高亮支持\"><a href=\"#Vue-js-文件代码高亮支持\" class=\"headerlink\" title=\"Vue.js 文件代码高亮支持\"></a>Vue.js 文件代码高亮支持</h4><blockquote>\n<p><a href=\"https://github.com/vuejs/vue-syntax-highlight\">让sublime text3支持Vue语法高亮显示</a></p>\n</blockquote>\n<h4 id=\"sublime-支持PHP语法提示\"><a href=\"#sublime-支持PHP语法提示\" class=\"headerlink\" title=\"sublime 支持PHP语法提示\"></a>sublime 支持PHP语法提示</h4><blockquote>\n<p><a href=\"https://github.com/benmatselby/sublime-phpcs\">https://github.com/benmatselby/sublime-phpcs</a></p>\n</blockquote>\n<h4 id=\"主题插件\"><a href=\"#主题插件\" class=\"headerlink\" title=\"主题插件\"></a>主题插件</h4><blockquote>\n<p>自己比较喜欢的主题</p>\n</blockquote>\n<p><strong>Theme - itg.flat</strong><br><a href=\"https://github.com/itsthatguy/theme-itg-flat\">https://github.com/itsthatguy/theme-itg-flat</a></p>\n<p><a href=\"https://github.com/voronianski/oceanic-next-color-scheme\">https://github.com/voronianski/oceanic-next-color-scheme</a></p>\n<p><a href=\"https://github.com/babel/babel-sublime\">https://github.com/babel/babel-sublime</a></p>\n<p>查看20款sublime <a href=\"http://www.itbulu.com/20-sublime-themes.html\">主题</a></p>\n<p><a href=\"https://packagecontrol.io/packages/CodeFormatter\">PackageControl官网地址：</a></p>\n"},{"title":"深入 JavaScript 模块化模式详解","layout":"post","date":"2016-11-29T06:42:55.000Z","keywords":"javascript","description":"模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了但是它仍然有一些没有引起足够重视的高级用法。在这篇文章中，我们回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题。","_content":"## 译文：\n\n模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了，但是它仍然有一些没有引起足够重视的高级用法。\n在这篇文章中，我会回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题，其中甚至有一个是我自己原创的。\n\n## 基础知识\n\n我们从一些简单的回顾开始，这些知识在 Eric Miraglia（YUI 作者）在几年前写了关于 [JavaScript 模块化的博客](http://yuiblog.com/blog/2007/06/12/module-pattern/) 之后就人尽皆知了。如果你已经非常熟悉 JavaScript 模块化，那么请直接跳至“高级模式”部分。\n\n### 匿名闭包\n\n这是 JavaScript 模块化得以实现的基础，也是 JavaScript 最佳的特性，没有之一。我们只需要创建一个匿名函数，并立刻执行它，\n这个匿名函数中运行的所有的代码就会存活于一个闭包之中，并在应用程序的生命周期内提供私密性和状态。\n\n\n\n```\n(function () {\n    // 所有的变量和函数都只属于本作用域\n\t// 但仍然维护着对全局作用域的访问\n}());\n```\n\n\n请注意那个包围在匿名函数外的`( )`，为了满足 JavaScript 语法的正确性，我们必须添加它，因为以 function 开头的语句总是被认为是函数声明，被 `( )` 括起来以后函数声明则变成了函数表达式。\n\n### 全局导入\n\nJavaScript 有一个特性叫做“隐含全局”。任何时候，只要有被使用的变量名，JavaScript 解释器就会沿着作用域链向上查找一个定义了该变量名的 var 声明。如果在这个过程中没有找到这个变量声明，那这个变量就假定是全局的。而如果这个变量是被赋值而且此时这个变量尚不存在，那么这个变量会被创建为全局变量，这也意味着在匿名闭包中可以很容易的创建全局变量。不过，很不幸，这样会导致难以维护的代码，因为对人来说，很难区分在一个源文件中那些变量是全局的。\n\n幸好，匿名函数为这种情况提供了一个简单的解决方案，我们可以把全局变量作为参数传入匿名函数，从而把他们的导入我们的代码，这样既清晰，相比“默认全局”又可以提高性能，来看一个例子：\n\n\n\n```\n(function ($, YAHOO) {\n\t// 现在我们可以在匿名函数中用$访问 jQuery，用 YAHOO 访问全局变量的 YAHOO 了。\n}(jQuery, YAHOO));\n```\n\n\n\n### 模块导出\n\n有时候你声明变量的时候并不想使用全局变量，而是局部变量，这时候你可以通过把变量当做匿名函数的返回值导出来达到目的。这也就是基本的JavaScript 模块模式，来看一个例子：\n\n\n\n```\nvar MODULE = (function () {\n\tvar my = {},\n\t    privateVariable = 1;\n\n\tfunction privateMethod() {\n\t\t// ...\n\t}\n\n\tmy.moduleProperty = 1;\n\tmy.moduleMethod = function () {\n\t\t// ...\n\t};\n\n\treturn my;\n}());\n```\n\n\n\n注意到这里我们声明了一个叫做`MODULE`的全局模块，它有两个公有属性：一个叫做`MODULE.moduleMethod`的函数，和一个叫做`MODULE.moduleProperty`的属性。应该留意的是它利用匿名函数的闭包维护了`私有的内部状态`，而且，利用上面我们所学的全局导入，我们可以很容易的导入我们所需要的全局变量。\n\n## 高级模式\n\n虽然上面所学的知识已经足够应付大部分的情况，但对于 JavaScript 模块模式，我们仍然可以更进一步，创建一些强大的，可扩展的模式。那我们现在通过一个名叫 `MODULE` 的模块来把这些模式过一遍。\n\n### 扩容（Augmentation）\n\n到目前为止我们见到的模块都有一个限制，就是整个模块只能存活于一个源文件中，而任何一个在大型项目中工作过的人都会理解把一个模块分解到多个源文件的价值。还好，我们有一个很漂亮的解决方案叫做 `模块扩容`。首先我们导入模块，然后我们增加一些属性，再重新导出这个模块，从而对上述的 `MODULE` 模块达到扩容的目的：\n\n\n\n```\nvar MODULE = (function (my) {\n\tmy.anotherMethod = function () {\n\t\t// 增加新方法\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n\n虽然不是必须的，但我们仍然使用了 var 关键字来保持一致性。上面的代码运行以后，我们的模块将会拥有一个新的公有方法叫做 `MODULE.anotherMethod`，这个额外的源文件仍然可以维护它自己的私有内部状态和导入的变量。\n\n### 宽松扩容（Loose Augmentation）\n\n虽然我们上面的例子要求初始的模块必须先被创建，然后才可以进行扩容，但是事实上也不是必须这样做。JavaScript 中为了提高性能，可以异步的加载脚本。我们可以灵活的创建由多个部分组成的模块，并通过宽松扩容来以任何顺序加载它们。要求就是，每个源文件有如下的代码结构：\n\n\n\n```\nvar MODULE = (function (my) {\n\t// add capabilities...\n\n\treturn my;\n}(MODULE || {}));\n```\n\n\n\n这个模式中的`var`关键字是必须的，另外注意到，被导入的模块如果尚未存在的话，将会被创建，这意味着你可以使用像[LAB.js](http://labjs.com/)这样的工具来并行的加载这些模块，而通常情况下多个模块同时加载则会被阻塞。\n\n### 紧缩扩容（Tight Augmentation）\n\n虽然宽松扩容很赞，但是它还是在你的模块上加了一些限制，最关键的问题是你无法安全的覆盖模块(Overwrite)属性。另外在模块初始化的时候，你不能使用来自其他源文件的模块（但是在运行时是可以的）。而紧缩扩容指定了一系列加载顺序，并且运行覆盖，下面是一个简单的例子（为前面的 `MODULE` 模块扩容）：\n\n\n```\nvar MODULE = (function (my) {\n\tvar old_moduleMethod = my.moduleMethod;\n\n\tmy.moduleMethod = function () {\n\t\t// 方法覆盖，但是仍然通过 old_module.moduleMethod 保持对原有方法的访问\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n\n这里我们覆盖了`MODULE.moduleMethod`，但是如果需要的话，我们仍然可以访问被覆盖方法。\n\n### 克隆和继承（Cloning and Inheritance）\n\n\n\n```\nvar MODULE_TWO = (function (old) {\n\tvar my = {},\n\t\tkey;\n\n\tfor (key in old) {\n\t\tif (old.hasOwnProperty(key)) {\n\t\t\tmy[key] = old[key];\n\t\t}\n\t}\n\n\tvar super_moduleMethod = old.moduleMethod;\n\tmy.moduleMethod = function () {\n\t    // 覆盖被克隆的方法，并通过 super_moduleMethod 维护对服方法的访问\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n这个模式可能是最`不灵活`的，虽然它允许一些巧妙的组合(compositions)，但是以付出灵活性为代价。就像我之前所写的，一些作为属性的对象和函数不会被复制，他们仅仅作为一个对象的两个引用而存在。改变其中的一个则会同时改变另外一个。即使我们可以通过递归的克隆来解决这个问题，对函数我们仍然没有更多的办法，除了使用 `eval`。在这篇文章包括这个模式仅仅是为了完整性。\n\n### 跨文件私有状态（Cross-File Private State）\n\n把一个模块分割到多个文件的最大缺陷是每个文件都将会维护它自己的私有状态，并且没有任何途径访问其他文件的私有状态。这个问题有解决方案，下面这个宽松扩容模块（Loose Augmentation Module）的例子可以 `维护跨所有扩容模块的私有状态`。\n\n\n\n```\nvar MODULE = (function (my) {\n\tvar _private = my._private = my._private || {},\n\t\t_seal = my._seal = my._seal || function () {\n\t\t\tdelete my._private;\n\t\t\tdelete my._seal;\n\t\t\tdelete my._unseal;\n\t\t},\n\t\t_unseal = my._unseal = my._unseal || function () {\n\t\t\tmy._private = _private;\n\t\t\tmy._seal = _seal;\n\t\t\tmy._unseal = _unseal;\n\t\t};\n\n\t// 永久维护了对_private, _seal, 和 _unseal 私有状态的访问\n\n\treturn my;\n}(MODULE || {}));\n```\n\n\n\n在这里，任何文件都可以在 `_private` 中设置它们的局部私有变量，它们立即对其他文件可见。在这个模块完全加载以后，该应用程序应该调用 `MODULE._seal()`, 它可以阻止模块外部对内部的 `_private` 变量的访问。如果这个模块在整个应用程序的存活期间内被再次扩容，模块内部的方法可以在新文件被加载之前再次调用 `_seal()`，然后在方法被执行之后再次调用 `_unseal()`。这个模式是我今天在工作的时候突然想到的，而且之前我在其他地方都没见过它。我认为它是一个非常有用的模式，而且这个模式也值得单独写一篇文章。\n\n### 子模块（Sub-modules）\n\n我们要讨论的最后一个高级模式其实是最简单的，而且已经有很多创建子模块的很好的用例，其实它就像创建普通的模块一样：\n\n\n\n```\nMODULE.sub = (function () {\n\tvar my = {};\n\t// ...\n\n\treturn my;\n}());\n```\n\n\n\n虽然看起来很简单，但我认为它值得在这里一提。子模块具有普通模块的所有高级特性，包括扩容和私有状态。\n\n## 结论（Conclusions）\n\n大部分 JavaScript 模块的高级模式可以被组合起来，并得到更多的有用的模式。如果是非选不可的话，我提倡组合 `宽松扩容`，`私有状态`，和 `子模块`来设计复杂应用程序这样一种途径，我自己也曾经这样做过。\n\n在这篇文章里我还没有讨论过性能，这里我可以给出一个小小的提示：模块模式对 `提升性能` 很有好处。模块化的代码可以被很好的压缩，从而可以更快的下载，使用 `宽松的扩容(loose augmentation)` 模式使得非阻塞并行下载成为可能，也可以提高下载速度。虽然和其他方法相比，初始化的时间可能略有增加，但是这样的折衷是值得的。并且，只要全局变量都正确导入了，运行时性能应该不会降低，甚至会有所增加，因为局部变量的引用搜索链被模块缩短了。\n\n最后通过一个例子总结一下：一个用来加载自身的子模块，如果模块尚不存在的话就创建一个新的。为了使程序简短，我去掉了私有状态，但是把它加进来也不是什么难事。这个模式允许并发加载一个具有层级关系的，复杂的代码库，这个代码库包括该模块自身，子模块和其他所有的模块。\n\n\n\n```\nvar UTIL = (function (parent, $) {\n\tvar my = parent.ajax = parent.ajax || {};\n\n\tmy.get = function (url, params, callback) {\n\t\t// ok, so I'm cheating a bit :)\n\t\treturn $.getJSON(url, params, callback);\n\t};\n\n\t// etc...\n\n\treturn parent;\n}(UTIL || {}, jQuery));\n```\n\n\n\n我希望你会觉得这篇文章所讲述的东西都很有用，也请你在评论处留下你的想法，现在你可以继续去写更好，也更模块化的 JavaScript 代码了。\n\n_这篇文章在[Ajaxian.com](http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern) 上被加精了，在那里的评论区有更多的讨论，那些评论和本文下面的这些评论都值得一读。_\n\n### 资源\n\n[JavaScript Module Pattern: In-Depth](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)\n\n[JavaScript 模块化的博客](http://yuiblog.com/blog/2007/06/12/module-pattern/)\n\n[jQuery](http://jquery.com/)\n\n[YUI](http://yuilibrary.com/)\n","source":"_posts/jsmodule.md","raw":"---\ntitle: 深入 JavaScript 模块化模式详解\nlayout: post\ndate: 2016-11-29 14:42:55\ncategories: javascript\ntags: [javascript]\nkeywords: javascript\ndescription: 模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了但是它仍然有一些没有引起足够重视的高级用法。在这篇文章中，我们回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题。\n\n---\n## 译文：\n\n模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了，但是它仍然有一些没有引起足够重视的高级用法。\n在这篇文章中，我会回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题，其中甚至有一个是我自己原创的。\n\n## 基础知识\n\n我们从一些简单的回顾开始，这些知识在 Eric Miraglia（YUI 作者）在几年前写了关于 [JavaScript 模块化的博客](http://yuiblog.com/blog/2007/06/12/module-pattern/) 之后就人尽皆知了。如果你已经非常熟悉 JavaScript 模块化，那么请直接跳至“高级模式”部分。\n\n### 匿名闭包\n\n这是 JavaScript 模块化得以实现的基础，也是 JavaScript 最佳的特性，没有之一。我们只需要创建一个匿名函数，并立刻执行它，\n这个匿名函数中运行的所有的代码就会存活于一个闭包之中，并在应用程序的生命周期内提供私密性和状态。\n\n\n\n```\n(function () {\n    // 所有的变量和函数都只属于本作用域\n\t// 但仍然维护着对全局作用域的访问\n}());\n```\n\n\n请注意那个包围在匿名函数外的`( )`，为了满足 JavaScript 语法的正确性，我们必须添加它，因为以 function 开头的语句总是被认为是函数声明，被 `( )` 括起来以后函数声明则变成了函数表达式。\n\n### 全局导入\n\nJavaScript 有一个特性叫做“隐含全局”。任何时候，只要有被使用的变量名，JavaScript 解释器就会沿着作用域链向上查找一个定义了该变量名的 var 声明。如果在这个过程中没有找到这个变量声明，那这个变量就假定是全局的。而如果这个变量是被赋值而且此时这个变量尚不存在，那么这个变量会被创建为全局变量，这也意味着在匿名闭包中可以很容易的创建全局变量。不过，很不幸，这样会导致难以维护的代码，因为对人来说，很难区分在一个源文件中那些变量是全局的。\n\n幸好，匿名函数为这种情况提供了一个简单的解决方案，我们可以把全局变量作为参数传入匿名函数，从而把他们的导入我们的代码，这样既清晰，相比“默认全局”又可以提高性能，来看一个例子：\n\n\n\n```\n(function ($, YAHOO) {\n\t// 现在我们可以在匿名函数中用$访问 jQuery，用 YAHOO 访问全局变量的 YAHOO 了。\n}(jQuery, YAHOO));\n```\n\n\n\n### 模块导出\n\n有时候你声明变量的时候并不想使用全局变量，而是局部变量，这时候你可以通过把变量当做匿名函数的返回值导出来达到目的。这也就是基本的JavaScript 模块模式，来看一个例子：\n\n\n\n```\nvar MODULE = (function () {\n\tvar my = {},\n\t    privateVariable = 1;\n\n\tfunction privateMethod() {\n\t\t// ...\n\t}\n\n\tmy.moduleProperty = 1;\n\tmy.moduleMethod = function () {\n\t\t// ...\n\t};\n\n\treturn my;\n}());\n```\n\n\n\n注意到这里我们声明了一个叫做`MODULE`的全局模块，它有两个公有属性：一个叫做`MODULE.moduleMethod`的函数，和一个叫做`MODULE.moduleProperty`的属性。应该留意的是它利用匿名函数的闭包维护了`私有的内部状态`，而且，利用上面我们所学的全局导入，我们可以很容易的导入我们所需要的全局变量。\n\n## 高级模式\n\n虽然上面所学的知识已经足够应付大部分的情况，但对于 JavaScript 模块模式，我们仍然可以更进一步，创建一些强大的，可扩展的模式。那我们现在通过一个名叫 `MODULE` 的模块来把这些模式过一遍。\n\n### 扩容（Augmentation）\n\n到目前为止我们见到的模块都有一个限制，就是整个模块只能存活于一个源文件中，而任何一个在大型项目中工作过的人都会理解把一个模块分解到多个源文件的价值。还好，我们有一个很漂亮的解决方案叫做 `模块扩容`。首先我们导入模块，然后我们增加一些属性，再重新导出这个模块，从而对上述的 `MODULE` 模块达到扩容的目的：\n\n\n\n```\nvar MODULE = (function (my) {\n\tmy.anotherMethod = function () {\n\t\t// 增加新方法\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n\n虽然不是必须的，但我们仍然使用了 var 关键字来保持一致性。上面的代码运行以后，我们的模块将会拥有一个新的公有方法叫做 `MODULE.anotherMethod`，这个额外的源文件仍然可以维护它自己的私有内部状态和导入的变量。\n\n### 宽松扩容（Loose Augmentation）\n\n虽然我们上面的例子要求初始的模块必须先被创建，然后才可以进行扩容，但是事实上也不是必须这样做。JavaScript 中为了提高性能，可以异步的加载脚本。我们可以灵活的创建由多个部分组成的模块，并通过宽松扩容来以任何顺序加载它们。要求就是，每个源文件有如下的代码结构：\n\n\n\n```\nvar MODULE = (function (my) {\n\t// add capabilities...\n\n\treturn my;\n}(MODULE || {}));\n```\n\n\n\n这个模式中的`var`关键字是必须的，另外注意到，被导入的模块如果尚未存在的话，将会被创建，这意味着你可以使用像[LAB.js](http://labjs.com/)这样的工具来并行的加载这些模块，而通常情况下多个模块同时加载则会被阻塞。\n\n### 紧缩扩容（Tight Augmentation）\n\n虽然宽松扩容很赞，但是它还是在你的模块上加了一些限制，最关键的问题是你无法安全的覆盖模块(Overwrite)属性。另外在模块初始化的时候，你不能使用来自其他源文件的模块（但是在运行时是可以的）。而紧缩扩容指定了一系列加载顺序，并且运行覆盖，下面是一个简单的例子（为前面的 `MODULE` 模块扩容）：\n\n\n```\nvar MODULE = (function (my) {\n\tvar old_moduleMethod = my.moduleMethod;\n\n\tmy.moduleMethod = function () {\n\t\t// 方法覆盖，但是仍然通过 old_module.moduleMethod 保持对原有方法的访问\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n\n这里我们覆盖了`MODULE.moduleMethod`，但是如果需要的话，我们仍然可以访问被覆盖方法。\n\n### 克隆和继承（Cloning and Inheritance）\n\n\n\n```\nvar MODULE_TWO = (function (old) {\n\tvar my = {},\n\t\tkey;\n\n\tfor (key in old) {\n\t\tif (old.hasOwnProperty(key)) {\n\t\t\tmy[key] = old[key];\n\t\t}\n\t}\n\n\tvar super_moduleMethod = old.moduleMethod;\n\tmy.moduleMethod = function () {\n\t    // 覆盖被克隆的方法，并通过 super_moduleMethod 维护对服方法的访问\n\t};\n\n\treturn my;\n}(MODULE));\n```\n\n\n这个模式可能是最`不灵活`的，虽然它允许一些巧妙的组合(compositions)，但是以付出灵活性为代价。就像我之前所写的，一些作为属性的对象和函数不会被复制，他们仅仅作为一个对象的两个引用而存在。改变其中的一个则会同时改变另外一个。即使我们可以通过递归的克隆来解决这个问题，对函数我们仍然没有更多的办法，除了使用 `eval`。在这篇文章包括这个模式仅仅是为了完整性。\n\n### 跨文件私有状态（Cross-File Private State）\n\n把一个模块分割到多个文件的最大缺陷是每个文件都将会维护它自己的私有状态，并且没有任何途径访问其他文件的私有状态。这个问题有解决方案，下面这个宽松扩容模块（Loose Augmentation Module）的例子可以 `维护跨所有扩容模块的私有状态`。\n\n\n\n```\nvar MODULE = (function (my) {\n\tvar _private = my._private = my._private || {},\n\t\t_seal = my._seal = my._seal || function () {\n\t\t\tdelete my._private;\n\t\t\tdelete my._seal;\n\t\t\tdelete my._unseal;\n\t\t},\n\t\t_unseal = my._unseal = my._unseal || function () {\n\t\t\tmy._private = _private;\n\t\t\tmy._seal = _seal;\n\t\t\tmy._unseal = _unseal;\n\t\t};\n\n\t// 永久维护了对_private, _seal, 和 _unseal 私有状态的访问\n\n\treturn my;\n}(MODULE || {}));\n```\n\n\n\n在这里，任何文件都可以在 `_private` 中设置它们的局部私有变量，它们立即对其他文件可见。在这个模块完全加载以后，该应用程序应该调用 `MODULE._seal()`, 它可以阻止模块外部对内部的 `_private` 变量的访问。如果这个模块在整个应用程序的存活期间内被再次扩容，模块内部的方法可以在新文件被加载之前再次调用 `_seal()`，然后在方法被执行之后再次调用 `_unseal()`。这个模式是我今天在工作的时候突然想到的，而且之前我在其他地方都没见过它。我认为它是一个非常有用的模式，而且这个模式也值得单独写一篇文章。\n\n### 子模块（Sub-modules）\n\n我们要讨论的最后一个高级模式其实是最简单的，而且已经有很多创建子模块的很好的用例，其实它就像创建普通的模块一样：\n\n\n\n```\nMODULE.sub = (function () {\n\tvar my = {};\n\t// ...\n\n\treturn my;\n}());\n```\n\n\n\n虽然看起来很简单，但我认为它值得在这里一提。子模块具有普通模块的所有高级特性，包括扩容和私有状态。\n\n## 结论（Conclusions）\n\n大部分 JavaScript 模块的高级模式可以被组合起来，并得到更多的有用的模式。如果是非选不可的话，我提倡组合 `宽松扩容`，`私有状态`，和 `子模块`来设计复杂应用程序这样一种途径，我自己也曾经这样做过。\n\n在这篇文章里我还没有讨论过性能，这里我可以给出一个小小的提示：模块模式对 `提升性能` 很有好处。模块化的代码可以被很好的压缩，从而可以更快的下载，使用 `宽松的扩容(loose augmentation)` 模式使得非阻塞并行下载成为可能，也可以提高下载速度。虽然和其他方法相比，初始化的时间可能略有增加，但是这样的折衷是值得的。并且，只要全局变量都正确导入了，运行时性能应该不会降低，甚至会有所增加，因为局部变量的引用搜索链被模块缩短了。\n\n最后通过一个例子总结一下：一个用来加载自身的子模块，如果模块尚不存在的话就创建一个新的。为了使程序简短，我去掉了私有状态，但是把它加进来也不是什么难事。这个模式允许并发加载一个具有层级关系的，复杂的代码库，这个代码库包括该模块自身，子模块和其他所有的模块。\n\n\n\n```\nvar UTIL = (function (parent, $) {\n\tvar my = parent.ajax = parent.ajax || {};\n\n\tmy.get = function (url, params, callback) {\n\t\t// ok, so I'm cheating a bit :)\n\t\treturn $.getJSON(url, params, callback);\n\t};\n\n\t// etc...\n\n\treturn parent;\n}(UTIL || {}, jQuery));\n```\n\n\n\n我希望你会觉得这篇文章所讲述的东西都很有用，也请你在评论处留下你的想法，现在你可以继续去写更好，也更模块化的 JavaScript 代码了。\n\n_这篇文章在[Ajaxian.com](http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern) 上被加精了，在那里的评论区有更多的讨论，那些评论和本文下面的这些评论都值得一读。_\n\n### 资源\n\n[JavaScript Module Pattern: In-Depth](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)\n\n[JavaScript 模块化的博客](http://yuiblog.com/blog/2007/06/12/module-pattern/)\n\n[jQuery](http://jquery.com/)\n\n[YUI](http://yuilibrary.com/)\n","slug":"jsmodule","published":1,"updated":"2016-11-30T03:05:29.556Z","comments":1,"photos":[],"link":"","_id":"cj4sal69h000uek5blgpdynyo","content":"<h2 id=\"译文：\"><a href=\"#译文：\" class=\"headerlink\" title=\"译文：\"></a>译文：</h2><p>模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了，但是它仍然有一些没有引起足够重视的高级用法。<br>在这篇文章中，我会回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题，其中甚至有一个是我自己原创的。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>我们从一些简单的回顾开始，这些知识在 Eric Miraglia（YUI 作者）在几年前写了关于 <a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\" target=\"_blank\" rel=\"external\">JavaScript 模块化的博客</a> 之后就人尽皆知了。如果你已经非常熟悉 JavaScript 模块化，那么请直接跳至“高级模式”部分。</p>\n<h3 id=\"匿名闭包\"><a href=\"#匿名闭包\" class=\"headerlink\" title=\"匿名闭包\"></a>匿名闭包</h3><p>这是 JavaScript 模块化得以实现的基础，也是 JavaScript 最佳的特性，没有之一。我们只需要创建一个匿名函数，并立刻执行它，<br>这个匿名函数中运行的所有的代码就会存活于一个闭包之中，并在应用程序的生命周期内提供私密性和状态。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 所有的变量和函数都只属于本作用域</span></div><div class=\"line\">\t<span class=\"comment\">// 但仍然维护着对全局作用域的访问</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>请注意那个包围在匿名函数外的<code>( )</code>，为了满足 JavaScript 语法的正确性，我们必须添加它，因为以 function 开头的语句总是被认为是函数声明，被 <code>( )</code> 括起来以后函数声明则变成了函数表达式。</p>\n<h3 id=\"全局导入\"><a href=\"#全局导入\" class=\"headerlink\" title=\"全局导入\"></a>全局导入</h3><p>JavaScript 有一个特性叫做“隐含全局”。任何时候，只要有被使用的变量名，JavaScript 解释器就会沿着作用域链向上查找一个定义了该变量名的 var 声明。如果在这个过程中没有找到这个变量声明，那这个变量就假定是全局的。而如果这个变量是被赋值而且此时这个变量尚不存在，那么这个变量会被创建为全局变量，这也意味着在匿名闭包中可以很容易的创建全局变量。不过，很不幸，这样会导致难以维护的代码，因为对人来说，很难区分在一个源文件中那些变量是全局的。</p>\n<p>幸好，匿名函数为这种情况提供了一个简单的解决方案，我们可以把全局变量作为参数传入匿名函数，从而把他们的导入我们的代码，这样既清晰，相比“默认全局”又可以提高性能，来看一个例子：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span> ($, YAHOO) &#123;</div><div class=\"line\">\t// 现在我们可以在匿名函数中用$访问 jQuery，用 YAHOO 访问全局变量的 YAHOO 了。</div><div class=\"line\">&#125;(<span class=\"name\">jQuery</span>, YAHOO))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"模块导出\"><a href=\"#模块导出\" class=\"headerlink\" title=\"模块导出\"></a>模块导出</h3><p>有时候你声明变量的时候并不想使用全局变量，而是局部变量，这时候你可以通过把变量当做匿名函数的返回值导出来达到目的。这也就是基本的JavaScript 模块模式，来看一个例子：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">\t    privateVariable = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmy.moduleProperty = <span class=\"number\">1</span>;</div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>注意到这里我们声明了一个叫做<code>MODULE</code>的全局模块，它有两个公有属性：一个叫做<code>MODULE.moduleMethod</code>的函数，和一个叫做<code>MODULE.moduleProperty</code>的属性。应该留意的是它利用匿名函数的闭包维护了<code>私有的内部状态</code>，而且，利用上面我们所学的全局导入，我们可以很容易的导入我们所需要的全局变量。</p>\n<h2 id=\"高级模式\"><a href=\"#高级模式\" class=\"headerlink\" title=\"高级模式\"></a>高级模式</h2><p>虽然上面所学的知识已经足够应付大部分的情况，但对于 JavaScript 模块模式，我们仍然可以更进一步，创建一些强大的，可扩展的模式。那我们现在通过一个名叫 <code>MODULE</code> 的模块来把这些模式过一遍。</p>\n<h3 id=\"扩容（Augmentation）\"><a href=\"#扩容（Augmentation）\" class=\"headerlink\" title=\"扩容（Augmentation）\"></a>扩容（Augmentation）</h3><p>到目前为止我们见到的模块都有一个限制，就是整个模块只能存活于一个源文件中，而任何一个在大型项目中工作过的人都会理解把一个模块分解到多个源文件的价值。还好，我们有一个很漂亮的解决方案叫做 <code>模块扩容</code>。首先我们导入模块，然后我们增加一些属性，再重新导出这个模块，从而对上述的 <code>MODULE</code> 模块达到扩容的目的：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\tmy.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 增加新方法</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>虽然不是必须的，但我们仍然使用了 var 关键字来保持一致性。上面的代码运行以后，我们的模块将会拥有一个新的公有方法叫做 <code>MODULE.anotherMethod</code>，这个额外的源文件仍然可以维护它自己的私有内部状态和导入的变量。</p>\n<h3 id=\"宽松扩容（Loose-Augmentation）\"><a href=\"#宽松扩容（Loose-Augmentation）\" class=\"headerlink\" title=\"宽松扩容（Loose Augmentation）\"></a>宽松扩容（Loose Augmentation）</h3><p>虽然我们上面的例子要求初始的模块必须先被创建，然后才可以进行扩容，但是事实上也不是必须这样做。JavaScript 中为了提高性能，可以异步的加载脚本。我们可以灵活的创建由多个部分组成的模块，并通过宽松扩容来以任何顺序加载它们。要求就是，每个源文件有如下的代码结构：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MODULE = (<span class=\"name\">function</span> (<span class=\"name\">my</span>) &#123;</div><div class=\"line\">\t// add capabilities...</div><div class=\"line\"></div><div class=\"line\">\treturn my<span class=\"comment\">;</span></div><div class=\"line\">&#125;(<span class=\"name\">MODULE</span> || &#123;&#125;))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>这个模式中的<code>var</code>关键字是必须的，另外注意到，被导入的模块如果尚未存在的话，将会被创建，这意味着你可以使用像<a href=\"http://labjs.com/\" target=\"_blank\" rel=\"external\">LAB.js</a>这样的工具来并行的加载这些模块，而通常情况下多个模块同时加载则会被阻塞。</p>\n<h3 id=\"紧缩扩容（Tight-Augmentation）\"><a href=\"#紧缩扩容（Tight-Augmentation）\" class=\"headerlink\" title=\"紧缩扩容（Tight Augmentation）\"></a>紧缩扩容（Tight Augmentation）</h3><p>虽然宽松扩容很赞，但是它还是在你的模块上加了一些限制，最关键的问题是你无法安全的覆盖模块(Overwrite)属性。另外在模块初始化的时候，你不能使用来自其他源文件的模块（但是在运行时是可以的）。而紧缩扩容指定了一系列加载顺序，并且运行覆盖，下面是一个简单的例子（为前面的 <code>MODULE</code> 模块扩容）：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> old_moduleMethod = my.moduleMethod;</div><div class=\"line\"></div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 方法覆盖，但是仍然通过 old_module.moduleMethod 保持对原有方法的访问</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>这里我们覆盖了<code>MODULE.moduleMethod</code>，但是如果需要的话，我们仍然可以访问被覆盖方法。</p>\n<h3 id=\"克隆和继承（Cloning-and-Inheritance）\"><a href=\"#克隆和继承（Cloning-and-Inheritance）\" class=\"headerlink\" title=\"克隆和继承（Cloning and Inheritance）\"></a>克隆和继承（Cloning and Inheritance）</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(old)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">\t\tkey;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> old) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (old.hasOwnProperty(key)) &#123;</div><div class=\"line\">\t\t\tmy[key] = old[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 覆盖被克隆的方法，并通过 super_moduleMethod 维护对服方法的访问</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>这个模式可能是最<code>不灵活</code>的，虽然它允许一些巧妙的组合(compositions)，但是以付出灵活性为代价。就像我之前所写的，一些作为属性的对象和函数不会被复制，他们仅仅作为一个对象的两个引用而存在。改变其中的一个则会同时改变另外一个。即使我们可以通过递归的克隆来解决这个问题，对函数我们仍然没有更多的办法，除了使用 <code>eval</code>。在这篇文章包括这个模式仅仅是为了完整性。</p>\n<h3 id=\"跨文件私有状态（Cross-File-Private-State）\"><a href=\"#跨文件私有状态（Cross-File-Private-State）\" class=\"headerlink\" title=\"跨文件私有状态（Cross-File Private State）\"></a>跨文件私有状态（Cross-File Private State）</h3><p>把一个模块分割到多个文件的最大缺陷是每个文件都将会维护它自己的私有状态，并且没有任何途径访问其他文件的私有状态。这个问题有解决方案，下面这个宽松扩容模块（Loose Augmentation Module）的例子可以 <code>维护跨所有扩容模块的私有状态</code>。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> _private = my._private = my._private || &#123;&#125;,</div><div class=\"line\">\t\t_seal = my._seal = my._seal || <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._private;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._seal;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._unseal;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t_unseal = my._unseal = my._unseal || <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tmy._private = _private;</div><div class=\"line\">\t\t\tmy._seal = _seal;</div><div class=\"line\">\t\t\tmy._unseal = _unseal;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 永久维护了对_private, _seal, 和 _unseal 私有状态的访问</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE || &#123;&#125;));</div></pre></td></tr></table></figure>\n<p>在这里，任何文件都可以在 <code>_private</code> 中设置它们的局部私有变量，它们立即对其他文件可见。在这个模块完全加载以后，该应用程序应该调用 <code>MODULE._seal()</code>, 它可以阻止模块外部对内部的 <code>_private</code> 变量的访问。如果这个模块在整个应用程序的存活期间内被再次扩容，模块内部的方法可以在新文件被加载之前再次调用 <code>_seal()</code>，然后在方法被执行之后再次调用 <code>_unseal()</code>。这个模式是我今天在工作的时候突然想到的，而且之前我在其他地方都没见过它。我认为它是一个非常有用的模式，而且这个模式也值得单独写一篇文章。</p>\n<h3 id=\"子模块（Sub-modules）\"><a href=\"#子模块（Sub-modules）\" class=\"headerlink\" title=\"子模块（Sub-modules）\"></a>子模块（Sub-modules）</h3><p>我们要讨论的最后一个高级模式其实是最简单的，而且已经有很多创建子模块的很好的用例，其实它就像创建普通的模块一样：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MODULE.sub = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>虽然看起来很简单，但我认为它值得在这里一提。子模块具有普通模块的所有高级特性，包括扩容和私有状态。</p>\n<h2 id=\"结论（Conclusions）\"><a href=\"#结论（Conclusions）\" class=\"headerlink\" title=\"结论（Conclusions）\"></a>结论（Conclusions）</h2><p>大部分 JavaScript 模块的高级模式可以被组合起来，并得到更多的有用的模式。如果是非选不可的话，我提倡组合 <code>宽松扩容</code>，<code>私有状态</code>，和 <code>子模块</code>来设计复杂应用程序这样一种途径，我自己也曾经这样做过。</p>\n<p>在这篇文章里我还没有讨论过性能，这里我可以给出一个小小的提示：模块模式对 <code>提升性能</code> 很有好处。模块化的代码可以被很好的压缩，从而可以更快的下载，使用 <code>宽松的扩容(loose augmentation)</code> 模式使得非阻塞并行下载成为可能，也可以提高下载速度。虽然和其他方法相比，初始化的时间可能略有增加，但是这样的折衷是值得的。并且，只要全局变量都正确导入了，运行时性能应该不会降低，甚至会有所增加，因为局部变量的引用搜索链被模块缩短了。</p>\n<p>最后通过一个例子总结一下：一个用来加载自身的子模块，如果模块尚不存在的话就创建一个新的。为了使程序简短，我去掉了私有状态，但是把它加进来也不是什么难事。这个模式允许并发加载一个具有层级关系的，复杂的代码库，这个代码库包括该模块自身，子模块和其他所有的模块。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> UTIL = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, $</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">var</span> my = <span class=\"built_in\">parent</span>.ajax = <span class=\"built_in\">parent</span>.ajax || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\tmy.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, params, callback</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ok, so I'm cheating a bit :)</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> $.getJSON(<span class=\"built_in\">url</span>, params, callback);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// etc...</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">parent</span>;</div><div class=\"line\">&#125;(UTIL || &#123;&#125;, jQuery));</div></pre></td></tr></table></figure>\n<p>我希望你会觉得这篇文章所讲述的东西都很有用，也请你在评论处留下你的想法，现在你可以继续去写更好，也更模块化的 JavaScript 代码了。</p>\n<p><em>这篇文章在<a href=\"http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern\" target=\"_blank\" rel=\"external\">Ajaxian.com</a> 上被加精了，在那里的评论区有更多的讨论，那些评论和本文下面的这些评论都值得一读。</em></p>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p><a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\" target=\"_blank\" rel=\"external\">JavaScript Module Pattern: In-Depth</a></p>\n<p><a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\" target=\"_blank\" rel=\"external\">JavaScript 模块化的博客</a></p>\n<p><a href=\"http://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a></p>\n<p><a href=\"http://yuilibrary.com/\" target=\"_blank\" rel=\"external\">YUI</a></p>\n","excerpt":"","more":"<h2 id=\"译文：\"><a href=\"#译文：\" class=\"headerlink\" title=\"译文：\"></a>译文：</h2><p>模块化是 JavaScript 中很常见的模式，这个模式已经被广泛的理解并接受了，但是它仍然有一些没有引起足够重视的高级用法。<br>在这篇文章中，我会回顾模块化的基础知识并覆盖一些需要引起足够注意力的高级主题，其中甚至有一个是我自己原创的。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>我们从一些简单的回顾开始，这些知识在 Eric Miraglia（YUI 作者）在几年前写了关于 <a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\">JavaScript 模块化的博客</a> 之后就人尽皆知了。如果你已经非常熟悉 JavaScript 模块化，那么请直接跳至“高级模式”部分。</p>\n<h3 id=\"匿名闭包\"><a href=\"#匿名闭包\" class=\"headerlink\" title=\"匿名闭包\"></a>匿名闭包</h3><p>这是 JavaScript 模块化得以实现的基础，也是 JavaScript 最佳的特性，没有之一。我们只需要创建一个匿名函数，并立刻执行它，<br>这个匿名函数中运行的所有的代码就会存活于一个闭包之中，并在应用程序的生命周期内提供私密性和状态。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 所有的变量和函数都只属于本作用域</span></div><div class=\"line\">\t<span class=\"comment\">// 但仍然维护着对全局作用域的访问</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>请注意那个包围在匿名函数外的<code>( )</code>，为了满足 JavaScript 语法的正确性，我们必须添加它，因为以 function 开头的语句总是被认为是函数声明，被 <code>( )</code> 括起来以后函数声明则变成了函数表达式。</p>\n<h3 id=\"全局导入\"><a href=\"#全局导入\" class=\"headerlink\" title=\"全局导入\"></a>全局导入</h3><p>JavaScript 有一个特性叫做“隐含全局”。任何时候，只要有被使用的变量名，JavaScript 解释器就会沿着作用域链向上查找一个定义了该变量名的 var 声明。如果在这个过程中没有找到这个变量声明，那这个变量就假定是全局的。而如果这个变量是被赋值而且此时这个变量尚不存在，那么这个变量会被创建为全局变量，这也意味着在匿名闭包中可以很容易的创建全局变量。不过，很不幸，这样会导致难以维护的代码，因为对人来说，很难区分在一个源文件中那些变量是全局的。</p>\n<p>幸好，匿名函数为这种情况提供了一个简单的解决方案，我们可以把全局变量作为参数传入匿名函数，从而把他们的导入我们的代码，这样既清晰，相比“默认全局”又可以提高性能，来看一个例子：</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span> ($, YAHOO) &#123;</div><div class=\"line\">\t// 现在我们可以在匿名函数中用$访问 jQuery，用 YAHOO 访问全局变量的 YAHOO 了。</div><div class=\"line\">&#125;(<span class=\"name\">jQuery</span>, YAHOO))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"模块导出\"><a href=\"#模块导出\" class=\"headerlink\" title=\"模块导出\"></a>模块导出</h3><p>有时候你声明变量的时候并不想使用全局变量，而是局部变量，这时候你可以通过把变量当做匿名函数的返回值导出来达到目的。这也就是基本的JavaScript 模块模式，来看一个例子：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">\t    privateVariable = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmy.moduleProperty = <span class=\"number\">1</span>;</div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ...</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>注意到这里我们声明了一个叫做<code>MODULE</code>的全局模块，它有两个公有属性：一个叫做<code>MODULE.moduleMethod</code>的函数，和一个叫做<code>MODULE.moduleProperty</code>的属性。应该留意的是它利用匿名函数的闭包维护了<code>私有的内部状态</code>，而且，利用上面我们所学的全局导入，我们可以很容易的导入我们所需要的全局变量。</p>\n<h2 id=\"高级模式\"><a href=\"#高级模式\" class=\"headerlink\" title=\"高级模式\"></a>高级模式</h2><p>虽然上面所学的知识已经足够应付大部分的情况，但对于 JavaScript 模块模式，我们仍然可以更进一步，创建一些强大的，可扩展的模式。那我们现在通过一个名叫 <code>MODULE</code> 的模块来把这些模式过一遍。</p>\n<h3 id=\"扩容（Augmentation）\"><a href=\"#扩容（Augmentation）\" class=\"headerlink\" title=\"扩容（Augmentation）\"></a>扩容（Augmentation）</h3><p>到目前为止我们见到的模块都有一个限制，就是整个模块只能存活于一个源文件中，而任何一个在大型项目中工作过的人都会理解把一个模块分解到多个源文件的价值。还好，我们有一个很漂亮的解决方案叫做 <code>模块扩容</code>。首先我们导入模块，然后我们增加一些属性，再重新导出这个模块，从而对上述的 <code>MODULE</code> 模块达到扩容的目的：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\tmy.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 增加新方法</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>虽然不是必须的，但我们仍然使用了 var 关键字来保持一致性。上面的代码运行以后，我们的模块将会拥有一个新的公有方法叫做 <code>MODULE.anotherMethod</code>，这个额外的源文件仍然可以维护它自己的私有内部状态和导入的变量。</p>\n<h3 id=\"宽松扩容（Loose-Augmentation）\"><a href=\"#宽松扩容（Loose-Augmentation）\" class=\"headerlink\" title=\"宽松扩容（Loose Augmentation）\"></a>宽松扩容（Loose Augmentation）</h3><p>虽然我们上面的例子要求初始的模块必须先被创建，然后才可以进行扩容，但是事实上也不是必须这样做。JavaScript 中为了提高性能，可以异步的加载脚本。我们可以灵活的创建由多个部分组成的模块，并通过宽松扩容来以任何顺序加载它们。要求就是，每个源文件有如下的代码结构：</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MODULE = (<span class=\"name\">function</span> (<span class=\"name\">my</span>) &#123;</div><div class=\"line\">\t// add capabilities...</div><div class=\"line\"></div><div class=\"line\">\treturn my<span class=\"comment\">;</span></div><div class=\"line\">&#125;(<span class=\"name\">MODULE</span> || &#123;&#125;))<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<p>这个模式中的<code>var</code>关键字是必须的，另外注意到，被导入的模块如果尚未存在的话，将会被创建，这意味着你可以使用像<a href=\"http://labjs.com/\">LAB.js</a>这样的工具来并行的加载这些模块，而通常情况下多个模块同时加载则会被阻塞。</p>\n<h3 id=\"紧缩扩容（Tight-Augmentation）\"><a href=\"#紧缩扩容（Tight-Augmentation）\" class=\"headerlink\" title=\"紧缩扩容（Tight Augmentation）\"></a>紧缩扩容（Tight Augmentation）</h3><p>虽然宽松扩容很赞，但是它还是在你的模块上加了一些限制，最关键的问题是你无法安全的覆盖模块(Overwrite)属性。另外在模块初始化的时候，你不能使用来自其他源文件的模块（但是在运行时是可以的）。而紧缩扩容指定了一系列加载顺序，并且运行覆盖，下面是一个简单的例子（为前面的 <code>MODULE</code> 模块扩容）：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> old_moduleMethod = my.moduleMethod;</div><div class=\"line\"></div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 方法覆盖，但是仍然通过 old_module.moduleMethod 保持对原有方法的访问</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>这里我们覆盖了<code>MODULE.moduleMethod</code>，但是如果需要的话，我们仍然可以访问被覆盖方法。</p>\n<h3 id=\"克隆和继承（Cloning-and-Inheritance）\"><a href=\"#克隆和继承（Cloning-and-Inheritance）\" class=\"headerlink\" title=\"克隆和继承（Cloning and Inheritance）\"></a>克隆和继承（Cloning and Inheritance）</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE_TWO = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(old)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;,</div><div class=\"line\">\t\tkey;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> old) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (old.hasOwnProperty(key)) &#123;</div><div class=\"line\">\t\t\tmy[key] = old[key];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> super_moduleMethod = old.moduleMethod;</div><div class=\"line\">\tmy.moduleMethod = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 覆盖被克隆的方法，并通过 super_moduleMethod 维护对服方法的访问</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE));</div></pre></td></tr></table></figure>\n<p>这个模式可能是最<code>不灵活</code>的，虽然它允许一些巧妙的组合(compositions)，但是以付出灵活性为代价。就像我之前所写的，一些作为属性的对象和函数不会被复制，他们仅仅作为一个对象的两个引用而存在。改变其中的一个则会同时改变另外一个。即使我们可以通过递归的克隆来解决这个问题，对函数我们仍然没有更多的办法，除了使用 <code>eval</code>。在这篇文章包括这个模式仅仅是为了完整性。</p>\n<h3 id=\"跨文件私有状态（Cross-File-Private-State）\"><a href=\"#跨文件私有状态（Cross-File-Private-State）\" class=\"headerlink\" title=\"跨文件私有状态（Cross-File Private State）\"></a>跨文件私有状态（Cross-File Private State）</h3><p>把一个模块分割到多个文件的最大缺陷是每个文件都将会维护它自己的私有状态，并且没有任何途径访问其他文件的私有状态。这个问题有解决方案，下面这个宽松扩容模块（Loose Augmentation Module）的例子可以 <code>维护跨所有扩容模块的私有状态</code>。</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MODULE = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(my)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> _private = my._private = my._private || &#123;&#125;,</div><div class=\"line\">\t\t_seal = my._seal = my._seal || <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._private;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._seal;</div><div class=\"line\">\t\t\t<span class=\"keyword\">delete</span> my._unseal;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t_unseal = my._unseal = my._unseal || <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tmy._private = _private;</div><div class=\"line\">\t\t\tmy._seal = _seal;</div><div class=\"line\">\t\t\tmy._unseal = _unseal;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 永久维护了对_private, _seal, 和 _unseal 私有状态的访问</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;(MODULE || &#123;&#125;));</div></pre></td></tr></table></figure>\n<p>在这里，任何文件都可以在 <code>_private</code> 中设置它们的局部私有变量，它们立即对其他文件可见。在这个模块完全加载以后，该应用程序应该调用 <code>MODULE._seal()</code>, 它可以阻止模块外部对内部的 <code>_private</code> 变量的访问。如果这个模块在整个应用程序的存活期间内被再次扩容，模块内部的方法可以在新文件被加载之前再次调用 <code>_seal()</code>，然后在方法被执行之后再次调用 <code>_unseal()</code>。这个模式是我今天在工作的时候突然想到的，而且之前我在其他地方都没见过它。我认为它是一个非常有用的模式，而且这个模式也值得单独写一篇文章。</p>\n<h3 id=\"子模块（Sub-modules）\"><a href=\"#子模块（Sub-modules）\" class=\"headerlink\" title=\"子模块（Sub-modules）\"></a>子模块（Sub-modules）</h3><p>我们要讨论的最后一个高级模式其实是最简单的，而且已经有很多创建子模块的很好的用例，其实它就像创建普通的模块一样：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MODULE.sub = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> my = &#123;&#125;;</div><div class=\"line\">\t<span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> my;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>虽然看起来很简单，但我认为它值得在这里一提。子模块具有普通模块的所有高级特性，包括扩容和私有状态。</p>\n<h2 id=\"结论（Conclusions）\"><a href=\"#结论（Conclusions）\" class=\"headerlink\" title=\"结论（Conclusions）\"></a>结论（Conclusions）</h2><p>大部分 JavaScript 模块的高级模式可以被组合起来，并得到更多的有用的模式。如果是非选不可的话，我提倡组合 <code>宽松扩容</code>，<code>私有状态</code>，和 <code>子模块</code>来设计复杂应用程序这样一种途径，我自己也曾经这样做过。</p>\n<p>在这篇文章里我还没有讨论过性能，这里我可以给出一个小小的提示：模块模式对 <code>提升性能</code> 很有好处。模块化的代码可以被很好的压缩，从而可以更快的下载，使用 <code>宽松的扩容(loose augmentation)</code> 模式使得非阻塞并行下载成为可能，也可以提高下载速度。虽然和其他方法相比，初始化的时间可能略有增加，但是这样的折衷是值得的。并且，只要全局变量都正确导入了，运行时性能应该不会降低，甚至会有所增加，因为局部变量的引用搜索链被模块缩短了。</p>\n<p>最后通过一个例子总结一下：一个用来加载自身的子模块，如果模块尚不存在的话就创建一个新的。为了使程序简短，我去掉了私有状态，但是把它加进来也不是什么难事。这个模式允许并发加载一个具有层级关系的，复杂的代码库，这个代码库包括该模块自身，子模块和其他所有的模块。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">var</span> UTIL = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">parent, $</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">var</span> my = <span class=\"built_in\">parent</span>.ajax = <span class=\"built_in\">parent</span>.ajax || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\tmy.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, params, callback</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// ok, so I'm cheating a bit :)</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> $.getJSON(<span class=\"built_in\">url</span>, params, callback);</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// etc...</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">parent</span>;</div><div class=\"line\">&#125;(UTIL || &#123;&#125;, jQuery));</div></pre></td></tr></table></figure>\n<p>我希望你会觉得这篇文章所讲述的东西都很有用，也请你在评论处留下你的想法，现在你可以继续去写更好，也更模块化的 JavaScript 代码了。</p>\n<p><em>这篇文章在<a href=\"http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern\">Ajaxian.com</a> 上被加精了，在那里的评论区有更多的讨论，那些评论和本文下面的这些评论都值得一读。</em></p>\n<h3 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h3><p><a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\">JavaScript Module Pattern: In-Depth</a></p>\n<p><a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\">JavaScript 模块化的博客</a></p>\n<p><a href=\"http://jquery.com/\">jQuery</a></p>\n<p><a href=\"http://yuilibrary.com/\">YUI</a></p>\n"},{"title":"JavaScript编码规范","layout":"post","date":"2017-02-23T11:42:55.000Z","keywords":"javascript","description":"JavaScript在百度一直有着广泛的应用,特别是在浏览器端的行为管理.本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护,虽然本文档是针对JavaScript设计的,但是在使用各种JavaScript的预编译语言时(如TypeScript等)时,适用的部分也应尽量遵循本文档的约定","_content":"\n\n\n```\n虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定\n```\n\n\n#\n\n## 1 前言\n\n\nJavaScript在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。\n\n虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。\n\n\n\n## 2 代码风格\n\n\n\n\n\n\n### 2.1 文件\n\n\n##### [建议] `JavaScript` 文件使用无 `BOM` 的 `UTF-8` 编码。\n\n解释：\n\nUTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。\n\n##### [建议] 在文件结尾处，保留一个空行。\n\n\n\n\n### 2.2 结构\n\n\n\n#### 2.2.1 缩进\n\n\n##### [强制] 使用 `4` 个空格做为一个缩进层级，不允许使用 `2` 个空格 或 `tab` 字符。\n\n\n\n##### [强制] `switch` 下的 `case` 和 `default` 必须增加一个缩进层级。\n\n示例：\n\n```javascript\n// good\nswitch (variable) {\n\n    case '1':\n        // do...\n        break;\n\n    case '2':\n        // do...\n        break;\n\n    default:\n        // do...\n\n}\n\n// bad\nswitch (variable) {\n\ncase '1':\n    // do...\n    break;\n\ncase '2':\n    // do...\n    break;\n\ndefault:\n    // do...\n\n}\n```\n\n#### 2.2.2 空格\n\n\n\n##### [强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\n\n示例：\n\n```javascript\nvar a = !arr.length;\na++;\na = b + c;\n```\n\n##### [强制] 用作代码块起始的左花括号 `{` 前必须有一个空格。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n}\n\nwhile (condition) {\n}\n\nfunction funcName() {\n}\n\n// bad\nif (condition){\n}\n\nwhile (condition){\n}\n\nfunction funcName(){\n}\n```\n\n##### [强制] `if / else / for / while / function / switch / do / try / catch / finally` 关键字后，必须有一个空格。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n}\n\nwhile (condition) {\n}\n\n(function () {\n})();\n\n// bad\nif(condition) {\n}\n\nwhile(condition) {\n}\n\n(function() {\n})();\n```\n\n##### [强制] 在对象创建时，属性中的 `:` 之后必须有空格，`:` 之前不允许有空格。\n\n示例：\n\n```javascript\n// good\nvar obj = {\n    a: 1,\n    b: 2,\n    c: 3\n};\n\n// bad\nvar obj = {\n    a : 1,\n    b:2,\n    c :3\n};\n```\n\n##### [强制] 函数声明、具名函数表达式、函数调用中，函数名和 `(` 之间不允许有空格。\n\n示例：\n\n```javascript\n// good\nfunction funcName() {\n}\n\nvar funcName = function funcName() {\n};\n\nfuncName();\n\n// bad\nfunction funcName () {\n}\n\nvar funcName = function funcName () {\n};\n\nfuncName ();\n```\n\n##### [强制] `,` 和 `;` 前不允许有空格。\n\n示例：\n\n```javascript\n// good\ncallFunc(a, b);\n\n// bad\ncallFunc(a , b) ;\n```\n\n##### [强制] 在函数调用、函数声明、括号表达式、属性访问、`if / for / while / switch / catch` 等语句中，`()` 和 `[]` 内紧贴括号部分不允许有空格。\n\n示例：\n\n```javascript\n// good\n\ncallFunc(param1, param2, param3);\n\nsave(this.list[this.indexes[i]]);\n\nneedIncream && (variable += increament);\n\nif (num > list.length) {\n}\n\nwhile (len--) {\n}\n\n\n// bad\n\ncallFunc( param1, param2, param3 );\n\nsave( this.list[ this.indexes[ i ] ] );\n\nneedIncreament && ( variable += increament );\n\nif ( num > list.length ) {\n}\n\nwhile ( len-- ) {\n}\n```\n\n##### [强制] 单行声明的数组与对象，如果包含元素，`{}` 和 `[]` 内紧贴括号部分不允许包含空格。\n\n解释：\n\n声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。\n\n\n示例：\n\n```javascript\n// good\nvar arr1 = [];\nvar arr2 = [1, 2, 3];\nvar obj1 = {};\nvar obj2 = {name: 'obj'};\nvar obj3 = {\n    name: 'obj',\n    age: 20,\n    sex: 1\n};\n\n// bad\nvar arr1 = [ ];\nvar arr2 = [ 1, 2, 3 ];\nvar obj1 = { };\nvar obj2 = { name: 'obj' };\nvar obj3 = {name: 'obj', age: 20, sex: 1};\n```\n\n##### [强制] 行尾不得有多余的空格。\n\n\n#### 2.2.3 换行\n\n\n##### [强制] 每个独立语句结束后必须换行。\n\n##### [强制] 每行不得超过 `120` 个字符。\n\n解释：\n\n超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。\n\n\n##### [强制] 运算符处换行时，运算符必须在新行的行首。\n\n示例：\n\n```javascript\n// good\nif (user.isAuthenticated()\n    && user.isInRole('admin')\n    && user.hasAuthority('add-admin')\n    || user.hasAuthority('delete-admin')\n) {\n    // Code\n}\n\nvar result = number1 + number2 + number3\n    + number4 + number5;\n\n\n// bad\nif (user.isAuthenticated() &&\n    user.isInRole('admin') &&\n    user.hasAuthority('add-admin') ||\n    user.hasAuthority('delete-admin')) {\n    // Code\n}\n\nvar result = number1 + number2 + number3 +\n    number4 + number5;\n```\n\n##### [强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 `,` 或 `;` 前换行。\n\n示例：\n\n```javascript\n// good\nvar obj = {\n    a: 1,\n    b: 2,\n    c: 3\n};\n\nfoo(\n    aVeryVeryLongArgument,\n    anotherVeryLongArgument,\n    callback\n);\n\n\n// bad\nvar obj = {\n    a: 1\n    , b: 2\n    , c: 3\n};\n\nfoo(\n    aVeryVeryLongArgument\n    , anotherVeryLongArgument\n    , callback\n);\n```\n\n##### [建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。\n\n示例：\n\n```javascript\n// 仅为按逻辑换行的示例，不代表setStyle的最优实现\nfunction setStyle(element, property, value) {\n    if (element == null) {\n        return;\n    }\n\n    element.style[property] = value;\n}\n```\n\n##### [建议] 在语句的行长度超过 `120` 时，根据逻辑条件合理缩进。\n\n示例：\n\n```javascript\n// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。\n// 建议最终将右括号 ) 与左大括号 { 放在独立一行，保证与 if 内语句块能容易视觉辨识。\nif (user.isAuthenticated()\n    && user.isInRole('admin')\n    && user.hasAuthority('add-admin')\n    || user.hasAuthority('delete-admin')\n) {\n    // Code\n}\n\n// 按一定长度截断字符串，并使用 + 运算符进行连接。\n// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。\n// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。\nvar html = '' // 此处用一个空字符串，以便整个HTML片段都在新行严格对齐\n    + '<article>'\n    +     '<h1>Title here</h1>'\n    +     '<p>This is a paragraph</p>'\n    +     '<footer>Complete</footer>'\n    + '</article>';\n\n// 也可使用数组来进行拼接，相对 + 更容易调整缩进。\nvar html = [\n    '<article>',\n        '<h1>Title here</h1>',\n        '<p>This is a paragraph</p>',\n        '<footer>Complete</footer>',\n    '</article>'\n];\nhtml = html.join('');\n\n// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。\n// 所有参数必须增加一个缩进。\nfoo(\n    aVeryVeryLongArgument,\n    anotherVeryLongArgument,\n    callback\n);\n\n// 也可以按逻辑对参数进行组合。\n// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块\nbaidu.format(\n    dateFormatTemplate,\n    year, month, date, hour, minute, second\n);\n\n// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。\n// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。\nsetTimeout(\n    function () {\n        alert('hello');\n    },\n    200\n);\n\norder.data.read(\n    'id=' + me.model.id, \n    function (data) {\n        me.attchToModel(data.result);\n        callback();\n    }, \n    300\n);\n\n// 链式调用较长时采用缩进进行调整。\n$('#items')\n    .find('.selected')\n    .highlight()\n    .end();\n\n// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。\nvar result = thisIsAVeryVeryLongCondition\n    ? resultA : resultB;\n\nvar result = condition\n    ? thisIsAVeryVeryLongResult\n    : resultB;\n\n// 数组和对象初始化的混用，严格按照每个对象的 { 和结束 } 在独立一行的风格书写。\nvar array = [\n    {\n        // ...\n    },\n    {\n        // ...\n    }\n];\n```\n\n##### [建议] 对于 `if...else...`、`try...catch...finally` 等语句，推荐使用在 `}` 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。\n\n示例：\n\n```javascript\nif (condition) {\n    // some statements;\n}\nelse {\n    // some statements;\n}\n\ntry {\n    // some statements;\n}\ncatch (ex) {\n    // some statements;\n}\n```\n\n\n\n#### 2.2.4 语句\n\n\n##### [强制] 不得省略语句结束的分号。\n\n##### [强制] 在 `if / else / for / do / while` 语句中，即使只有一行，也不得省略块 `{...}`。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n    callFunc();\n}\n\n// bad\nif (condition) callFunc();\nif (condition)\n    callFunc();\n```\n\n##### [强制] 函数定义结束不允许添加分号。\n\n示例：\n\n```javascript\n// good\nfunction funcName() {\n}\n\n// bad\nfunction funcName() {\n};\n\n// 如果是函数表达式，分号是不允许省略的。\nvar funcName = function () {\n};\n```\n\n##### [强制] `IIFE` 必须在函数表达式外添加 `(`，非 `IIFE` 不得在函数表达式外添加 `(`。\n\n解释：\n\nIIFE = Immediately-Invoked Function Expression.\n\n额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。\n\n\n示例：\n\n```javascript\n// good\nvar task = (function () {\n   // Code\n   return result;\n})();\n\nvar func = function () {\n};\n\n\n// bad\nvar task = function () {\n    // Code\n    return result;\n}();\n\nvar func = (function () {\n});\n```\n\n\n\n\n\n### 2.3 命名\n\n\n##### [强制] `变量` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nvar loadingModules = {};\n```\n\n##### [强制] `常量` 使用 `全部字母大写，单词间下划线分隔` 的命名方式。\n\n示例：\n\n```javascript\nvar HTML_ENTITY = {};\n```\n\n##### [强制] `函数` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction stringFormat(source) {\n}\n```\n\n##### [强制] 函数的 `参数` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction hear(theBells) {\n}\n```\n\n\n##### [强制] `类` 使用 `Pascal命名法`。\n\n示例：\n\n```javascript\nfunction TextNode(options) {\n}\n```\n\n##### [强制] 类的 `方法 / 属性` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction TextNode(value, engine) {\n    this.value = value;\n    this.engine = engine;\n}\n\nTextNode.prototype.clone = function () {\n    return this;\n};\n```\n\n##### [强制] `枚举变量` 使用 `Pascal命名法`，`枚举的属性` 使用 `全部字母大写，单词间下划线分隔` 的命名方式。\n\n示例：\n\n```javascript\nvar TargetState = {\n    READING: 1,\n    READED: 2,\n    APPLIED: 3,\n    READY: 4\n};\n```\n\n##### [强制] `命名空间` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nequipments.heavyWeapons = {};\n```\n\n##### [强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\n\n示例：\n\n```javascript\nfunction XMLParser() {\n}\n\nfunction insertHTML(element, html) {\n}\n\nvar httpRequest = new HTTPRequest();\n```\n\n##### [强制] `类名` 使用 `名词`。\n\n示例：\n\n```javascript\nfunction Engine(options) {\n}\n```\n\n##### [建议] `函数名` 使用 `动宾短语`。\n\n示例：\n\n```javascript\nfunction getStyle(element) {\n}\n```\n\n##### [建议] `boolean` 类型的变量使用 `is` 或 `has` 开头。\n\n示例：\n\n```javascript\nvar isReady = false;\nvar hasMoreCommands = false;\n```\n\n##### [建议] `Promise对象` 用 `动宾短语的进行时` 表达。\n\n示例：\n\n```javascript\nvar loadingData = ajax.get('url');\nloadingData.then(callback);\n```\n\n\n\n\n### 2.4 注释\n\n\n#### 2.4.1 单行注释\n\n\n##### [强制] 必须独占一行。`//` 后跟一个空格，缩进与下一行被注释说明的代码一致。\n\n#### 2.4.2 多行注释\n\n\n##### [建议] 避免使用 `/*...*/` 这样的多行注释。有多行注释内容时，使用多个单行注释。\n\n\n#### 2.4.3 文档化注释\n\n\n##### [强制] 为了便于代码阅读和自文档化，以下内容必须包含以 `/**...*/` 形式的块注释中。\n\n解释：\n\n1. 文件\n2. namespace\n3. 类\n4. 函数或方法\n5. 类属性\n6. 事件\n7. 全局变量\n8. 常量\n9. AMD 模块\n\n\n##### [强制] 文档注释前必须空一行。\n\n\n##### [建议] 自文档化的文档说明 what，而不是 how。\n\n\n\n#### 2.4.4 类型定义\n\n\n##### [强制] 类型定义都是以`{`开始, 以`}`结束。\n\n解释：\n\n常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。\n\n类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。\n\n\n##### [强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。\n\n| 类型定义 | 语法示例 | 解释 |\n| ------- | ------- | --- |\n|String|{string}|--|\n|Number|{number}|--|\n|Boolean|{boolean}|--|\n|Object|{Object}|--|\n|Function|{Function}|--|\n|RegExp|{RegExp}|--|\n|Array|{Array}|--|\n|Date|{Date}|--|\n|单一类型集合|{Array.&lt;string&gt;}|string 类型的数组|\n|多类型|{(number｜boolean)}|可能是 number 类型, 也可能是 boolean 类型|\n|允许为null|{?number}|可能是 number, 也可能是 null|\n|不允许为null|{!Object}|Object 类型, 但不是 null|\n|Function类型|{function(number, boolean)}|函数, 形参类型|\n|Function带返回值|{function(number, boolean):string}|函数, 形参, 返回值类型|\n|参数可选|@param {string=} name|可选参数, =为类型后缀|\n|可变参数|@param {...number} args|变长参数,  ...为类型前缀|\n|任意类型|{*}|任意类型|\n|可选任意类型|@param {*=} name|可选参数，类型不限|\n|可变任意类型|@param {...*} args|变长参数，类型不限|\n\n\n#### 2.4.5 文件注释\n\n\n##### [强制] 文件顶部必须包含文件注释，用 `@file` 标识文件说明。\n\n示例：\n\n```javascript\n/**\n * @file Describe the file\n */\n```\n\n##### [建议] 文件注释中可以用 `@author` 标识开发者信息。\n\n解释：\n\n开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 `@author` 标识。\n\n`@author` 标识具有多人时，原则是按照 `责任` 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 `@author` 标识应该把自己的名字添加在创建人的前面。\n\n`@author` 中的名字不允许被删除。任何劳动成果都应该被尊重。\n\n业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 `@author` 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。\n\n对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 `@author` 标识。\n\n\n示例：\n\n```javascript\n/**\n * @file Describe the file\n * @author author-name(mail-name@domain.com)\n *         author-name2(mail-name2@domain.com)\n */\n```\n\n#### 2.4.6 命名空间注释\n\n\n##### [建议] 命名空间使用 `@namespace` 标识。\n\n示例：\n\n```javascript\n/**\n * @namespace\n */\nvar util = {};\n```\n\n#### 2.4.7 类注释\n\n\n##### [建议] 使用 `@class` 标记类或构造函数。\n\n解释：\n\n对于使用对象 `constructor` 属性来定义的构造函数，可以使用 `@constructor` 来标记。\n\n\n示例：\n\n```javascript\n/**\n * 描述\n *\n * @class\n */\nfunction Developer() {\n    // constructor body\n}\n```\n\n##### [建议] 使用 `@extends` 标记类的继承信息。\n\n示例：\n\n```javascript\n/**\n * 描述\n *\n * @class\n * @extends Developer\n */\nfunction Fronteer() {\n    Developer.call(this);\n    // constructor body\n}\nutil.inherits(Fronteer, Developer);\n```\n\n##### [强制] 使用包装方式扩展类成员时， 必须通过 `@lends` 进行重新指向。\n\n解释：\n\n没有 `@lends` 标记将无法为该类生成包含扩展类成员的文档。\n\n\n示例：\n\n```javascript\n/**\n * 类描述\n *\n * @class\n * @extends Developer\n */\nfunction Fronteer() {\n    Developer.call(this);\n    // constructor body\n}\n\nutil.extend(\n    Fronteer.prototype,\n    /** @lends Fronteer.prototype */{\n        _getLevel: function () {\n            // TODO\n        }\n    }\n);\n```\n\n##### [强制] 类的属性或方法等成员信息使用 `@public` / `@protected` / `@private` 中的任意一个，指明可访问性。\n\n解释：\n\n生成的文档中将有可访问性的标记，避免用户直接使用非 `public` 的属性或方法。\n\n示例：\n\n```javascript\n/**\n * 类描述\n *\n * @class\n * @extends Developer\n */\nvar Fronteer = function () {\n    Developer.call(this);\n\n    /**\n     * 属性描述\n     *\n     * @type {string}\n     * @private\n     */\n    this._level = 'T12';\n\n    // constructor body\n};\nutil.inherits(Fronteer, Developer);\n\n/**\n * 方法描述\n *\n * @private\n * @return {string} 返回值描述\n */\nFronteer.prototype._getLevel = function () {\n};\n```\n\n\n#### 2.4.8 函数/方法注释\n\n\n##### [强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\n\n##### [强制] 参数和返回值注释必须包含类型信息和说明。\n\n##### [建议] 当函数是内部函数，外部不可访问时，可以使用 `@inner` 标识。\n\n示例：\n\n```javascript\n/**\n * 函数描述\n *\n * @param {string} p1 参数1的说明\n * @param {string} p2 参数2的说明，比较长\n *     那就换行了.\n * @param {number=} p3 参数3的说明（可选）\n * @return {Object} 返回值描述\n */\nfunction foo(p1, p2, p3) {\n    var p3 = p3 || 10;\n    return {\n        p1: p1,\n        p2: p2,\n        p3: p3\n    };\n}\n```\n\n##### [强制] 对 Object 中各项的描述， 必须使用 `@param` 标识。\n\n示例：\n\n```javascript\n/**\n * 函数描述\n *\n * @param {Object} option 参数描述\n * @param {string} option.url option项描述\n * @param {string=} option.method option项描述，可选参数\n */\nfunction foo(option) {\n    // TODO\n}\n```\n\n##### [建议] 重写父类方法时， 应当添加 `@override` 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 `@param`、`@return`，仅用 `@override` 标识，否则仍应作完整注释。\n\n解释：\n\n简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。\n\n#### 2.4.9 事件注释\n\n\n##### [强制] 必须使用 `@event` 标识事件，事件参数的标识与方法描述的参数标识相同。\n\n示例：\n\n```javascript\n/**\n * 值变更时触发\n *\n * @event\n * @param {Object} e e描述\n * @param {string} e.before before描述\n * @param {string} e.after after描述\n */\nonchange: function (e) {\n}\n```\n\n##### [强制] 在会广播事件的函数前使用 `@fires` 标识广播的事件，在广播事件代码前使用 `@event` 标识事件。\n\n##### [建议] 对于事件对象的注释，使用 `@param` 标识，生成文档时可读性更好。\n\n示例：\n\n```javascript\n/**\n * 点击处理\n *\n * @fires Select#change\n * @private\n */\nSelect.prototype.clickHandler = function () {\n    /**\n     * 值变更时触发\n     *\n     * @event Select#change\n     * @param {Object} e e描述\n     * @param {string} e.before before描述\n     * @param {string} e.after after描述\n     */\n    this.fire(\n        'change',\n        {\n            before: 'foo',\n            after: 'bar'\n        }\n    );\n};\n```\n\n#### 2.4.10 常量注释\n\n\n##### [强制] 常量必须使用 `@const` 标记，并包含说明和类型信息。\n\n示例：\n\n```javascript\n/**\n * 常量说明\n *\n * @const\n * @type {string}\n */\nvar REQUEST_URL = 'myurl.do';\n```\n\n#### 2.4.11 复杂类型注释\n\n\n##### [建议] 对于类型未定义的复杂结构的注释，可以使用 `@typedef` 标识来定义。\n\n示例：\n\n```javascript\n// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。\n/**\n * 服务器\n *\n * @typedef {Object} namespaceA~Server\n * @property {string} host 主机\n * @property {number} port 端口\n */\n\n/**\n * 服务器列表\n *\n * @type {Array.<namespaceA~Server>}\n */\nvar servers = [\n    {\n        host: '1.2.3.4',\n        port: 8080\n    },\n    {\n        host: '1.2.3.5',\n        port: 8081\n    }\n];\n```\n\n\n#### 2.4.12 AMD 模块注释\n\n\n##### [强制] AMD 模块使用 `@module` 或 `@exports` 标识。\n\n解释：\n\n@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。\n\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n\n        /**\n         * foo description\n         *\n         * @exports Foo\n         */\n        var foo = {\n            // TODO\n        };\n\n        /**\n         * baz description\n         *\n         * @return {boolean} return description\n         */\n        foo.baz = function () {\n            // TODO\n        };\n\n        return foo;\n\n    }\n);\n```\n\n也可以在 exports 变量前使用 @module 标识：\n\n```javascript\ndefine(\n    function (require) {\n\n        /**\n         * module description.\n         *\n         * @module foo\n         */\n        var exports = {};\n\n\n        /**\n         * bar description\n         *\n         */\n        exports.bar = function () {\n            // TODO\n        };\n\n        return exports;\n    }\n);\n```\n\n如果直接使用 factory 的 exports 参数，还可以：\n\n```javascript\n/**\n * module description.\n *\n * @module\n */\ndefine(\n    function (require, exports) {\n\n        /**\n         * bar description\n         *\n         */\n        exports.bar = function () {\n            // TODO\n        };\n        return exports;\n    }\n);\n```\n\n##### [强制] 对于已使用 `@module` 标识为 AMD模块 的引用，在 `namepaths` 中必须增加 `module:` 作前缀。\n\n解释：\n\nnamepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。\n\n示例：\n\n```javascript\n/**\n * 点击处理\n *\n * @fires module:Select#change\n * @private\n */\nSelect.prototype.clickHandler = function () {\n    /**\n     * 值变更时触发\n     *\n     * @event module:Select#change\n     * @param {Object} e e描述\n     * @param {string} e.before before描述\n     * @param {string} e.after after描述\n     */\n    this.fire(\n        'change',\n        {\n            before: 'foo',\n            after: 'bar'\n        }\n    );\n};\n```\n\n##### [建议] 对于类定义的模块，可以使用 `@alias` 标识构建函数。\n\n示例：\n\n```javascript\n/**\n * A module representing a jacket.\n * @module jacket\n */\ndefine(\n    function () {\n\n        /**\n         * @class\n         * @alias module:jacket\n         */\n        var Jacket = function () {\n        };\n\n        return Jacket;\n    }\n);\n```\n\n\n##### [建议] 多模块定义时，可以使用 `@exports` 标识各个模块。\n\n示例：\n\n```javascript\n// one module\ndefine('html/utils',\n    /**\n     * Utility functions to ease working with DOM elements.\n     * @exports html/utils\n     */\n    function () {\n        var exports = {\n        };\n\n        return exports;\n    }\n);\n\n// another module\ndefine('tag',\n    /** @exports tag */\n    function () {\n        var exports = {\n        };\n\n        return exports;\n    }\n);\n```\n\n##### [建议] 对于 exports 为 Object 的模块，可以使用`@namespace`标识。\n\n解释：\n\n使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。\n\n##### [建议] 对于 exports 为类名的模块，使用 `@class` 和 `@exports` 标识。\n\n\n示例：\n\n```javascript\n\n// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。\n// 另外需要注意类名需要使用 var 定义的方式。\n\n/**\n * Bar description\n *\n * @see foo\n * @exports  Bar\n * @class\n */\nvar Bar = function () {\n    // TODO\n};\n\n/**\n * baz description\n *\n * @return {(string|Array)} return description\n */\nBar.prototype.baz = function () {\n    // TODO\n};\n```\n\n\n#### 2.4.13 细节注释\n\n\n对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。\n\n#### [建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\n\n示例：\n\n```javascript\nfunction foo(p1, p2, opt_p3) {\n    // 这里对具体内部逻辑进行说明\n    // 说明太长需要换行\n    for (...) {\n        ....\n    }\n}\n```\n\n##### [强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\n\n解释：\n\n1. TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。\n2. FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。\n3. HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。\n4. XXX: 该处存在陷阱。此时需要对陷阱进行描述。\n\n\n\n\n## 3 语言特性\n\n\n\n\n\n\n### 3.1 变量\n\n\n##### [强制] 变量在使用前必须通过 `var` 定义。\n\n解释：\n\n不通过 var 定义变量将导致变量污染全局环境。\n\n\n示例：\n\n```javascript\n// good\nvar name = 'MyName';\n\n// bad\nname = 'MyName';\n```\n\n##### [强制] 每个 `var` 只能声明一个变量。\n\n解释：\n\n一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。\n\n\n示例：\n\n```javascript\n// good\nvar hangModules = [];\nvar missModules = [];\nvar visited = {};\n\n// bad\nvar hangModules = [],\n    missModules = [],\n    visited = {};\n```\n\n\n##### [强制] 变量必须 `即用即声明`，不得在函数或其它形式的代码块起始位置统一声明所有变量。\n\n解释： \n\n变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。\n\n\n示例：\n\n```javascript \n// good\nfunction kv2List(source) {\n    var list = [];\n\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            var item = {\n                k: key,\n                v: source[key]\n            };\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n\n// bad\nfunction kv2List(source) {\n    var list = [];\n    var key;\n    var item;\n\n    for (key in source) {\n        if (source.hasOwnProperty(key)) {\n            item = {\n                k: key,\n                v: source[key]\n            };\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n```\n\n\n\n\n\n\n### 3.2 条件\n\n\n##### [强制] 在 Equality Expression 中使用类型严格的 `===`。仅当判断 null 或 undefined 时，允许使用 `== null`。\n\n解释：\n\n使用 === 可以避免等于判断中隐式的类型转换。\n\n\n示例：\n\n```javascript\n// good\nif (age === 30) {\n    // ......\n}\n\n// bad\nif (age == 30) {\n    // ......\n}\n```\n\n##### [建议] 尽可能使用简洁的表达式。\n\n\n示例：\n\n```javascript\n// 字符串为空\n\n// good\nif (!name) {\n    // ......\n}\n\n// bad\nif (name === '') {\n    // ......\n}\n```\n\n```javascript\n// 字符串非空\n\n// good\nif (name) {\n    // ......\n}\n\n// bad\nif (name !== '') {\n    // ......\n}\n```\n\n```javascript\n// 数组非空\n\n// good\nif (collection.length) {\n    // ......\n}\n\n// bad\nif (collection.length > 0) {\n    // ......\n}\n```\n\n```javascript\n// 布尔不成立\n\n// good\nif (!notTrue) {\n    // ......\n}\n\n// bad\nif (notTrue === false) {\n    // ......\n}\n```\n\n```javascript\n// null 或 undefined\n\n// good\nif (noValue == null) {\n  // ......\n}\n\n// bad\nif (noValue === null || typeof noValue === 'undefined') {\n  // ......\n}\n```\n\n\n##### [建议] 按执行频率排列分支的顺序。\n\n解释：\n\n按执行频率排列分支的顺序好处是：\n\n1. 阅读的人容易找到最常见的情况，增加可读性。\n2. 提高执行效率。\n\n\n##### [建议] 对于相同变量或表达式的多值条件，用 `switch` 代替 `if`。\n\n示例：\n\n```javascript\n// good\nswitch (typeof variable) {\n    case 'object':\n        // ......\n        break;\n    case 'number':\n    case 'boolean':\n    case 'string':\n        // ......\n        break;\n}\n\n// bad\nvar type = typeof variable;\nif (type === 'object') {\n    // ......\n} \nelse if (type === 'number' || type === 'boolean' || type === 'string') {\n    // ......\n}\n```\n\n##### [建议] 如果函数或全局中的 `else` 块后没有任何语句，可以删除 `else`。\n\n示例：\n\n```javascript\n// good\nfunction getName() {\n    if (name) {\n        return name;\n    }\n\n    return 'unnamed';\n}\n\n// bad\nfunction getName() {\n    if (name) {\n        return name;\n    }\n    else {\n        return 'unnamed';\n    }\n}\n```\n\n\n\n\n\n### 3.3 循环\n\n\n##### [建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。\n\n解释：\n\n循环体中的函数表达式，运行过程中会生成循环次数个函数对象。\n\n\n示例：\n\n```javascript\n// good\nfunction clicker() {\n    // ......\n}\n\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    addListener(element, 'click', clicker);\n}\n\n\n// bad\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    addListener(element, 'click', function () {});\n}\n```\n\n##### [建议] 对循环内多次使用的不变值，在循环外用变量缓存。\n\n示例：\n\n```javascript\n// good\nvar width = wrap.offsetWidth + 'px';\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    element.style.width = width;\n    // ......\n}\n\n\n// bad\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    element.style.width = wrap.offsetWidth + 'px';\n    // ......\n}\n```\n\n\n##### [建议] 对有序集合进行遍历时，缓存 `length`。\n\n解释：\n\n虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。\n\n\n示例：\n\n```javascript\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    // ......\n}\n```\n\n##### [建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。\n\n解释：\n\n逆序遍历可以节省变量，代码比较优化。\n\n示例：\n\n```javascript\nvar len = elements.length;\nwhile (len--) {\n    var element = elements[len];\n    // ......\n}\n```\n\n\n\n\n\n### 3.4 类型\n\n\n#### 3.4.1 类型检测\n\n\n##### [建议] 类型检测优先使用 `typeof`。对象类型检测使用 `instanceof`。`null` 或 `undefined` 的检测使用 `== null`。\n\n示例：\n\n```javascript\n// string\ntypeof variable === 'string'\n\n// number\ntypeof variable === 'number'\n\n// boolean\ntypeof variable === 'boolean'\n\n// Function\ntypeof variable === 'function'\n\n// Object\ntypeof variable === 'object'\n\n// RegExp\nvariable instanceof RegExp\n\n// Array\nvariable instanceof Array\n\n// null\nvariable === null\n\n// null or undefined\nvariable == null\n\n// undefined\ntypeof variable === 'undefined'\n```\n\n\n#### 3.4.2 类型转换\n\n\n##### [建议] 转换成 `string` 时，使用 `+ ''`。\n\n示例：\n\n```javascript\n// good\nnum + '';\n\n// bad\nnew String(num);\nnum.toString();\nString(num);\n```\n\n##### [建议] 转换成 `number` 时，通常使用 `+`。\n\n示例：\n\n```javascript\n// good\n+str;\n\n// bad\nNumber(str);\n```\n\n##### [建议] `string` 转换成 `number`，要转换的字符串结尾包含非数字并期望忽略时，使用 `parseInt`。\n\n示例：\n\n```javascript\nvar width = '200px';\nparseInt(width, 10);\n```\n\n##### [强制] 使用 `parseInt` 时，必须指定进制。\n\n示例：\n\n```javascript\n// good\nparseInt(str, 10);\n\n// bad\nparseInt(str);\n```\n\n##### [建议] 转换成 `boolean` 时，使用 `!!`。\n\n示例：\n\n```javascript\nvar num = 3.14;\n!!num;\n```\n\n##### [建议] `number` 去除小数点，使用 `Math.floor / Math.round / Math.ceil`，不使用 `parseInt`。\n\n示例：\n\n```javascript\n// good\nvar num = 3.14;\nMath.ceil(num);\n\n// bad\nvar num = 3.14;\nparseInt(num, 10);\n```\n\n\n\n\n### 3.5 字符串\n\n\n##### [强制] 字符串开头和结束使用单引号 `'`。\n\n解释：\n\n1. 输入单引号不需要按住 shift，方便输入。\n2. 实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。\n\n示例：\n\n```javascript\nvar str = '我是一个字符串';\nvar html = '<div class=\"cls\">拼接HTML可以省去双引号转义</div>';\n```\n\n##### [建议] 使用 `数组` 或 `+` 拼接字符串。\n\n解释：\n\n1. 使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。\n2. 在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。\n3. 如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。\n\n示例：\n\n```javascript\n// 使用数组拼接字符串\nvar str = [\n    // 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.\n    '<ul>',\n        '<li>第一项</li>',\n        '<li>第二项</li>',\n    '</ul>'\n].join('');\n\n// 使用 + 拼接字符串\nvar str2 = '' // 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读\n    + '<ul>',\n    +    '<li>第一项</li>',\n    +    '<li>第二项</li>',\n    + '</ul>';\n```\n\n##### [建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。\n\n解释：\n\n使用模板引擎有如下好处：\n\n1. 在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。\n2. 优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。\n\n- artTemplate: 体积较小，在所有环境下性能高，语法灵活。\n- dot.js: 体积小，在现代浏览器下性能高，语法灵活。\n- etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。\n- handlebars: 体积大，在所有环境下性能高，扩展性高。\n- hogon: 体积小，在现代浏览器下性能高。\n- nunjucks: 体积较大，性能一般，模板复用性高。\n\n\n\n\n### 3.6 对象\n\n\n##### [强制] 使用对象字面量 `{}` 创建新 `Object`。\n\n示例： \n\n```javascript\n// good\nvar obj = {};\n\n// bad\nvar obj = new Object();\n```\n\n##### [强制] 对象创建时，如果一个对象的所有 `属性` 均可以不添加引号，则所有 `属性` 不得添加引号。\n\n示例： \n\n```javascript\nvar info = {\n    name: 'someone',\n    age: 28\n};\n```\n\n##### [强制] 对象创建时，如果任何一个 `属性` 需要添加引号，则所有 `属性` 必须添加 `'`。\n\n解释：\n\n如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。\n\n\n示例： \n\n```javascript\n// good\nvar info = {\n    'name': 'someone',\n    'age': 28,\n    'more-info': '...'\n};\n\n// bad\nvar info = {\n    name: 'someone',\n    age: 28,\n    'more-info': '...'\n};\n```\n\n##### [强制] 不允许修改和扩展任何原生对象和宿主对象的原型。\n\n示例： \n\n```javascript\n// 以下行为绝对禁止\nString.prototype.trim = function () {\n};\n```\n\n##### [建议] 属性访问时，尽量使用 `.`。\n\n解释：\n\n属性名符合 Identifier 的要求，就可以通过 `.` 来访问，否则就只能通过 `[expr]` 方式访问。\n\n通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 `.` 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 `[expr]` 方式访问。\n\n\n示例： \n\n```javascript\ninfo.age;\ninfo['more-info'];\n```\n\n##### [建议] `for in` 遍历对象时, 使用 `hasOwnProperty` 过滤掉原型中的属性。\n\n示例：\n\n```javascript\nvar newInfo = {};\nfor (var key in info) {\n    if (info.hasOwnProperty(key)) {\n        newInfo[key] = info[key];\n    }\n}\n```\n\n\n\n\n### 3.7 数组\n\n\n##### [强制] 使用数组字面量 `[]` 创建新数组，除非想要创建的是指定长度的数组。\n\n示例：\n\n```javascript\n// good\nvar arr = [];\n\n// bad\nvar arr = new Array();\n```\n\n##### [强制] 遍历数组不使用 `for in`。\n\n解释：\n\n数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.\n\n示例：\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.other = 'other things'; // 这里仅作演示, 实际中应使用Object类型\n\n// 正确的遍历方式\nfor (var i = 0, len = arr.length; i < len; i++) {\n    console.log(i);\n}\n\n// 错误的遍历方式\nfor (i in arr) {\n    console.log(i);\n}\n```\n\n##### [建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 `sort` 方法。\n\n解释：\n\n自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：\n\n1. 需要稳定的排序算法，达到严格一致的排序结果。\n2. 数据特点鲜明，适合使用桶排。\n\n##### [建议] 清空数组使用 `.length = 0`。\n\n\n\n\n### 3.8 函数\n\n\n\n#### 3.8.1 函数长度\n\n\n##### [建议] 一个函数的长度控制在 `50` 行以内。\n\n解释：\n\n将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。\n\n特定算法等不可分割的逻辑允许例外。\n\n\n示例：\n\n```javascript\nfunction syncViewStateOnUserAction() {\n    if (x.checked) {\n        y.checked = true;\n        z.value = '';\n    }\n    else {\n        y.checked = false;\n    }\n\n    if (!a.value) {\n        warning.innerText = 'Please enter it';\n        submitButton.disabled = true;\n    }\n    else {\n        warning.innerText = '';\n        submitButton.disabled = false;\n    }\n}\n\n// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：\n\nfunction syncViewStateOnUserAction() {\n    syncXStateToView();\n    checkAAvailability();\n}\n\nfunction syncXStateToView() {\n    if (x.checked) {\n        y.checked = true;\n        z.value = '';\n    }\n    else {\n        y.checked = false;\n    }\n}\n\nfunction checkAAvailability() {\n    if (!a.value) {\n        displayWarningForAMissing();\n    }\n    else {\n        clearWarnignForA();\n    }\n}\n```\n\n\n#### 3.8.2 参数设计\n\n\n##### [建议] 一个函数的参数控制在 `6` 个以内。\n\n解释：\n\n除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。\n\n某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。\n\n\n##### [建议] 通过 `options` 参数传递非数据输入型参数。\n\n解释：\n\n有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。\n\n如下函数：\n\n```javascript\n/**\n * 移除某个元素\n *\n * @param {Node} element 需要移除的元素\n * @param {boolean} removeEventListeners 是否同时将所有注册在元素上的事件移除\n */\nfunction removeElement(element, removeEventListeners) {\n    element.parent.removeChild(element);\n    if (removeEventListeners) {\n        element.clearEventListeners();\n    }\n}\n```\n\n可以转换为下面的签名：\n\n```javascript\n/**\n * 移除某个元素\n *\n * @param {Node} element 需要移除的元素\n * @param {Object} options 相关的逻辑配置\n * @param {boolean} options.removeEventListeners 是否同时将所有注册在元素上的事件移除\n */\nfunction removeElement(element, options) {\n    element.parent.removeChild(element);\n    if (options.removeEventListeners) {\n        element.clearEventListeners();\n    }\n}\n```\n\n这种模式有几个显著的优势：\n\n- boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。\n- 当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。\n- 当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。\n\n\n\n#### 3.8.3 闭包\n\n\n##### [建议] 在适当的时候将闭包内大对象置为 `null`。\n\n解释：\n\n在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。\n\n闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。\n\n首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：\n\n- 嵌套的函数中是否有使用该变量。\n- 嵌套的函数中是否有 **直接调用eval**。\n- 是否使用了 with 表达式。\n\nChakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。\n\n由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：\n\n1. 如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：\n    1. 如果是 V8 引擎，则退出全过程。\n    2. 如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。\n2. 获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：\n    1. 如果 FunctionBody 中含有 **直接调用eval**，则退出全过程。\n    2. 否则得到所有的 Identifier。\n    3. 对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。\n    4. 对 binding 添加 notSwap 属性，其值为 true。\n3. 检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：\n    1. 如果是V8引擎，删除该绑定。\n    2. 如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。\n\n对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。\n\n如果有 **非常庞大** 的对象，且预计会在 **老旧的引擎** 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。\n\n##### [建议] 使用 `IIFE` 避免 `Lift 效应`。\n\n解释：\n\n在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：\n\n```javascript\nvar tasks = [];\nfor (var i = 0; i < 5; i++) {\n    tasks[tasks.length] = function () {\n        console.log('Current cursor is at ' + i);\n    };\n}\n\nvar len = tasks.length;\nwhile (len--) {\n    tasks[len]();\n}\n```\n\n以上代码对 tasks 中的函数的执行均会输出 `Current cursor is at 5`，往往不符合预期。\n\n此现象称为 **Lift 效应** 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：\n\n```javascript\nvar tasks = [];\nfor (var i = 0; i < 5; i++) {\n    // 注意有一层额外的闭包\n    tasks[tasks.length] = (function (i) {\n        return function () {\n            console.log('Current cursor is at ' + i);\n        };\n    })(i);\n}\n\nvar len = tasks.length;\nwhile (len--) {\n    tasks[len]();\n}\n```\n\n#### 3.8.4 空函数\n\n\n##### [建议] 空函数不使用 `new Function()` 的形式。\n\n示例：\n\n```javascript\nvar emptyFunction = function () {};\n```\n\n##### [建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\n\n示例：\n\n```javascript\nvar EMPTY_FUNCTION = function () {};\n\nfunction MyClass() {\n}\n\nMyClass.prototype.abstractMethod = EMPTY_FUNCTION;\nMyClass.prototype.hooks.before = EMPTY_FUNCTION;\nMyClass.prototype.hooks.after = EMPTY_FUNCTION;\n```\n\n\n\n\n\n\n\n### 3.9 面向对象\n\n\n##### [强制] 类的继承方案，实现时需要修正 `constructor`。\n\n解释：\n\n通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。\n\n\n示例：\n\n```javascript\n/**\n * 构建类之间的继承关系\n * \n * @param {Function} subClass 子类函数\n * @param {Function} superClass 父类函数\n */\nfunction inherits(subClass, superClass) {\n    var F = new Function();\n    F.prototype = superClass.prototype;\n    subClass.prototype = new F();\n    subClass.prototype.constructor = subClass;\n}\n```\n\n##### [建议] 声明类时，保证 `constructor` 的正确性。\n\n示例：\n\n```javascript\nfunction Animal(name) {\n    this.name = name;\n}\n\n// 直接prototype等于对象时，需要修正constructor\nAnimal.prototype = {\n    constructor: Animal,\n\n    jump: function () {\n        alert('animal ' + this.name + ' jump');\n    }\n};\n\n// 这种方式扩展prototype则无需理会constructor\nAnimal.prototype.jump = function () {\n    alert('animal ' + this.name + ' jump');\n};\n```\n\n\n##### [建议] 属性在构造函数中声明，方法在原型中声明。\n\n解释： \n\n原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。\n\n```javascript\nfunction TextNode(value, engine) {\n    this.value = value;\n    this.engine = engine;\n}\n\nTextNode.prototype.clone = function () {\n    return this;\n};\n```\n\n##### [强制] 自定义事件的 `事件名` 必须全小写。\n\n解释：\n\n在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。\n\n##### [强制] 自定义事件只能有一个 `event` 参数。如果事件需要传递较多信息，应仔细设计事件对象。\n\n解释：\n\n一个事件对象的好处有：\n\n1. 顺序无关，避免事件监听者需要记忆参数顺序。\n2. 每个事件信息都可以根据需要提供或者不提供，更自由。\n3. 扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。\n\n\n##### [建议] 设计自定义事件时，应考虑禁止默认行为。\n\n解释：\n\n常见禁止默认行为的方式有两种：\n\n1. 事件监听函数中 return false。\n2. 事件对象中包含禁止默认行为的方法，如 preventDefault。\n\n\n\n\n### 3.10 动态特性\n\n\n#### 3.10.1 eval\n\n\n##### [强制] 避免使用直接 `eval` 函数。\n\n解释：\n\n直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。\n\n如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。\n\n##### [建议] 尽量避免使用 `eval` 函数。\n\n\n#### 3.10.2 动态执行代码\n\n\n##### [建议] 使用 `new Function` 执行动态代码。\n\n解释：\n\n通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。\n\n\n示例：\n\n```javascript\nvar handler = new Function('x', 'y', 'return x + y;');\nvar result = handler($('#x').val(), $('#y').val());\n```\n\n\n\n#### 3.10.3 with\n\n\n##### [建议] 尽量不要使用 `with`。\n\n解释：\n\n使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。\n\n\n\n\n#### 3.10.4 delete\n\n\n##### [建议] 减少 `delete` 的使用。\n\n解释：\n\n如果没有特别的需求，减少或避免使用`delete`。`delete`的使用会破坏部分 JavaScript 引擎的性能优化。\n\n\n##### [建议] 处理 `delete` 可能产生的异常。\n\n解释：\n\n对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。\n\n在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。\n\n示例：\n\n```javascript\ntry {\n    delete o.x;\n}\ncatch (deleteError) {\n    o.x = null;\n}\n```\n\n\n\n#### 3.10.5 对象属性\n\n\n\n##### [建议] 避免修改外部传入的对象。\n\n解释：\n\nJavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。\n\n但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。\n\n下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。\n\n```javascript\nfunction Tree(datasource) {\n    this.datasource = datasource;\n}\n\nTree.prototype.selectNode = function (id) {\n    // 从datasource中找出节点对象\n    var node = this.findNode(id);\n    if (node) {\n        node.selected = true;\n        this.flushView();\n    }\n};\n```\n\n对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。\n\n```javascript\nfunction Tree(datasource) {\n    this.datasource = datasource;\n    this.selectedNodeIndex = {};\n}\n\nTree.prototype.selectNode = function (id) {\n    // 从datasource中找出节点对象\n    var node = this.findNode(id);\n    if (node) {\n        this.selectedNodeIndex[id] = true;\n        this.flushView();\n    }\n};\n```\n\n除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。\n\n\n##### [建议] 具备强类型的设计。\n\n解释：\n\n- 如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。\n- 从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。\n\n\n\n\n\n\n\n\n\n## 4 浏览器环境\n\n\n\n\n### 4.1 模块化\n\n\n#### 4.1.1 AMD\n\n\n##### [强制] 使用 `AMD` 作为模块定义。\n\n解释：\n\nAMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。\n\n目前，比较成熟的 AMD Loader 有：\n\n- 官方实现的 [requirejs](http://requirejs.org/)\n- 百度自己实现的 [esl](https://github.com/ecomfe/esl)\n\n\n##### [强制] 模块 `id` 必须符合标准。\n\n解释：\n\n模块 id 必须符合以下约束条件：\n\n1. 类型为 string，并且是由 `/` 分割的一系列 terms 来组成。例如：`this/is/a/module`。\n2. term 应该符合 [a-zA-Z0-9_-]+ 规则。\n3. 不应该有 .js 后缀。\n4. 跟文件的路径保持一致。\n\n\n\n#### 4.1.2 define\n\n\n##### [建议] 定义模块时不要指明 `id` 和 `dependencies`。\n\n解释：\n\n在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。\n\n所以，推荐使用 define(factory) 的形式进行模块定义。\n\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n    }\n);\n```\n\n\n##### [建议] 使用 `return` 来返回模块定义。\n\n解释：\n\n使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        var exports = {};\n\n        // ...\n\n        return exports;\n    }\n);\n```\n\n\n\n\n#### 4.1.3 require\n\n\n##### [强制] 全局运行环境中，`require` 必须以 `async require` 形式调用。\n\n解释：\n\n模块的加载过程是异步的，同步调用并无法保证得到正确的结果。\n\n示例：\n\n```javascript\n// good\nrequire(['foo'], function (foo) {\n});\n\n// bad\nvar foo = require('foo');\n```\n\n##### [强制] 模块定义中只允许使用 `local require`，不允许使用 `global require`。\n\n解释：\n\n1. 在模块定义中使用 global require，对封装性是一种破坏。\n2. 在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。\n\n\n##### [强制] Package在实现时，内部模块的 `require` 必须使用 `relative id`。\n\n解释：\n\n对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        var util = require('./util');\n    }\n);\n```\n\n\n##### [建议] 不会被调用的依赖模块，在 `factory` 开始处统一 `require`。\n\n解释：\n\n有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        require('css!foo.css');\n        require('tpl!bar.tpl.html');\n\n        // ...\n    }\n);\n```\n\n\n\n### 4.2 DOM\n\n\n#### 4.2.1 元素获取\n\n\n##### [建议] 对于单个元素，尽可能使用 `document.getElementById` 获取，避免使用`document.all`。\n\n\n##### [建议] 对于多个元素的集合，尽可能使用 `context.getElementsByTagName` 获取。其中 `context` 可以为 `document` 或其他元素。指定 `tagName` 参数为 `*` 可以获得所有子元素。\n\n##### [建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\n\n解释：\n\n原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。\n\n\n示例：\n\n```html\n<div></div>\n<span></span>\n\n<script>\nvar elements = document.getElementsByTagName('*');\n\n// 显示为 DIV\nalert(elements[0].tagName);\n\nvar div = elements[0];\nvar p = document.createElement('p');\ndocument.body.insertBefore(p, div);\n\n// 显示为 P\nalert(elements[0].tagName);\n</script>\n```\n\n\n##### [建议] 获取元素的直接子元素时使用 `children`。避免使用`childNodes`，除非预期是需要包含文本、注释和属性类型的节点。\n\n\n\n\n#### 4.2.2 样式获取\n\n\n##### [建议] 获取元素实际样式信息时，应使用 `getComputedStyle` 或 `currentStyle`。\n\n解释：\n\n通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。\n\n\n\n\n#### 4.2.3 样式设置\n\n\n##### [建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。\n\n##### [强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。\n\n解释：\n\n除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。\n\n\n\n\n#### 4.2.4 DOM 操作\n\n\n##### [建议] 操作 `DOM` 时，尽量减少页面 `reflow`。\n\n解释：\n\n页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：\n\n- DOM元素的添加、修改（内容）、删除。\n- 应用新的样式或者修改任何影响元素布局的属性。\n- Resize浏览器窗口、滚动页面。\n- 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。\n\n\n##### [建议] 尽量减少 `DOM` 操作。\n\n解释：\n\nDOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：\n\n1. 在循环体中 createElement 并 append 到父元素中。\n2. 在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。\n\n第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。\n\n\n\n\n#### 4.2.5 DOM 事件\n\n\n##### [建议] 优先使用 `addEventListener / attachEvent` 绑定事件，避免直接在 HTML 属性中或 DOM 的 `expando` 属性绑定事件处理。\n\n解释：\n\nexpando 属性绑定事件容易导致互相覆盖。\n\n\n##### [建议] 使用 `addEventListener` 时第三个参数使用 `false`。\n\n解释：\n\n标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。\n\n\n##### [建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\n\n\n\n","source":"_posts/js_code_style.md","raw":"---\ntitle:  JavaScript编码规范\nlayout: post\ndate: 2017-2-23 19:42:55\ncategories: javascript\ntags: [javascript]\nkeywords: javascript\ndescription: JavaScript在百度一直有着广泛的应用,特别是在浏览器端的行为管理.本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护,虽然本文档是针对JavaScript设计的,但是在使用各种JavaScript的预编译语言时(如TypeScript等)时,适用的部分也应尽量遵循本文档的约定\n\n---\n\n\n\n```\n虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定\n```\n\n\n#\n\n## 1 前言\n\n\nJavaScript在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。\n\n虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。\n\n\n\n## 2 代码风格\n\n\n\n\n\n\n### 2.1 文件\n\n\n##### [建议] `JavaScript` 文件使用无 `BOM` 的 `UTF-8` 编码。\n\n解释：\n\nUTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。\n\n##### [建议] 在文件结尾处，保留一个空行。\n\n\n\n\n### 2.2 结构\n\n\n\n#### 2.2.1 缩进\n\n\n##### [强制] 使用 `4` 个空格做为一个缩进层级，不允许使用 `2` 个空格 或 `tab` 字符。\n\n\n\n##### [强制] `switch` 下的 `case` 和 `default` 必须增加一个缩进层级。\n\n示例：\n\n```javascript\n// good\nswitch (variable) {\n\n    case '1':\n        // do...\n        break;\n\n    case '2':\n        // do...\n        break;\n\n    default:\n        // do...\n\n}\n\n// bad\nswitch (variable) {\n\ncase '1':\n    // do...\n    break;\n\ncase '2':\n    // do...\n    break;\n\ndefault:\n    // do...\n\n}\n```\n\n#### 2.2.2 空格\n\n\n\n##### [强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\n\n示例：\n\n```javascript\nvar a = !arr.length;\na++;\na = b + c;\n```\n\n##### [强制] 用作代码块起始的左花括号 `{` 前必须有一个空格。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n}\n\nwhile (condition) {\n}\n\nfunction funcName() {\n}\n\n// bad\nif (condition){\n}\n\nwhile (condition){\n}\n\nfunction funcName(){\n}\n```\n\n##### [强制] `if / else / for / while / function / switch / do / try / catch / finally` 关键字后，必须有一个空格。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n}\n\nwhile (condition) {\n}\n\n(function () {\n})();\n\n// bad\nif(condition) {\n}\n\nwhile(condition) {\n}\n\n(function() {\n})();\n```\n\n##### [强制] 在对象创建时，属性中的 `:` 之后必须有空格，`:` 之前不允许有空格。\n\n示例：\n\n```javascript\n// good\nvar obj = {\n    a: 1,\n    b: 2,\n    c: 3\n};\n\n// bad\nvar obj = {\n    a : 1,\n    b:2,\n    c :3\n};\n```\n\n##### [强制] 函数声明、具名函数表达式、函数调用中，函数名和 `(` 之间不允许有空格。\n\n示例：\n\n```javascript\n// good\nfunction funcName() {\n}\n\nvar funcName = function funcName() {\n};\n\nfuncName();\n\n// bad\nfunction funcName () {\n}\n\nvar funcName = function funcName () {\n};\n\nfuncName ();\n```\n\n##### [强制] `,` 和 `;` 前不允许有空格。\n\n示例：\n\n```javascript\n// good\ncallFunc(a, b);\n\n// bad\ncallFunc(a , b) ;\n```\n\n##### [强制] 在函数调用、函数声明、括号表达式、属性访问、`if / for / while / switch / catch` 等语句中，`()` 和 `[]` 内紧贴括号部分不允许有空格。\n\n示例：\n\n```javascript\n// good\n\ncallFunc(param1, param2, param3);\n\nsave(this.list[this.indexes[i]]);\n\nneedIncream && (variable += increament);\n\nif (num > list.length) {\n}\n\nwhile (len--) {\n}\n\n\n// bad\n\ncallFunc( param1, param2, param3 );\n\nsave( this.list[ this.indexes[ i ] ] );\n\nneedIncreament && ( variable += increament );\n\nif ( num > list.length ) {\n}\n\nwhile ( len-- ) {\n}\n```\n\n##### [强制] 单行声明的数组与对象，如果包含元素，`{}` 和 `[]` 内紧贴括号部分不允许包含空格。\n\n解释：\n\n声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。\n\n\n示例：\n\n```javascript\n// good\nvar arr1 = [];\nvar arr2 = [1, 2, 3];\nvar obj1 = {};\nvar obj2 = {name: 'obj'};\nvar obj3 = {\n    name: 'obj',\n    age: 20,\n    sex: 1\n};\n\n// bad\nvar arr1 = [ ];\nvar arr2 = [ 1, 2, 3 ];\nvar obj1 = { };\nvar obj2 = { name: 'obj' };\nvar obj3 = {name: 'obj', age: 20, sex: 1};\n```\n\n##### [强制] 行尾不得有多余的空格。\n\n\n#### 2.2.3 换行\n\n\n##### [强制] 每个独立语句结束后必须换行。\n\n##### [强制] 每行不得超过 `120` 个字符。\n\n解释：\n\n超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。\n\n\n##### [强制] 运算符处换行时，运算符必须在新行的行首。\n\n示例：\n\n```javascript\n// good\nif (user.isAuthenticated()\n    && user.isInRole('admin')\n    && user.hasAuthority('add-admin')\n    || user.hasAuthority('delete-admin')\n) {\n    // Code\n}\n\nvar result = number1 + number2 + number3\n    + number4 + number5;\n\n\n// bad\nif (user.isAuthenticated() &&\n    user.isInRole('admin') &&\n    user.hasAuthority('add-admin') ||\n    user.hasAuthority('delete-admin')) {\n    // Code\n}\n\nvar result = number1 + number2 + number3 +\n    number4 + number5;\n```\n\n##### [强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 `,` 或 `;` 前换行。\n\n示例：\n\n```javascript\n// good\nvar obj = {\n    a: 1,\n    b: 2,\n    c: 3\n};\n\nfoo(\n    aVeryVeryLongArgument,\n    anotherVeryLongArgument,\n    callback\n);\n\n\n// bad\nvar obj = {\n    a: 1\n    , b: 2\n    , c: 3\n};\n\nfoo(\n    aVeryVeryLongArgument\n    , anotherVeryLongArgument\n    , callback\n);\n```\n\n##### [建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。\n\n示例：\n\n```javascript\n// 仅为按逻辑换行的示例，不代表setStyle的最优实现\nfunction setStyle(element, property, value) {\n    if (element == null) {\n        return;\n    }\n\n    element.style[property] = value;\n}\n```\n\n##### [建议] 在语句的行长度超过 `120` 时，根据逻辑条件合理缩进。\n\n示例：\n\n```javascript\n// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。\n// 建议最终将右括号 ) 与左大括号 { 放在独立一行，保证与 if 内语句块能容易视觉辨识。\nif (user.isAuthenticated()\n    && user.isInRole('admin')\n    && user.hasAuthority('add-admin')\n    || user.hasAuthority('delete-admin')\n) {\n    // Code\n}\n\n// 按一定长度截断字符串，并使用 + 运算符进行连接。\n// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。\n// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。\nvar html = '' // 此处用一个空字符串，以便整个HTML片段都在新行严格对齐\n    + '<article>'\n    +     '<h1>Title here</h1>'\n    +     '<p>This is a paragraph</p>'\n    +     '<footer>Complete</footer>'\n    + '</article>';\n\n// 也可使用数组来进行拼接，相对 + 更容易调整缩进。\nvar html = [\n    '<article>',\n        '<h1>Title here</h1>',\n        '<p>This is a paragraph</p>',\n        '<footer>Complete</footer>',\n    '</article>'\n];\nhtml = html.join('');\n\n// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。\n// 所有参数必须增加一个缩进。\nfoo(\n    aVeryVeryLongArgument,\n    anotherVeryLongArgument,\n    callback\n);\n\n// 也可以按逻辑对参数进行组合。\n// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块\nbaidu.format(\n    dateFormatTemplate,\n    year, month, date, hour, minute, second\n);\n\n// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。\n// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。\nsetTimeout(\n    function () {\n        alert('hello');\n    },\n    200\n);\n\norder.data.read(\n    'id=' + me.model.id, \n    function (data) {\n        me.attchToModel(data.result);\n        callback();\n    }, \n    300\n);\n\n// 链式调用较长时采用缩进进行调整。\n$('#items')\n    .find('.selected')\n    .highlight()\n    .end();\n\n// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。\nvar result = thisIsAVeryVeryLongCondition\n    ? resultA : resultB;\n\nvar result = condition\n    ? thisIsAVeryVeryLongResult\n    : resultB;\n\n// 数组和对象初始化的混用，严格按照每个对象的 { 和结束 } 在独立一行的风格书写。\nvar array = [\n    {\n        // ...\n    },\n    {\n        // ...\n    }\n];\n```\n\n##### [建议] 对于 `if...else...`、`try...catch...finally` 等语句，推荐使用在 `}` 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。\n\n示例：\n\n```javascript\nif (condition) {\n    // some statements;\n}\nelse {\n    // some statements;\n}\n\ntry {\n    // some statements;\n}\ncatch (ex) {\n    // some statements;\n}\n```\n\n\n\n#### 2.2.4 语句\n\n\n##### [强制] 不得省略语句结束的分号。\n\n##### [强制] 在 `if / else / for / do / while` 语句中，即使只有一行，也不得省略块 `{...}`。\n\n示例：\n\n```javascript\n// good\nif (condition) {\n    callFunc();\n}\n\n// bad\nif (condition) callFunc();\nif (condition)\n    callFunc();\n```\n\n##### [强制] 函数定义结束不允许添加分号。\n\n示例：\n\n```javascript\n// good\nfunction funcName() {\n}\n\n// bad\nfunction funcName() {\n};\n\n// 如果是函数表达式，分号是不允许省略的。\nvar funcName = function () {\n};\n```\n\n##### [强制] `IIFE` 必须在函数表达式外添加 `(`，非 `IIFE` 不得在函数表达式外添加 `(`。\n\n解释：\n\nIIFE = Immediately-Invoked Function Expression.\n\n额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。\n\n\n示例：\n\n```javascript\n// good\nvar task = (function () {\n   // Code\n   return result;\n})();\n\nvar func = function () {\n};\n\n\n// bad\nvar task = function () {\n    // Code\n    return result;\n}();\n\nvar func = (function () {\n});\n```\n\n\n\n\n\n### 2.3 命名\n\n\n##### [强制] `变量` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nvar loadingModules = {};\n```\n\n##### [强制] `常量` 使用 `全部字母大写，单词间下划线分隔` 的命名方式。\n\n示例：\n\n```javascript\nvar HTML_ENTITY = {};\n```\n\n##### [强制] `函数` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction stringFormat(source) {\n}\n```\n\n##### [强制] 函数的 `参数` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction hear(theBells) {\n}\n```\n\n\n##### [强制] `类` 使用 `Pascal命名法`。\n\n示例：\n\n```javascript\nfunction TextNode(options) {\n}\n```\n\n##### [强制] 类的 `方法 / 属性` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nfunction TextNode(value, engine) {\n    this.value = value;\n    this.engine = engine;\n}\n\nTextNode.prototype.clone = function () {\n    return this;\n};\n```\n\n##### [强制] `枚举变量` 使用 `Pascal命名法`，`枚举的属性` 使用 `全部字母大写，单词间下划线分隔` 的命名方式。\n\n示例：\n\n```javascript\nvar TargetState = {\n    READING: 1,\n    READED: 2,\n    APPLIED: 3,\n    READY: 4\n};\n```\n\n##### [强制] `命名空间` 使用 `Camel命名法`。\n\n示例：\n\n```javascript\nequipments.heavyWeapons = {};\n```\n\n##### [强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\n\n示例：\n\n```javascript\nfunction XMLParser() {\n}\n\nfunction insertHTML(element, html) {\n}\n\nvar httpRequest = new HTTPRequest();\n```\n\n##### [强制] `类名` 使用 `名词`。\n\n示例：\n\n```javascript\nfunction Engine(options) {\n}\n```\n\n##### [建议] `函数名` 使用 `动宾短语`。\n\n示例：\n\n```javascript\nfunction getStyle(element) {\n}\n```\n\n##### [建议] `boolean` 类型的变量使用 `is` 或 `has` 开头。\n\n示例：\n\n```javascript\nvar isReady = false;\nvar hasMoreCommands = false;\n```\n\n##### [建议] `Promise对象` 用 `动宾短语的进行时` 表达。\n\n示例：\n\n```javascript\nvar loadingData = ajax.get('url');\nloadingData.then(callback);\n```\n\n\n\n\n### 2.4 注释\n\n\n#### 2.4.1 单行注释\n\n\n##### [强制] 必须独占一行。`//` 后跟一个空格，缩进与下一行被注释说明的代码一致。\n\n#### 2.4.2 多行注释\n\n\n##### [建议] 避免使用 `/*...*/` 这样的多行注释。有多行注释内容时，使用多个单行注释。\n\n\n#### 2.4.3 文档化注释\n\n\n##### [强制] 为了便于代码阅读和自文档化，以下内容必须包含以 `/**...*/` 形式的块注释中。\n\n解释：\n\n1. 文件\n2. namespace\n3. 类\n4. 函数或方法\n5. 类属性\n6. 事件\n7. 全局变量\n8. 常量\n9. AMD 模块\n\n\n##### [强制] 文档注释前必须空一行。\n\n\n##### [建议] 自文档化的文档说明 what，而不是 how。\n\n\n\n#### 2.4.4 类型定义\n\n\n##### [强制] 类型定义都是以`{`开始, 以`}`结束。\n\n解释：\n\n常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。\n\n类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。\n\n\n##### [强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。\n\n| 类型定义 | 语法示例 | 解释 |\n| ------- | ------- | --- |\n|String|{string}|--|\n|Number|{number}|--|\n|Boolean|{boolean}|--|\n|Object|{Object}|--|\n|Function|{Function}|--|\n|RegExp|{RegExp}|--|\n|Array|{Array}|--|\n|Date|{Date}|--|\n|单一类型集合|{Array.&lt;string&gt;}|string 类型的数组|\n|多类型|{(number｜boolean)}|可能是 number 类型, 也可能是 boolean 类型|\n|允许为null|{?number}|可能是 number, 也可能是 null|\n|不允许为null|{!Object}|Object 类型, 但不是 null|\n|Function类型|{function(number, boolean)}|函数, 形参类型|\n|Function带返回值|{function(number, boolean):string}|函数, 形参, 返回值类型|\n|参数可选|@param {string=} name|可选参数, =为类型后缀|\n|可变参数|@param {...number} args|变长参数,  ...为类型前缀|\n|任意类型|{*}|任意类型|\n|可选任意类型|@param {*=} name|可选参数，类型不限|\n|可变任意类型|@param {...*} args|变长参数，类型不限|\n\n\n#### 2.4.5 文件注释\n\n\n##### [强制] 文件顶部必须包含文件注释，用 `@file` 标识文件说明。\n\n示例：\n\n```javascript\n/**\n * @file Describe the file\n */\n```\n\n##### [建议] 文件注释中可以用 `@author` 标识开发者信息。\n\n解释：\n\n开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 `@author` 标识。\n\n`@author` 标识具有多人时，原则是按照 `责任` 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 `@author` 标识应该把自己的名字添加在创建人的前面。\n\n`@author` 中的名字不允许被删除。任何劳动成果都应该被尊重。\n\n业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 `@author` 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。\n\n对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 `@author` 标识。\n\n\n示例：\n\n```javascript\n/**\n * @file Describe the file\n * @author author-name(mail-name@domain.com)\n *         author-name2(mail-name2@domain.com)\n */\n```\n\n#### 2.4.6 命名空间注释\n\n\n##### [建议] 命名空间使用 `@namespace` 标识。\n\n示例：\n\n```javascript\n/**\n * @namespace\n */\nvar util = {};\n```\n\n#### 2.4.7 类注释\n\n\n##### [建议] 使用 `@class` 标记类或构造函数。\n\n解释：\n\n对于使用对象 `constructor` 属性来定义的构造函数，可以使用 `@constructor` 来标记。\n\n\n示例：\n\n```javascript\n/**\n * 描述\n *\n * @class\n */\nfunction Developer() {\n    // constructor body\n}\n```\n\n##### [建议] 使用 `@extends` 标记类的继承信息。\n\n示例：\n\n```javascript\n/**\n * 描述\n *\n * @class\n * @extends Developer\n */\nfunction Fronteer() {\n    Developer.call(this);\n    // constructor body\n}\nutil.inherits(Fronteer, Developer);\n```\n\n##### [强制] 使用包装方式扩展类成员时， 必须通过 `@lends` 进行重新指向。\n\n解释：\n\n没有 `@lends` 标记将无法为该类生成包含扩展类成员的文档。\n\n\n示例：\n\n```javascript\n/**\n * 类描述\n *\n * @class\n * @extends Developer\n */\nfunction Fronteer() {\n    Developer.call(this);\n    // constructor body\n}\n\nutil.extend(\n    Fronteer.prototype,\n    /** @lends Fronteer.prototype */{\n        _getLevel: function () {\n            // TODO\n        }\n    }\n);\n```\n\n##### [强制] 类的属性或方法等成员信息使用 `@public` / `@protected` / `@private` 中的任意一个，指明可访问性。\n\n解释：\n\n生成的文档中将有可访问性的标记，避免用户直接使用非 `public` 的属性或方法。\n\n示例：\n\n```javascript\n/**\n * 类描述\n *\n * @class\n * @extends Developer\n */\nvar Fronteer = function () {\n    Developer.call(this);\n\n    /**\n     * 属性描述\n     *\n     * @type {string}\n     * @private\n     */\n    this._level = 'T12';\n\n    // constructor body\n};\nutil.inherits(Fronteer, Developer);\n\n/**\n * 方法描述\n *\n * @private\n * @return {string} 返回值描述\n */\nFronteer.prototype._getLevel = function () {\n};\n```\n\n\n#### 2.4.8 函数/方法注释\n\n\n##### [强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\n\n##### [强制] 参数和返回值注释必须包含类型信息和说明。\n\n##### [建议] 当函数是内部函数，外部不可访问时，可以使用 `@inner` 标识。\n\n示例：\n\n```javascript\n/**\n * 函数描述\n *\n * @param {string} p1 参数1的说明\n * @param {string} p2 参数2的说明，比较长\n *     那就换行了.\n * @param {number=} p3 参数3的说明（可选）\n * @return {Object} 返回值描述\n */\nfunction foo(p1, p2, p3) {\n    var p3 = p3 || 10;\n    return {\n        p1: p1,\n        p2: p2,\n        p3: p3\n    };\n}\n```\n\n##### [强制] 对 Object 中各项的描述， 必须使用 `@param` 标识。\n\n示例：\n\n```javascript\n/**\n * 函数描述\n *\n * @param {Object} option 参数描述\n * @param {string} option.url option项描述\n * @param {string=} option.method option项描述，可选参数\n */\nfunction foo(option) {\n    // TODO\n}\n```\n\n##### [建议] 重写父类方法时， 应当添加 `@override` 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 `@param`、`@return`，仅用 `@override` 标识，否则仍应作完整注释。\n\n解释：\n\n简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。\n\n#### 2.4.9 事件注释\n\n\n##### [强制] 必须使用 `@event` 标识事件，事件参数的标识与方法描述的参数标识相同。\n\n示例：\n\n```javascript\n/**\n * 值变更时触发\n *\n * @event\n * @param {Object} e e描述\n * @param {string} e.before before描述\n * @param {string} e.after after描述\n */\nonchange: function (e) {\n}\n```\n\n##### [强制] 在会广播事件的函数前使用 `@fires` 标识广播的事件，在广播事件代码前使用 `@event` 标识事件。\n\n##### [建议] 对于事件对象的注释，使用 `@param` 标识，生成文档时可读性更好。\n\n示例：\n\n```javascript\n/**\n * 点击处理\n *\n * @fires Select#change\n * @private\n */\nSelect.prototype.clickHandler = function () {\n    /**\n     * 值变更时触发\n     *\n     * @event Select#change\n     * @param {Object} e e描述\n     * @param {string} e.before before描述\n     * @param {string} e.after after描述\n     */\n    this.fire(\n        'change',\n        {\n            before: 'foo',\n            after: 'bar'\n        }\n    );\n};\n```\n\n#### 2.4.10 常量注释\n\n\n##### [强制] 常量必须使用 `@const` 标记，并包含说明和类型信息。\n\n示例：\n\n```javascript\n/**\n * 常量说明\n *\n * @const\n * @type {string}\n */\nvar REQUEST_URL = 'myurl.do';\n```\n\n#### 2.4.11 复杂类型注释\n\n\n##### [建议] 对于类型未定义的复杂结构的注释，可以使用 `@typedef` 标识来定义。\n\n示例：\n\n```javascript\n// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。\n/**\n * 服务器\n *\n * @typedef {Object} namespaceA~Server\n * @property {string} host 主机\n * @property {number} port 端口\n */\n\n/**\n * 服务器列表\n *\n * @type {Array.<namespaceA~Server>}\n */\nvar servers = [\n    {\n        host: '1.2.3.4',\n        port: 8080\n    },\n    {\n        host: '1.2.3.5',\n        port: 8081\n    }\n];\n```\n\n\n#### 2.4.12 AMD 模块注释\n\n\n##### [强制] AMD 模块使用 `@module` 或 `@exports` 标识。\n\n解释：\n\n@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。\n\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n\n        /**\n         * foo description\n         *\n         * @exports Foo\n         */\n        var foo = {\n            // TODO\n        };\n\n        /**\n         * baz description\n         *\n         * @return {boolean} return description\n         */\n        foo.baz = function () {\n            // TODO\n        };\n\n        return foo;\n\n    }\n);\n```\n\n也可以在 exports 变量前使用 @module 标识：\n\n```javascript\ndefine(\n    function (require) {\n\n        /**\n         * module description.\n         *\n         * @module foo\n         */\n        var exports = {};\n\n\n        /**\n         * bar description\n         *\n         */\n        exports.bar = function () {\n            // TODO\n        };\n\n        return exports;\n    }\n);\n```\n\n如果直接使用 factory 的 exports 参数，还可以：\n\n```javascript\n/**\n * module description.\n *\n * @module\n */\ndefine(\n    function (require, exports) {\n\n        /**\n         * bar description\n         *\n         */\n        exports.bar = function () {\n            // TODO\n        };\n        return exports;\n    }\n);\n```\n\n##### [强制] 对于已使用 `@module` 标识为 AMD模块 的引用，在 `namepaths` 中必须增加 `module:` 作前缀。\n\n解释：\n\nnamepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。\n\n示例：\n\n```javascript\n/**\n * 点击处理\n *\n * @fires module:Select#change\n * @private\n */\nSelect.prototype.clickHandler = function () {\n    /**\n     * 值变更时触发\n     *\n     * @event module:Select#change\n     * @param {Object} e e描述\n     * @param {string} e.before before描述\n     * @param {string} e.after after描述\n     */\n    this.fire(\n        'change',\n        {\n            before: 'foo',\n            after: 'bar'\n        }\n    );\n};\n```\n\n##### [建议] 对于类定义的模块，可以使用 `@alias` 标识构建函数。\n\n示例：\n\n```javascript\n/**\n * A module representing a jacket.\n * @module jacket\n */\ndefine(\n    function () {\n\n        /**\n         * @class\n         * @alias module:jacket\n         */\n        var Jacket = function () {\n        };\n\n        return Jacket;\n    }\n);\n```\n\n\n##### [建议] 多模块定义时，可以使用 `@exports` 标识各个模块。\n\n示例：\n\n```javascript\n// one module\ndefine('html/utils',\n    /**\n     * Utility functions to ease working with DOM elements.\n     * @exports html/utils\n     */\n    function () {\n        var exports = {\n        };\n\n        return exports;\n    }\n);\n\n// another module\ndefine('tag',\n    /** @exports tag */\n    function () {\n        var exports = {\n        };\n\n        return exports;\n    }\n);\n```\n\n##### [建议] 对于 exports 为 Object 的模块，可以使用`@namespace`标识。\n\n解释：\n\n使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。\n\n##### [建议] 对于 exports 为类名的模块，使用 `@class` 和 `@exports` 标识。\n\n\n示例：\n\n```javascript\n\n// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。\n// 另外需要注意类名需要使用 var 定义的方式。\n\n/**\n * Bar description\n *\n * @see foo\n * @exports  Bar\n * @class\n */\nvar Bar = function () {\n    // TODO\n};\n\n/**\n * baz description\n *\n * @return {(string|Array)} return description\n */\nBar.prototype.baz = function () {\n    // TODO\n};\n```\n\n\n#### 2.4.13 细节注释\n\n\n对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。\n\n#### [建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\n\n示例：\n\n```javascript\nfunction foo(p1, p2, opt_p3) {\n    // 这里对具体内部逻辑进行说明\n    // 说明太长需要换行\n    for (...) {\n        ....\n    }\n}\n```\n\n##### [强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\n\n解释：\n\n1. TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。\n2. FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。\n3. HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。\n4. XXX: 该处存在陷阱。此时需要对陷阱进行描述。\n\n\n\n\n## 3 语言特性\n\n\n\n\n\n\n### 3.1 变量\n\n\n##### [强制] 变量在使用前必须通过 `var` 定义。\n\n解释：\n\n不通过 var 定义变量将导致变量污染全局环境。\n\n\n示例：\n\n```javascript\n// good\nvar name = 'MyName';\n\n// bad\nname = 'MyName';\n```\n\n##### [强制] 每个 `var` 只能声明一个变量。\n\n解释：\n\n一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。\n\n\n示例：\n\n```javascript\n// good\nvar hangModules = [];\nvar missModules = [];\nvar visited = {};\n\n// bad\nvar hangModules = [],\n    missModules = [],\n    visited = {};\n```\n\n\n##### [强制] 变量必须 `即用即声明`，不得在函数或其它形式的代码块起始位置统一声明所有变量。\n\n解释： \n\n变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。\n\n\n示例：\n\n```javascript \n// good\nfunction kv2List(source) {\n    var list = [];\n\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            var item = {\n                k: key,\n                v: source[key]\n            };\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n\n// bad\nfunction kv2List(source) {\n    var list = [];\n    var key;\n    var item;\n\n    for (key in source) {\n        if (source.hasOwnProperty(key)) {\n            item = {\n                k: key,\n                v: source[key]\n            };\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n```\n\n\n\n\n\n\n### 3.2 条件\n\n\n##### [强制] 在 Equality Expression 中使用类型严格的 `===`。仅当判断 null 或 undefined 时，允许使用 `== null`。\n\n解释：\n\n使用 === 可以避免等于判断中隐式的类型转换。\n\n\n示例：\n\n```javascript\n// good\nif (age === 30) {\n    // ......\n}\n\n// bad\nif (age == 30) {\n    // ......\n}\n```\n\n##### [建议] 尽可能使用简洁的表达式。\n\n\n示例：\n\n```javascript\n// 字符串为空\n\n// good\nif (!name) {\n    // ......\n}\n\n// bad\nif (name === '') {\n    // ......\n}\n```\n\n```javascript\n// 字符串非空\n\n// good\nif (name) {\n    // ......\n}\n\n// bad\nif (name !== '') {\n    // ......\n}\n```\n\n```javascript\n// 数组非空\n\n// good\nif (collection.length) {\n    // ......\n}\n\n// bad\nif (collection.length > 0) {\n    // ......\n}\n```\n\n```javascript\n// 布尔不成立\n\n// good\nif (!notTrue) {\n    // ......\n}\n\n// bad\nif (notTrue === false) {\n    // ......\n}\n```\n\n```javascript\n// null 或 undefined\n\n// good\nif (noValue == null) {\n  // ......\n}\n\n// bad\nif (noValue === null || typeof noValue === 'undefined') {\n  // ......\n}\n```\n\n\n##### [建议] 按执行频率排列分支的顺序。\n\n解释：\n\n按执行频率排列分支的顺序好处是：\n\n1. 阅读的人容易找到最常见的情况，增加可读性。\n2. 提高执行效率。\n\n\n##### [建议] 对于相同变量或表达式的多值条件，用 `switch` 代替 `if`。\n\n示例：\n\n```javascript\n// good\nswitch (typeof variable) {\n    case 'object':\n        // ......\n        break;\n    case 'number':\n    case 'boolean':\n    case 'string':\n        // ......\n        break;\n}\n\n// bad\nvar type = typeof variable;\nif (type === 'object') {\n    // ......\n} \nelse if (type === 'number' || type === 'boolean' || type === 'string') {\n    // ......\n}\n```\n\n##### [建议] 如果函数或全局中的 `else` 块后没有任何语句，可以删除 `else`。\n\n示例：\n\n```javascript\n// good\nfunction getName() {\n    if (name) {\n        return name;\n    }\n\n    return 'unnamed';\n}\n\n// bad\nfunction getName() {\n    if (name) {\n        return name;\n    }\n    else {\n        return 'unnamed';\n    }\n}\n```\n\n\n\n\n\n### 3.3 循环\n\n\n##### [建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。\n\n解释：\n\n循环体中的函数表达式，运行过程中会生成循环次数个函数对象。\n\n\n示例：\n\n```javascript\n// good\nfunction clicker() {\n    // ......\n}\n\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    addListener(element, 'click', clicker);\n}\n\n\n// bad\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    addListener(element, 'click', function () {});\n}\n```\n\n##### [建议] 对循环内多次使用的不变值，在循环外用变量缓存。\n\n示例：\n\n```javascript\n// good\nvar width = wrap.offsetWidth + 'px';\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    element.style.width = width;\n    // ......\n}\n\n\n// bad\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    element.style.width = wrap.offsetWidth + 'px';\n    // ......\n}\n```\n\n\n##### [建议] 对有序集合进行遍历时，缓存 `length`。\n\n解释：\n\n虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。\n\n\n示例：\n\n```javascript\nfor (var i = 0, len = elements.length; i < len; i++) {\n    var element = elements[i];\n    // ......\n}\n```\n\n##### [建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。\n\n解释：\n\n逆序遍历可以节省变量，代码比较优化。\n\n示例：\n\n```javascript\nvar len = elements.length;\nwhile (len--) {\n    var element = elements[len];\n    // ......\n}\n```\n\n\n\n\n\n### 3.4 类型\n\n\n#### 3.4.1 类型检测\n\n\n##### [建议] 类型检测优先使用 `typeof`。对象类型检测使用 `instanceof`。`null` 或 `undefined` 的检测使用 `== null`。\n\n示例：\n\n```javascript\n// string\ntypeof variable === 'string'\n\n// number\ntypeof variable === 'number'\n\n// boolean\ntypeof variable === 'boolean'\n\n// Function\ntypeof variable === 'function'\n\n// Object\ntypeof variable === 'object'\n\n// RegExp\nvariable instanceof RegExp\n\n// Array\nvariable instanceof Array\n\n// null\nvariable === null\n\n// null or undefined\nvariable == null\n\n// undefined\ntypeof variable === 'undefined'\n```\n\n\n#### 3.4.2 类型转换\n\n\n##### [建议] 转换成 `string` 时，使用 `+ ''`。\n\n示例：\n\n```javascript\n// good\nnum + '';\n\n// bad\nnew String(num);\nnum.toString();\nString(num);\n```\n\n##### [建议] 转换成 `number` 时，通常使用 `+`。\n\n示例：\n\n```javascript\n// good\n+str;\n\n// bad\nNumber(str);\n```\n\n##### [建议] `string` 转换成 `number`，要转换的字符串结尾包含非数字并期望忽略时，使用 `parseInt`。\n\n示例：\n\n```javascript\nvar width = '200px';\nparseInt(width, 10);\n```\n\n##### [强制] 使用 `parseInt` 时，必须指定进制。\n\n示例：\n\n```javascript\n// good\nparseInt(str, 10);\n\n// bad\nparseInt(str);\n```\n\n##### [建议] 转换成 `boolean` 时，使用 `!!`。\n\n示例：\n\n```javascript\nvar num = 3.14;\n!!num;\n```\n\n##### [建议] `number` 去除小数点，使用 `Math.floor / Math.round / Math.ceil`，不使用 `parseInt`。\n\n示例：\n\n```javascript\n// good\nvar num = 3.14;\nMath.ceil(num);\n\n// bad\nvar num = 3.14;\nparseInt(num, 10);\n```\n\n\n\n\n### 3.5 字符串\n\n\n##### [强制] 字符串开头和结束使用单引号 `'`。\n\n解释：\n\n1. 输入单引号不需要按住 shift，方便输入。\n2. 实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。\n\n示例：\n\n```javascript\nvar str = '我是一个字符串';\nvar html = '<div class=\"cls\">拼接HTML可以省去双引号转义</div>';\n```\n\n##### [建议] 使用 `数组` 或 `+` 拼接字符串。\n\n解释：\n\n1. 使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。\n2. 在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。\n3. 如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。\n\n示例：\n\n```javascript\n// 使用数组拼接字符串\nvar str = [\n    // 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.\n    '<ul>',\n        '<li>第一项</li>',\n        '<li>第二项</li>',\n    '</ul>'\n].join('');\n\n// 使用 + 拼接字符串\nvar str2 = '' // 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读\n    + '<ul>',\n    +    '<li>第一项</li>',\n    +    '<li>第二项</li>',\n    + '</ul>';\n```\n\n##### [建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。\n\n解释：\n\n使用模板引擎有如下好处：\n\n1. 在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。\n2. 优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。\n\n- artTemplate: 体积较小，在所有环境下性能高，语法灵活。\n- dot.js: 体积小，在现代浏览器下性能高，语法灵活。\n- etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。\n- handlebars: 体积大，在所有环境下性能高，扩展性高。\n- hogon: 体积小，在现代浏览器下性能高。\n- nunjucks: 体积较大，性能一般，模板复用性高。\n\n\n\n\n### 3.6 对象\n\n\n##### [强制] 使用对象字面量 `{}` 创建新 `Object`。\n\n示例： \n\n```javascript\n// good\nvar obj = {};\n\n// bad\nvar obj = new Object();\n```\n\n##### [强制] 对象创建时，如果一个对象的所有 `属性` 均可以不添加引号，则所有 `属性` 不得添加引号。\n\n示例： \n\n```javascript\nvar info = {\n    name: 'someone',\n    age: 28\n};\n```\n\n##### [强制] 对象创建时，如果任何一个 `属性` 需要添加引号，则所有 `属性` 必须添加 `'`。\n\n解释：\n\n如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。\n\n\n示例： \n\n```javascript\n// good\nvar info = {\n    'name': 'someone',\n    'age': 28,\n    'more-info': '...'\n};\n\n// bad\nvar info = {\n    name: 'someone',\n    age: 28,\n    'more-info': '...'\n};\n```\n\n##### [强制] 不允许修改和扩展任何原生对象和宿主对象的原型。\n\n示例： \n\n```javascript\n// 以下行为绝对禁止\nString.prototype.trim = function () {\n};\n```\n\n##### [建议] 属性访问时，尽量使用 `.`。\n\n解释：\n\n属性名符合 Identifier 的要求，就可以通过 `.` 来访问，否则就只能通过 `[expr]` 方式访问。\n\n通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 `.` 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 `[expr]` 方式访问。\n\n\n示例： \n\n```javascript\ninfo.age;\ninfo['more-info'];\n```\n\n##### [建议] `for in` 遍历对象时, 使用 `hasOwnProperty` 过滤掉原型中的属性。\n\n示例：\n\n```javascript\nvar newInfo = {};\nfor (var key in info) {\n    if (info.hasOwnProperty(key)) {\n        newInfo[key] = info[key];\n    }\n}\n```\n\n\n\n\n### 3.7 数组\n\n\n##### [强制] 使用数组字面量 `[]` 创建新数组，除非想要创建的是指定长度的数组。\n\n示例：\n\n```javascript\n// good\nvar arr = [];\n\n// bad\nvar arr = new Array();\n```\n\n##### [强制] 遍历数组不使用 `for in`。\n\n解释：\n\n数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.\n\n示例：\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.other = 'other things'; // 这里仅作演示, 实际中应使用Object类型\n\n// 正确的遍历方式\nfor (var i = 0, len = arr.length; i < len; i++) {\n    console.log(i);\n}\n\n// 错误的遍历方式\nfor (i in arr) {\n    console.log(i);\n}\n```\n\n##### [建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 `sort` 方法。\n\n解释：\n\n自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：\n\n1. 需要稳定的排序算法，达到严格一致的排序结果。\n2. 数据特点鲜明，适合使用桶排。\n\n##### [建议] 清空数组使用 `.length = 0`。\n\n\n\n\n### 3.8 函数\n\n\n\n#### 3.8.1 函数长度\n\n\n##### [建议] 一个函数的长度控制在 `50` 行以内。\n\n解释：\n\n将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。\n\n特定算法等不可分割的逻辑允许例外。\n\n\n示例：\n\n```javascript\nfunction syncViewStateOnUserAction() {\n    if (x.checked) {\n        y.checked = true;\n        z.value = '';\n    }\n    else {\n        y.checked = false;\n    }\n\n    if (!a.value) {\n        warning.innerText = 'Please enter it';\n        submitButton.disabled = true;\n    }\n    else {\n        warning.innerText = '';\n        submitButton.disabled = false;\n    }\n}\n\n// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：\n\nfunction syncViewStateOnUserAction() {\n    syncXStateToView();\n    checkAAvailability();\n}\n\nfunction syncXStateToView() {\n    if (x.checked) {\n        y.checked = true;\n        z.value = '';\n    }\n    else {\n        y.checked = false;\n    }\n}\n\nfunction checkAAvailability() {\n    if (!a.value) {\n        displayWarningForAMissing();\n    }\n    else {\n        clearWarnignForA();\n    }\n}\n```\n\n\n#### 3.8.2 参数设计\n\n\n##### [建议] 一个函数的参数控制在 `6` 个以内。\n\n解释：\n\n除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。\n\n某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。\n\n\n##### [建议] 通过 `options` 参数传递非数据输入型参数。\n\n解释：\n\n有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。\n\n如下函数：\n\n```javascript\n/**\n * 移除某个元素\n *\n * @param {Node} element 需要移除的元素\n * @param {boolean} removeEventListeners 是否同时将所有注册在元素上的事件移除\n */\nfunction removeElement(element, removeEventListeners) {\n    element.parent.removeChild(element);\n    if (removeEventListeners) {\n        element.clearEventListeners();\n    }\n}\n```\n\n可以转换为下面的签名：\n\n```javascript\n/**\n * 移除某个元素\n *\n * @param {Node} element 需要移除的元素\n * @param {Object} options 相关的逻辑配置\n * @param {boolean} options.removeEventListeners 是否同时将所有注册在元素上的事件移除\n */\nfunction removeElement(element, options) {\n    element.parent.removeChild(element);\n    if (options.removeEventListeners) {\n        element.clearEventListeners();\n    }\n}\n```\n\n这种模式有几个显著的优势：\n\n- boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。\n- 当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。\n- 当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。\n\n\n\n#### 3.8.3 闭包\n\n\n##### [建议] 在适当的时候将闭包内大对象置为 `null`。\n\n解释：\n\n在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。\n\n闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。\n\n首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：\n\n- 嵌套的函数中是否有使用该变量。\n- 嵌套的函数中是否有 **直接调用eval**。\n- 是否使用了 with 表达式。\n\nChakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。\n\n由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：\n\n1. 如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：\n    1. 如果是 V8 引擎，则退出全过程。\n    2. 如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。\n2. 获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：\n    1. 如果 FunctionBody 中含有 **直接调用eval**，则退出全过程。\n    2. 否则得到所有的 Identifier。\n    3. 对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。\n    4. 对 binding 添加 notSwap 属性，其值为 true。\n3. 检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：\n    1. 如果是V8引擎，删除该绑定。\n    2. 如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。\n\n对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。\n\n如果有 **非常庞大** 的对象，且预计会在 **老旧的引擎** 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。\n\n##### [建议] 使用 `IIFE` 避免 `Lift 效应`。\n\n解释：\n\n在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：\n\n```javascript\nvar tasks = [];\nfor (var i = 0; i < 5; i++) {\n    tasks[tasks.length] = function () {\n        console.log('Current cursor is at ' + i);\n    };\n}\n\nvar len = tasks.length;\nwhile (len--) {\n    tasks[len]();\n}\n```\n\n以上代码对 tasks 中的函数的执行均会输出 `Current cursor is at 5`，往往不符合预期。\n\n此现象称为 **Lift 效应** 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：\n\n```javascript\nvar tasks = [];\nfor (var i = 0; i < 5; i++) {\n    // 注意有一层额外的闭包\n    tasks[tasks.length] = (function (i) {\n        return function () {\n            console.log('Current cursor is at ' + i);\n        };\n    })(i);\n}\n\nvar len = tasks.length;\nwhile (len--) {\n    tasks[len]();\n}\n```\n\n#### 3.8.4 空函数\n\n\n##### [建议] 空函数不使用 `new Function()` 的形式。\n\n示例：\n\n```javascript\nvar emptyFunction = function () {};\n```\n\n##### [建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\n\n示例：\n\n```javascript\nvar EMPTY_FUNCTION = function () {};\n\nfunction MyClass() {\n}\n\nMyClass.prototype.abstractMethod = EMPTY_FUNCTION;\nMyClass.prototype.hooks.before = EMPTY_FUNCTION;\nMyClass.prototype.hooks.after = EMPTY_FUNCTION;\n```\n\n\n\n\n\n\n\n### 3.9 面向对象\n\n\n##### [强制] 类的继承方案，实现时需要修正 `constructor`。\n\n解释：\n\n通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。\n\n\n示例：\n\n```javascript\n/**\n * 构建类之间的继承关系\n * \n * @param {Function} subClass 子类函数\n * @param {Function} superClass 父类函数\n */\nfunction inherits(subClass, superClass) {\n    var F = new Function();\n    F.prototype = superClass.prototype;\n    subClass.prototype = new F();\n    subClass.prototype.constructor = subClass;\n}\n```\n\n##### [建议] 声明类时，保证 `constructor` 的正确性。\n\n示例：\n\n```javascript\nfunction Animal(name) {\n    this.name = name;\n}\n\n// 直接prototype等于对象时，需要修正constructor\nAnimal.prototype = {\n    constructor: Animal,\n\n    jump: function () {\n        alert('animal ' + this.name + ' jump');\n    }\n};\n\n// 这种方式扩展prototype则无需理会constructor\nAnimal.prototype.jump = function () {\n    alert('animal ' + this.name + ' jump');\n};\n```\n\n\n##### [建议] 属性在构造函数中声明，方法在原型中声明。\n\n解释： \n\n原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。\n\n```javascript\nfunction TextNode(value, engine) {\n    this.value = value;\n    this.engine = engine;\n}\n\nTextNode.prototype.clone = function () {\n    return this;\n};\n```\n\n##### [强制] 自定义事件的 `事件名` 必须全小写。\n\n解释：\n\n在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。\n\n##### [强制] 自定义事件只能有一个 `event` 参数。如果事件需要传递较多信息，应仔细设计事件对象。\n\n解释：\n\n一个事件对象的好处有：\n\n1. 顺序无关，避免事件监听者需要记忆参数顺序。\n2. 每个事件信息都可以根据需要提供或者不提供，更自由。\n3. 扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。\n\n\n##### [建议] 设计自定义事件时，应考虑禁止默认行为。\n\n解释：\n\n常见禁止默认行为的方式有两种：\n\n1. 事件监听函数中 return false。\n2. 事件对象中包含禁止默认行为的方法，如 preventDefault。\n\n\n\n\n### 3.10 动态特性\n\n\n#### 3.10.1 eval\n\n\n##### [强制] 避免使用直接 `eval` 函数。\n\n解释：\n\n直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。\n\n如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。\n\n##### [建议] 尽量避免使用 `eval` 函数。\n\n\n#### 3.10.2 动态执行代码\n\n\n##### [建议] 使用 `new Function` 执行动态代码。\n\n解释：\n\n通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。\n\n\n示例：\n\n```javascript\nvar handler = new Function('x', 'y', 'return x + y;');\nvar result = handler($('#x').val(), $('#y').val());\n```\n\n\n\n#### 3.10.3 with\n\n\n##### [建议] 尽量不要使用 `with`。\n\n解释：\n\n使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。\n\n\n\n\n#### 3.10.4 delete\n\n\n##### [建议] 减少 `delete` 的使用。\n\n解释：\n\n如果没有特别的需求，减少或避免使用`delete`。`delete`的使用会破坏部分 JavaScript 引擎的性能优化。\n\n\n##### [建议] 处理 `delete` 可能产生的异常。\n\n解释：\n\n对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。\n\n在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。\n\n示例：\n\n```javascript\ntry {\n    delete o.x;\n}\ncatch (deleteError) {\n    o.x = null;\n}\n```\n\n\n\n#### 3.10.5 对象属性\n\n\n\n##### [建议] 避免修改外部传入的对象。\n\n解释：\n\nJavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。\n\n但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。\n\n下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。\n\n```javascript\nfunction Tree(datasource) {\n    this.datasource = datasource;\n}\n\nTree.prototype.selectNode = function (id) {\n    // 从datasource中找出节点对象\n    var node = this.findNode(id);\n    if (node) {\n        node.selected = true;\n        this.flushView();\n    }\n};\n```\n\n对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。\n\n```javascript\nfunction Tree(datasource) {\n    this.datasource = datasource;\n    this.selectedNodeIndex = {};\n}\n\nTree.prototype.selectNode = function (id) {\n    // 从datasource中找出节点对象\n    var node = this.findNode(id);\n    if (node) {\n        this.selectedNodeIndex[id] = true;\n        this.flushView();\n    }\n};\n```\n\n除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。\n\n\n##### [建议] 具备强类型的设计。\n\n解释：\n\n- 如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。\n- 从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。\n\n\n\n\n\n\n\n\n\n## 4 浏览器环境\n\n\n\n\n### 4.1 模块化\n\n\n#### 4.1.1 AMD\n\n\n##### [强制] 使用 `AMD` 作为模块定义。\n\n解释：\n\nAMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。\n\n目前，比较成熟的 AMD Loader 有：\n\n- 官方实现的 [requirejs](http://requirejs.org/)\n- 百度自己实现的 [esl](https://github.com/ecomfe/esl)\n\n\n##### [强制] 模块 `id` 必须符合标准。\n\n解释：\n\n模块 id 必须符合以下约束条件：\n\n1. 类型为 string，并且是由 `/` 分割的一系列 terms 来组成。例如：`this/is/a/module`。\n2. term 应该符合 [a-zA-Z0-9_-]+ 规则。\n3. 不应该有 .js 后缀。\n4. 跟文件的路径保持一致。\n\n\n\n#### 4.1.2 define\n\n\n##### [建议] 定义模块时不要指明 `id` 和 `dependencies`。\n\n解释：\n\n在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。\n\n所以，推荐使用 define(factory) 的形式进行模块定义。\n\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n    }\n);\n```\n\n\n##### [建议] 使用 `return` 来返回模块定义。\n\n解释：\n\n使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        var exports = {};\n\n        // ...\n\n        return exports;\n    }\n);\n```\n\n\n\n\n#### 4.1.3 require\n\n\n##### [强制] 全局运行环境中，`require` 必须以 `async require` 形式调用。\n\n解释：\n\n模块的加载过程是异步的，同步调用并无法保证得到正确的结果。\n\n示例：\n\n```javascript\n// good\nrequire(['foo'], function (foo) {\n});\n\n// bad\nvar foo = require('foo');\n```\n\n##### [强制] 模块定义中只允许使用 `local require`，不允许使用 `global require`。\n\n解释：\n\n1. 在模块定义中使用 global require，对封装性是一种破坏。\n2. 在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。\n\n\n##### [强制] Package在实现时，内部模块的 `require` 必须使用 `relative id`。\n\n解释：\n\n对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        var util = require('./util');\n    }\n);\n```\n\n\n##### [建议] 不会被调用的依赖模块，在 `factory` 开始处统一 `require`。\n\n解释：\n\n有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。\n\n示例：\n\n```javascript\ndefine(\n    function (require) {\n        require('css!foo.css');\n        require('tpl!bar.tpl.html');\n\n        // ...\n    }\n);\n```\n\n\n\n### 4.2 DOM\n\n\n#### 4.2.1 元素获取\n\n\n##### [建议] 对于单个元素，尽可能使用 `document.getElementById` 获取，避免使用`document.all`。\n\n\n##### [建议] 对于多个元素的集合，尽可能使用 `context.getElementsByTagName` 获取。其中 `context` 可以为 `document` 或其他元素。指定 `tagName` 参数为 `*` 可以获得所有子元素。\n\n##### [建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\n\n解释：\n\n原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。\n\n\n示例：\n\n```html\n<div></div>\n<span></span>\n\n<script>\nvar elements = document.getElementsByTagName('*');\n\n// 显示为 DIV\nalert(elements[0].tagName);\n\nvar div = elements[0];\nvar p = document.createElement('p');\ndocument.body.insertBefore(p, div);\n\n// 显示为 P\nalert(elements[0].tagName);\n</script>\n```\n\n\n##### [建议] 获取元素的直接子元素时使用 `children`。避免使用`childNodes`，除非预期是需要包含文本、注释和属性类型的节点。\n\n\n\n\n#### 4.2.2 样式获取\n\n\n##### [建议] 获取元素实际样式信息时，应使用 `getComputedStyle` 或 `currentStyle`。\n\n解释：\n\n通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。\n\n\n\n\n#### 4.2.3 样式设置\n\n\n##### [建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。\n\n##### [强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。\n\n解释：\n\n除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。\n\n\n\n\n#### 4.2.4 DOM 操作\n\n\n##### [建议] 操作 `DOM` 时，尽量减少页面 `reflow`。\n\n解释：\n\n页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：\n\n- DOM元素的添加、修改（内容）、删除。\n- 应用新的样式或者修改任何影响元素布局的属性。\n- Resize浏览器窗口、滚动页面。\n- 读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。\n\n\n##### [建议] 尽量减少 `DOM` 操作。\n\n解释：\n\nDOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：\n\n1. 在循环体中 createElement 并 append 到父元素中。\n2. 在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。\n\n第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。\n\n\n\n\n#### 4.2.5 DOM 事件\n\n\n##### [建议] 优先使用 `addEventListener / attachEvent` 绑定事件，避免直接在 HTML 属性中或 DOM 的 `expando` 属性绑定事件处理。\n\n解释：\n\nexpando 属性绑定事件容易导致互相覆盖。\n\n\n##### [建议] 使用 `addEventListener` 时第三个参数使用 `false`。\n\n解释：\n\n标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。\n\n\n##### [建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\n\n\n\n","slug":"js_code_style","published":1,"updated":"2017-05-25T00:54:35.701Z","comments":1,"photos":[],"link":"","_id":"cj4sal69m000xek5bqwr7f9jr","content":"<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时<span class=\"comment\">(如TypeScript等)</span>时，适用的部分也应尽量遵循本文档的约定</div></pre></td></tr></table></figure>\n<p>#</p>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>JavaScript在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。</p>\n<p>虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。</p>\n<h2 id=\"2-代码风格\"><a href=\"#2-代码风格\" class=\"headerlink\" title=\"2 代码风格\"></a>2 代码风格</h2><h3 id=\"2-1-文件\"><a href=\"#2-1-文件\" class=\"headerlink\" title=\"2.1 文件\"></a>2.1 文件</h3><h5 id=\"建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。\"><a href=\"#建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。\" class=\"headerlink\" title=\"[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。\"></a>[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p>\n<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>\n<h5 id=\"建议-在文件结尾处，保留一个空行。\"><a href=\"#建议-在文件结尾处，保留一个空行。\" class=\"headerlink\" title=\"[建议] 在文件结尾处，保留一个空行。\"></a>[建议] 在文件结尾处，保留一个空行。</h5><h3 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h3><h4 id=\"2-2-1-缩进\"><a href=\"#2-2-1-缩进\" class=\"headerlink\" title=\"2.2.1 缩进\"></a>2.2.1 缩进</h4><h5 id=\"强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。\"><a href=\"#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。\" class=\"headerlink\" title=\"[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。\"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id=\"强制-switch-下的-case-和-default-必须增加一个缩进层级。\"><a href=\"#强制-switch-下的-case-和-default-必须增加一个缩进层级。\" class=\"headerlink\" title=\"[强制] switch 下的 case 和 default 必须增加一个缩进层级。\"></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (variable) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (variable) &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-空格\"><a href=\"#2-2-2-空格\" class=\"headerlink\" title=\"2.2.2 空格\"></a>2.2.2 空格</h4><h5 id=\"强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\"><a href=\"#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\" class=\"headerlink\" title=\"[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\"></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = !arr.length;</div><div class=\"line\">a++;</div><div class=\"line\">a = b + c;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-用作代码块起始的左花括号-前必须有一个空格。\"><a href=\"#强制-用作代码块起始的左花括号-前必须有一个空格。\" class=\"headerlink\" title=\"[强制] 用作代码块起始的左花括号 { 前必须有一个空格。\"></a>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。\"><a href=\"#强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。\" class=\"headerlink\" title=\"[强制] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。\"></a>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span>(condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。\"><a href=\"#强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。\" class=\"headerlink\" title=\"[强制] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。\"></a>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span> :<span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。\"><a href=\"#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。\" class=\"headerlink\" title=\"[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。\"></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">funcName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">funcName ();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-和-前不允许有空格。\"><a href=\"#强制-和-前不允许有空格。\" class=\"headerlink\" title=\"[强制] , 和 ; 前不允许有空格。\"></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">callFunc(a, b);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\">callFunc(a , b) ;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。\"><a href=\"#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。\" class=\"headerlink\" title=\"[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。\"></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"></div><div class=\"line\">callFunc(param1, param2, param3);</div><div class=\"line\"></div><div class=\"line\">save(<span class=\"keyword\">this</span>.list[<span class=\"keyword\">this</span>.indexes[i]]);</div><div class=\"line\"></div><div class=\"line\">needIncream &amp;&amp; (variable += increament);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (num &gt; list.length) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"></div><div class=\"line\">callFunc( param1, param2, param3 );</div><div class=\"line\"></div><div class=\"line\">save( <span class=\"keyword\">this</span>.list[ <span class=\"keyword\">this</span>.indexes[ i ] ] );</div><div class=\"line\"></div><div class=\"line\">needIncreament &amp;&amp; ( variable += increament );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ( num &gt; list.length ) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> ( len-- ) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。\"><a href=\"#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。\" class=\"headerlink\" title=\"[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。\"></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p>\n<p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [ ];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ];</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'obj'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span>&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-行尾不得有多余的空格。\"><a href=\"#强制-行尾不得有多余的空格。\" class=\"headerlink\" title=\"[强制] 行尾不得有多余的空格。\"></a>[强制] 行尾不得有多余的空格。</h5><h4 id=\"2-2-3-换行\"><a href=\"#2-2-3-换行\" class=\"headerlink\" title=\"2.2.3 换行\"></a>2.2.3 换行</h4><h5 id=\"强制-每个独立语句结束后必须换行。\"><a href=\"#强制-每个独立语句结束后必须换行。\" class=\"headerlink\" title=\"[强制] 每个独立语句结束后必须换行。\"></a>[强制] 每个独立语句结束后必须换行。</h5><h5 id=\"强制-每行不得超过-120-个字符。\"><a href=\"#强制-每行不得超过-120-个字符。\" class=\"headerlink\" title=\"[强制] 每行不得超过 120 个字符。\"></a>[强制] 每行不得超过 <code>120</code> 个字符。</h5><p>解释：</p>\n<p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p>\n<h5 id=\"强制-运算符处换行时，运算符必须在新行的行首。\"><a href=\"#强制-运算符处换行时，运算符必须在新行的行首。\" class=\"headerlink\" title=\"[强制] 运算符处换行时，运算符必须在新行的行首。\"></a>[强制] 运算符处换行时，运算符必须在新行的行首。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated()</div><div class=\"line\">    &amp;&amp; user.isInRole(<span class=\"string\">'admin'</span>)</div><div class=\"line\">    &amp;&amp; user.hasAuthority(<span class=\"string\">'add-admin'</span>)</div><div class=\"line\">    || user.hasAuthority(<span class=\"string\">'delete-admin'</span>)</div><div class=\"line\">) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = number1 + number2 + number3</div><div class=\"line\">    + number4 + number5;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated() &amp;&amp;</div><div class=\"line\">    user.isInRole(<span class=\"string\">'admin'</span>) &amp;&amp;</div><div class=\"line\">    user.hasAuthority(<span class=\"string\">'add-admin'</span>) ||</div><div class=\"line\">    user.hasAuthority(<span class=\"string\">'delete-admin'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = number1 + number2 + number3 +</div><div class=\"line\">    number4 + number5;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。\"><a href=\"#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。\" class=\"headerlink\" title=\"[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 , 或 ; 前换行。\"></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument,</div><div class=\"line\">    anotherVeryLongArgument,</div><div class=\"line\">    callback</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">    , <span class=\"attr\">b</span>: <span class=\"number\">2</span></div><div class=\"line\">    , <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument</div><div class=\"line\">    , anotherVeryLongArgument</div><div class=\"line\">    , callback</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。\"><a href=\"#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。\" class=\"headerlink\" title=\"[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。\"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyle</span>(<span class=\"params\">element, property, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (element == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    element.style[property] = value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。\"><a href=\"#建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。\" class=\"headerlink\" title=\"[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。\"></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></div><div class=\"line\"><span class=\"comment\">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated()</div><div class=\"line\">    &amp;&amp; user.isInRole(<span class=\"string\">'admin'</span>)</div><div class=\"line\">    &amp;&amp; user.hasAuthority(<span class=\"string\">'add-admin'</span>)</div><div class=\"line\">    || user.hasAuthority(<span class=\"string\">'delete-admin'</span>)</div><div class=\"line\">) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></div><div class=\"line\"><span class=\"comment\">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></div><div class=\"line\"><span class=\"comment\">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"string\">''</span> <span class=\"comment\">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span></div><div class=\"line\">    + <span class=\"string\">'&lt;article&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></div><div class=\"line\">    + <span class=\"string\">'&lt;/article&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = [</div><div class=\"line\">    <span class=\"string\">'&lt;article&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;/article&gt;'</span></div><div class=\"line\">];</div><div class=\"line\">html = html.join(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></div><div class=\"line\"><span class=\"comment\">// 所有参数必须增加一个缩进。</span></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument,</div><div class=\"line\">    anotherVeryLongArgument,</div><div class=\"line\">    callback</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以按逻辑对参数进行组合。</span></div><div class=\"line\"><span class=\"comment\">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span></div><div class=\"line\">baidu.format(</div><div class=\"line\">    dateFormatTemplate,</div><div class=\"line\">    year, month, date, hour, minute, second</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></div><div class=\"line\"><span class=\"comment\">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span></div><div class=\"line\">setTimeout(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"number\">200</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">order.data.read(</div><div class=\"line\">    <span class=\"string\">'id='</span> + me.model.id, </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        me.attchToModel(data.result);</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;, </div><div class=\"line\">    <span class=\"number\">300</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 链式调用较长时采用缩进进行调整。</span></div><div class=\"line\">$(<span class=\"string\">'#items'</span>)</div><div class=\"line\">    .find(<span class=\"string\">'.selected'</span>)</div><div class=\"line\">    .highlight()</div><div class=\"line\">    .end();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = thisIsAVeryVeryLongCondition</div><div class=\"line\">    ? resultA : resultB;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = condition</div><div class=\"line\">    ? thisIsAVeryVeryLongResult</div><div class=\"line\">    : resultB;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 数组和对象初始化的混用，严格按照每个对象的 &#123; 和结束 &#125; 在独立一行的风格书写。</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。\"><a href=\"#建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。\" class=\"headerlink\" title=\"[建议] 对于 if...else...、try...catch...finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。\"></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-4-语句\"><a href=\"#2-2-4-语句\" class=\"headerlink\" title=\"2.2.4 语句\"></a>2.2.4 语句</h4><h5 id=\"强制-不得省略语句结束的分号。\"><a href=\"#强制-不得省略语句结束的分号。\" class=\"headerlink\" title=\"[强制] 不得省略语句结束的分号。\"></a>[强制] 不得省略语句结束的分号。</h5><h5 id=\"强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。\"><a href=\"#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。\" class=\"headerlink\" title=\"[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。\"></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    callFunc();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) callFunc();</div><div class=\"line\"><span class=\"keyword\">if</span> (condition)</div><div class=\"line\">    callFunc();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数定义结束不允许添加分号。\"><a href=\"#强制-函数定义结束不允许添加分号。\" class=\"headerlink\" title=\"[强制] 函数定义结束不允许添加分号。\"></a>[强制] 函数定义结束不允许添加分号。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是函数表达式，分号是不允许省略的。</span></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。\"><a href=\"#强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。\" class=\"headerlink\" title=\"[强制] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 (。\"></a>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5><p>解释：</p>\n<p>IIFE = Immediately-Invoked Function Expression.</p>\n<p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> task = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Code</span></div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-3-命名\"><a href=\"#2-3-命名\" class=\"headerlink\" title=\"2.3 命名\"></a>2.3 命名</h3><h5 id=\"强制-变量-使用-Camel命名法。\"><a href=\"#强制-变量-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 变量 使用 Camel命名法。\"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loadingModules = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。\"><a href=\"#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。\" class=\"headerlink\" title=\"[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。\"></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HTML_ENTITY = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数-使用-Camel命名法。\"><a href=\"#强制-函数-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 函数 使用 Camel命名法。\"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringFormat</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数的-参数-使用-Camel命名法。\"><a href=\"#强制-函数的-参数-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 函数的 参数 使用 Camel命名法。\"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hear</span>(<span class=\"params\">theBells</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类-使用-Pascal命名法。\"><a href=\"#强制-类-使用-Pascal命名法。\" class=\"headerlink\" title=\"[强制] 类 使用 Pascal命名法。\"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类的-方法-属性-使用-Camel命名法。\"><a href=\"#强制-类的-方法-属性-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 类的 方法 / 属性 使用 Camel命名法。\"></a>[强制] 类的 <code>方法 / 属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">value, engine</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TextNode.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。\"><a href=\"#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。\" class=\"headerlink\" title=\"[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。\"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TargetState = &#123;</div><div class=\"line\">    <span class=\"attr\">READING</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">READED</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">APPLIED</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">READY</span>: <span class=\"number\">4</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-命名空间-使用-Camel命名法。\"><a href=\"#强制-命名空间-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 命名空间 使用 Camel命名法。\"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">equipments.heavyWeapons = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\"><a href=\"#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\" class=\"headerlink\" title=\"[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">XMLParser</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertHTML</span>(<span class=\"params\">element, html</span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> httpRequest = <span class=\"keyword\">new</span> HTTPRequest();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类名-使用-名词。\"><a href=\"#强制-类名-使用-名词。\" class=\"headerlink\" title=\"[强制] 类名 使用 名词。\"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Engine</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-函数名-使用-动宾短语。\"><a href=\"#建议-函数名-使用-动宾短语。\" class=\"headerlink\" title=\"[建议] 函数名 使用 动宾短语。\"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-boolean-类型的变量使用-is-或-has-开头。\"><a href=\"#建议-boolean-类型的变量使用-is-或-has-开头。\" class=\"headerlink\" title=\"[建议] boolean 类型的变量使用 is 或 has 开头。\"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isReady = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> hasMoreCommands = <span class=\"literal\">false</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-Promise对象-用-动宾短语的进行时-表达。\"><a href=\"#建议-Promise对象-用-动宾短语的进行时-表达。\" class=\"headerlink\" title=\"[建议] Promise对象 用 动宾短语的进行时 表达。\"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loadingData = ajax.get(<span class=\"string\">'url'</span>);</div><div class=\"line\">loadingData.then(callback);</div></pre></td></tr></table></figure>\n<h3 id=\"2-4-注释\"><a href=\"#2-4-注释\" class=\"headerlink\" title=\"2.4 注释\"></a>2.4 注释</h3><h4 id=\"2-4-1-单行注释\"><a href=\"#2-4-1-单行注释\" class=\"headerlink\" title=\"2.4.1 单行注释\"></a>2.4.1 单行注释</h4><h5 id=\"强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。\"><a href=\"#强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。\" class=\"headerlink\" title=\"[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。\"></a>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5><h4 id=\"2-4-2-多行注释\"><a href=\"#2-4-2-多行注释\" class=\"headerlink\" title=\"2.4.2 多行注释\"></a>2.4.2 多行注释</h4><h5 id=\"建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。\"><a href=\"#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。\" class=\"headerlink\" title=\"[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。\"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id=\"2-4-3-文档化注释\"><a href=\"#2-4-3-文档化注释\" class=\"headerlink\" title=\"2.4.3 文档化注释\"></a>2.4.3 文档化注释</h4><h5 id=\"强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。\"><a href=\"#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。\" class=\"headerlink\" title=\"[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。\"></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p>\n<ol>\n<li>文件</li>\n<li>namespace</li>\n<li>类</li>\n<li>函数或方法</li>\n<li>类属性</li>\n<li>事件</li>\n<li>全局变量</li>\n<li>常量</li>\n<li>AMD 模块</li>\n</ol>\n<h5 id=\"强制-文档注释前必须空一行。\"><a href=\"#强制-文档注释前必须空一行。\" class=\"headerlink\" title=\"[强制] 文档注释前必须空一行。\"></a>[强制] 文档注释前必须空一行。</h5><h5 id=\"建议-自文档化的文档说明-what，而不是-how。\"><a href=\"#建议-自文档化的文档说明-what，而不是-how。\" class=\"headerlink\" title=\"[建议] 自文档化的文档说明 what，而不是 how。\"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id=\"2-4-4-类型定义\"><a href=\"#2-4-4-类型定义\" class=\"headerlink\" title=\"2.4.4 类型定义\"></a>2.4.4 类型定义</h4><h5 id=\"强制-类型定义都是以-开始-以-结束。\"><a href=\"#强制-类型定义都是以-开始-以-结束。\" class=\"headerlink\" title=\"[强制] 类型定义都是以{开始, 以}结束。\"></a>[强制] 类型定义都是以<code>{</code>开始, 以<code>}</code>结束。</h5><p>解释：</p>\n<p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>\n<p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>\n<h5 id=\"强制-对于基本类型-string-number-boolean-，首字母必须小写。\"><a href=\"#强制-对于基本类型-string-number-boolean-，首字母必须小写。\" class=\"headerlink\" title=\"[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。\"></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table>\n<thead>\n<tr>\n<th>类型定义</th>\n<th>语法示例</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>{string}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>{number}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>{boolean}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>{Object}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Function</td>\n<td>{Function}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>RegExp</td>\n<td>{RegExp}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>{Array}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>{Date}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>单一类型集合</td>\n<td>{Array.&lt;string&gt;}</td>\n<td>string 类型的数组</td>\n</tr>\n<tr>\n<td>多类型</td>\n<td>{(number｜boolean)}</td>\n<td>可能是 number 类型, 也可能是 boolean 类型</td>\n</tr>\n<tr>\n<td>允许为null</td>\n<td>{?number}</td>\n<td>可能是 number, 也可能是 null</td>\n</tr>\n<tr>\n<td>不允许为null</td>\n<td>{!Object}</td>\n<td>Object 类型, 但不是 null</td>\n</tr>\n<tr>\n<td>Function类型</td>\n<td>{function(number, boolean)}</td>\n<td>函数, 形参类型</td>\n</tr>\n<tr>\n<td>Function带返回值</td>\n<td>{function(number, boolean):string}</td>\n<td>函数, 形参, 返回值类型</td>\n</tr>\n<tr>\n<td>参数可选</td>\n<td>@param {string=} name</td>\n<td>可选参数, =为类型后缀</td>\n</tr>\n<tr>\n<td>可变参数</td>\n<td>@param {…number} args</td>\n<td>变长参数,  …为类型前缀</td>\n</tr>\n<tr>\n<td>任意类型</td>\n<td>{*}</td>\n<td>任意类型</td>\n</tr>\n<tr>\n<td>可选任意类型</td>\n<td>@param {*=} name</td>\n<td>可选参数，类型不限</td>\n</tr>\n<tr>\n<td>可变任意类型</td>\n<td>@param {…*} args</td>\n<td>变长参数，类型不限</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-4-5-文件注释\"><a href=\"#2-4-5-文件注释\" class=\"headerlink\" title=\"2.4.5 文件注释\"></a>2.4.5 文件注释</h4><h5 id=\"强制-文件顶部必须包含文件注释，用-file-标识文件说明。\"><a href=\"#强制-文件顶部必须包含文件注释，用-file-标识文件说明。\" class=\"headerlink\" title=\"[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。\"></a>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @file Describe the file</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h5 id=\"建议-文件注释中可以用-author-标识开发者信息。\"><a href=\"#建议-文件注释中可以用-author-标识开发者信息。\" class=\"headerlink\" title=\"[建议] 文件注释中可以用 @author 标识开发者信息。\"></a>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5><p>解释：</p>\n<p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p>\n<p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p>\n<p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>\n<p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p>\n<p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @file Describe the file</div><div class=\"line\"> * @author author-name(mail-name@domain.com)</div><div class=\"line\"> *         author-name2(mail-name2@domain.com)</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-6-命名空间注释\"><a href=\"#2-4-6-命名空间注释\" class=\"headerlink\" title=\"2.4.6 命名空间注释\"></a>2.4.6 命名空间注释</h4><h5 id=\"建议-命名空间使用-namespace-标识。\"><a href=\"#建议-命名空间使用-namespace-标识。\" class=\"headerlink\" title=\"[建议] 命名空间使用 @namespace 标识。\"></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @namespace</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> util = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-7-类注释\"><a href=\"#2-4-7-类注释\" class=\"headerlink\" title=\"2.4.7 类注释\"></a>2.4.7 类注释</h4><h5 id=\"建议-使用-class-标记类或构造函数。\"><a href=\"#建议-使用-class-标记类或构造函数。\" class=\"headerlink\" title=\"[建议] 使用 @class 标记类或构造函数。\"></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5><p>解释：</p>\n<p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Developer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-extends-标记类的继承信息。\"><a href=\"#建议-使用-extends-标记类的继承信息。\" class=\"headerlink\" title=\"[建议] 使用 @extends 标记类的继承信息。\"></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fronteer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Fronteer, Developer);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。\"><a href=\"#强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。\" class=\"headerlink\" title=\"[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。\"></a>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5><p>解释：</p>\n<p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 类描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fronteer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.extend(</div><div class=\"line\">    Fronteer.prototype,</div><div class=\"line\">    <span class=\"comment\">/** @lends Fronteer.prototype */</span>&#123;</div><div class=\"line\">        <span class=\"attr\">_getLevel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。\"><a href=\"#强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。\" class=\"headerlink\" title=\"[强制] 类的属性或方法等成员信息使用 @public / @protected / @private 中的任意一个，指明可访问性。\"></a>[强制] 类的属性或方法等成员信息使用 <code>@public</code> / <code>@protected</code> / <code>@private</code> 中的任意一个，指明可访问性。</h5><p>解释：</p>\n<p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 类描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> Fronteer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 属性描述</div><div class=\"line\">     *</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>._level = <span class=\"string\">'T12'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;;</div><div class=\"line\">util.inherits(Fronteer, Developer);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 方法描述</div><div class=\"line\"> *</div><div class=\"line\"> * @private</div><div class=\"line\"> * @return &#123;string&#125; 返回值描述</div><div class=\"line\"> */</div><div class=\"line\">Fronteer.prototype._getLevel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-8-函数-方法注释\"><a href=\"#2-4-8-函数-方法注释\" class=\"headerlink\" title=\"2.4.8 函数/方法注释\"></a>2.4.8 函数/方法注释</h4><h5 id=\"强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\"><a href=\"#强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\" class=\"headerlink\" title=\"[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\"></a>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5><h5 id=\"强制-参数和返回值注释必须包含类型信息和说明。\"><a href=\"#强制-参数和返回值注释必须包含类型信息和说明。\" class=\"headerlink\" title=\"[强制] 参数和返回值注释必须包含类型信息和说明。\"></a>[强制] 参数和返回值注释必须包含类型信息和说明。</h5><h5 id=\"建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。\"><a href=\"#建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。\" class=\"headerlink\" title=\"[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。\"></a>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 函数描述</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;string&#125; p1 参数1的说明</div><div class=\"line\"> * @param &#123;string&#125; p2 参数2的说明，比较长</div><div class=\"line\"> *     那就换行了.</div><div class=\"line\"> * @param &#123;number=&#125; p3 参数3的说明（可选）</div><div class=\"line\"> * @return &#123;Object&#125; 返回值描述</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1, p2, p3</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p3 = p3 || <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">p1</span>: p1,</div><div class=\"line\">        <span class=\"attr\">p2</span>: p2,</div><div class=\"line\">        <span class=\"attr\">p3</span>: p3</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对-Object-中各项的描述，-必须使用-param-标识。\"><a href=\"#强制-对-Object-中各项的描述，-必须使用-param-标识。\" class=\"headerlink\" title=\"[强制] 对 Object 中各项的描述， 必须使用 @param 标识。\"></a>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 函数描述</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Object&#125; option 参数描述</div><div class=\"line\"> * @param &#123;string&#125; option.url option项描述</div><div class=\"line\"> * @param &#123;string=&#125; option.method option项描述，可选参数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。\"><a href=\"#建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。\" class=\"headerlink\" title=\"[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param、@return，仅用 @override 标识，否则仍应作完整注释。\"></a>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5><p>解释：</p>\n<p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p>\n<h4 id=\"2-4-9-事件注释\"><a href=\"#2-4-9-事件注释\" class=\"headerlink\" title=\"2.4.9 事件注释\"></a>2.4.9 事件注释</h4><h5 id=\"强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。\"><a href=\"#强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。\" class=\"headerlink\" title=\"[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。\"></a>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 值变更时触发</div><div class=\"line\"> *</div><div class=\"line\"> * @event</div><div class=\"line\"> * @param &#123;Object&#125; e e描述</div><div class=\"line\"> * @param &#123;string&#125; e.before before描述</div><div class=\"line\"> * @param &#123;string&#125; e.after after描述</div><div class=\"line\"> */</div><div class=\"line\">onchange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。\"><a href=\"#强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。\" class=\"headerlink\" title=\"[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。\"></a>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5><h5 id=\"建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。\"><a href=\"#建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。\" class=\"headerlink\" title=\"[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。\"></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 点击处理</div><div class=\"line\"> *</div><div class=\"line\"> * @fires Select#change</div><div class=\"line\"> * @private</div><div class=\"line\"> */</div><div class=\"line\">Select.prototype.clickHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 值变更时触发</div><div class=\"line\">     *</div><div class=\"line\">     * @event Select#change</div><div class=\"line\">     * @param &#123;Object&#125; e e描述</div><div class=\"line\">     * @param &#123;string&#125; e.before before描述</div><div class=\"line\">     * @param &#123;string&#125; e.after after描述</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>.fire(</div><div class=\"line\">        <span class=\"string\">'change'</span>,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">before</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">            <span class=\"attr\">after</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-10-常量注释\"><a href=\"#2-4-10-常量注释\" class=\"headerlink\" title=\"2.4.10 常量注释\"></a>2.4.10 常量注释</h4><h5 id=\"强制-常量必须使用-const-标记，并包含说明和类型信息。\"><a href=\"#强制-常量必须使用-const-标记，并包含说明和类型信息。\" class=\"headerlink\" title=\"[强制] 常量必须使用 @const 标记，并包含说明和类型信息。\"></a>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 常量说明</div><div class=\"line\"> *</div><div class=\"line\"> * @const</div><div class=\"line\"> * @type &#123;string&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> REQUEST_URL = <span class=\"string\">'myurl.do'</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-11-复杂类型注释\"><a href=\"#2-4-11-复杂类型注释\" class=\"headerlink\" title=\"2.4.11 复杂类型注释\"></a>2.4.11 复杂类型注释</h4><h5 id=\"建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。\"><a href=\"#建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。\" class=\"headerlink\" title=\"[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。\"></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 服务器</div><div class=\"line\"> *</div><div class=\"line\"> * @typedef &#123;Object&#125; namespaceA~Server</div><div class=\"line\"> * @property &#123;string&#125; host 主机</div><div class=\"line\"> * @property &#123;number&#125; port 端口</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 服务器列表</div><div class=\"line\"> *</div><div class=\"line\"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> servers = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">'1.2.3.4'</span>,</div><div class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8080</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">'1.2.3.5'</span>,</div><div class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8081</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-12-AMD-模块注释\"><a href=\"#2-4-12-AMD-模块注释\" class=\"headerlink\" title=\"2.4.12 AMD 模块注释\"></a>2.4.12 AMD 模块注释</h4><h5 id=\"强制-AMD-模块使用-module-或-exports-标识。\"><a href=\"#强制-AMD-模块使用-module-或-exports-标识。\" class=\"headerlink\" title=\"[强制] AMD 模块使用 @module 或 @exports 标识。\"></a>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5><p>解释：</p>\n<p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * foo description</div><div class=\"line\">         *</div><div class=\"line\">         * @exports Foo</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * baz description</div><div class=\"line\">         *</div><div class=\"line\">         * @return &#123;boolean&#125; return description</div><div class=\"line\">         */</div><div class=\"line\">        foo.baz = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> foo;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>也可以在 exports 变量前使用 @module 标识：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * module description.</div><div class=\"line\">         *</div><div class=\"line\">         * @module foo</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * bar description</div><div class=\"line\">         *</div><div class=\"line\">         */</div><div class=\"line\">        exports.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>如果直接使用 factory 的 exports 参数，还可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * module description.</div><div class=\"line\"> *</div><div class=\"line\"> * @module</div><div class=\"line\"> */</div><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * bar description</div><div class=\"line\">         *</div><div class=\"line\">         */</div><div class=\"line\">        exports.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。\"><a href=\"#强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。\" class=\"headerlink\" title=\"[强制] 对于已使用 @module 标识为 AMD模块 的引用，在 namepaths 中必须增加 module: 作前缀。\"></a>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5><p>解释：</p>\n<p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 点击处理</div><div class=\"line\"> *</div><div class=\"line\"> * @fires module:Select#change</div><div class=\"line\"> * @private</div><div class=\"line\"> */</div><div class=\"line\">Select.prototype.clickHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 值变更时触发</div><div class=\"line\">     *</div><div class=\"line\">     * @event module:Select#change</div><div class=\"line\">     * @param &#123;Object&#125; e e描述</div><div class=\"line\">     * @param &#123;string&#125; e.before before描述</div><div class=\"line\">     * @param &#123;string&#125; e.after after描述</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">this</span>.fire(</div><div class=\"line\">        <span class=\"string\">'change'</span>,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">before</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">            <span class=\"attr\">after</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于类定义的模块，可以使用-alias-标识构建函数。\"><a href=\"#建议-对于类定义的模块，可以使用-alias-标识构建函数。\" class=\"headerlink\" title=\"[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。\"></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A module representing a jacket.</div><div class=\"line\"> * @module jacket</div><div class=\"line\"> */</div><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * @class</div><div class=\"line\">         * @alias module:jacket</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">var</span> Jacket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Jacket;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-多模块定义时，可以使用-exports-标识各个模块。\"><a href=\"#建议-多模块定义时，可以使用-exports-标识各个模块。\" class=\"headerlink\" title=\"[建议] 多模块定义时，可以使用 @exports 标识各个模块。\"></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// one module</span></div><div class=\"line\">define(<span class=\"string\">'html/utils'</span>,</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Utility functions to ease working with DOM elements.</div><div class=\"line\">     * @exports html/utils</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// another module</span></div><div class=\"line\">define(<span class=\"string\">'tag'</span>,</div><div class=\"line\">    <span class=\"comment\">/** @exports tag */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于-exports-为-Object-的模块，可以使用-namespace标识。\"><a href=\"#建议-对于-exports-为-Object-的模块，可以使用-namespace标识。\" class=\"headerlink\" title=\"[建议] 对于 exports 为 Object 的模块，可以使用@namespace标识。\"></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5><p>解释：</p>\n<p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p>\n<h5 id=\"建议-对于-exports-为类名的模块，使用-class-和-exports-标识。\"><a href=\"#建议-对于-exports-为类名的模块，使用-class-和-exports-标识。\" class=\"headerlink\" title=\"[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。\"></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></div><div class=\"line\"><span class=\"comment\">// 另外需要注意类名需要使用 var 定义的方式。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Bar description</div><div class=\"line\"> *</div><div class=\"line\"> * @see foo</div><div class=\"line\"> * @exports  Bar</div><div class=\"line\"> * @class</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> Bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * baz description</div><div class=\"line\"> *</div><div class=\"line\"> * @return &#123;(string|Array)&#125; return description</div><div class=\"line\"> */</div><div class=\"line\">Bar.prototype.baz = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-13-细节注释\"><a href=\"#2-4-13-细节注释\" class=\"headerlink\" title=\"2.4.13 细节注释\"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>\n<h4 id=\"建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\"><a href=\"#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\" class=\"headerlink\" title=\"[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1, p2, opt_p3</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里对具体内部逻辑进行说明</span></div><div class=\"line\">    <span class=\"comment\">// 说明太长需要换行</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (...) &#123;</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\"><a href=\"#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\" class=\"headerlink\" title=\"[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\"></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p>\n<ol>\n<li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>\n<li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li>\n<li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>\n<li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>\n</ol>\n<h2 id=\"3-语言特性\"><a href=\"#3-语言特性\" class=\"headerlink\" title=\"3 语言特性\"></a>3 语言特性</h2><h3 id=\"3-1-变量\"><a href=\"#3-1-变量\" class=\"headerlink\" title=\"3.1 变量\"></a>3.1 变量</h3><h5 id=\"强制-变量在使用前必须通过-var-定义。\"><a href=\"#强制-变量在使用前必须通过-var-定义。\" class=\"headerlink\" title=\"[强制] 变量在使用前必须通过 var 定义。\"></a>[强制] 变量在使用前必须通过 <code>var</code> 定义。</h5><p>解释：</p>\n<p>不通过 var 定义变量将导致变量污染全局环境。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'MyName'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\">name = <span class=\"string\">'MyName'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-每个-var-只能声明一个变量。\"><a href=\"#强制-每个-var-只能声明一个变量。\" class=\"headerlink\" title=\"[强制] 每个 var 只能声明一个变量。\"></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p>\n<p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> hangModules = [];</div><div class=\"line\"><span class=\"keyword\">var</span> missModules = [];</div><div class=\"line\"><span class=\"keyword\">var</span> visited = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> hangModules = [],</div><div class=\"line\">    missModules = [],</div><div class=\"line\">    visited = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\"><a href=\"#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\" class=\"headerlink\" title=\"[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\"></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释： </p>\n<p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kv2List</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> item = &#123;</div><div class=\"line\">                <span class=\"attr\">k</span>: key,</div><div class=\"line\">                <span class=\"attr\">v</span>: source[key]</div><div class=\"line\">            &#125;;</div><div class=\"line\">            list.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kv2List</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">var</span> item;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">            item = &#123;</div><div class=\"line\">                <span class=\"attr\">k</span>: key,</div><div class=\"line\">                <span class=\"attr\">v</span>: source[key]</div><div class=\"line\">            &#125;;</div><div class=\"line\">            list.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-条件\"><a href=\"#3-2-条件\" class=\"headerlink\" title=\"3.2 条件\"></a>3.2 条件</h3><h5 id=\"强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。\"><a href=\"#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。\" class=\"headerlink\" title=\"[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。\"></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。</h5><p>解释：</p>\n<p>使用 === 可以避免等于判断中隐式的类型转换。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (age === <span class=\"number\">30</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (age == <span class=\"number\">30</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-尽可能使用简洁的表达式。\"><a href=\"#建议-尽可能使用简洁的表达式。\" class=\"headerlink\" title=\"[建议] 尽可能使用简洁的表达式。\"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串为空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!name) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串非空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组非空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (collection.length) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (collection.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 布尔不成立</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!notTrue) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (notTrue === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// null 或 undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (noValue == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (noValue === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> noValue === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-按执行频率排列分支的顺序。\"><a href=\"#建议-按执行频率排列分支的顺序。\" class=\"headerlink\" title=\"[建议] 按执行频率排列分支的顺序。\"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p>\n<p>按执行频率排列分支的顺序好处是：</p>\n<ol>\n<li>阅读的人容易找到最常见的情况，增加可读性。</li>\n<li>提高执行效率。</li>\n</ol>\n<h5 id=\"建议-对于相同变量或表达式的多值条件，用-switch-代替-if。\"><a href=\"#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。\" class=\"headerlink\" title=\"[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。\"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> variable) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</div><div class=\"line\">        <span class=\"comment\">// ......</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</div><div class=\"line\">        <span class=\"comment\">// ......</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> variable;</div><div class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">'number'</span> || type === <span class=\"string\">'boolean'</span> || type === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。\"><a href=\"#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。\" class=\"headerlink\" title=\"[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。\"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'unnamed'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'unnamed'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-3-循环\"><a href=\"#3-3-循环\" class=\"headerlink\" title=\"3.3 循环\"></a>3.3 循环</h3><h5 id=\"建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。\"><a href=\"#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。\" class=\"headerlink\" title=\"[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。\"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p>\n<p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    addListener(element, <span class=\"string\">'click'</span>, clicker);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    addListener(element, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对循环内多次使用的不变值，在循环外用变量缓存。\"><a href=\"#建议-对循环内多次使用的不变值，在循环外用变量缓存。\" class=\"headerlink\" title=\"[建议] 对循环内多次使用的不变值，在循环外用变量缓存。\"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> width = wrap.offsetWidth + <span class=\"string\">'px'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    element.style.width = width;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    element.style.width = wrap.offsetWidth + <span class=\"string\">'px'</span>;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对有序集合进行遍历时，缓存-length。\"><a href=\"#建议-对有序集合进行遍历时，缓存-length。\" class=\"headerlink\" title=\"[建议] 对有序集合进行遍历时，缓存 length。\"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p>\n<p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。\"><a href=\"#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。\" class=\"headerlink\" title=\"[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。\"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p>\n<p>逆序遍历可以节省变量，代码比较优化。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> len = elements.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[len];</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-类型\"><a href=\"#3-4-类型\" class=\"headerlink\" title=\"3.4 类型\"></a>3.4 类型</h3><h4 id=\"3-4-1-类型检测\"><a href=\"#3-4-1-类型检测\" class=\"headerlink\" title=\"3.4.1 类型检测\"></a>3.4.1 类型检测</h4><h5 id=\"建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。\"><a href=\"#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。\" class=\"headerlink\" title=\"[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。\"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// string</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'string'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// number</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'number'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// boolean</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'boolean'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Function</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'function'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'object'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RegExp</span></div><div class=\"line\">variable <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array</span></div><div class=\"line\">variable <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// null</span></div><div class=\"line\">variable === <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// null or undefined</span></div><div class=\"line\">variable == <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'undefined'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-4-2-类型转换\"><a href=\"#3-4-2-类型转换\" class=\"headerlink\" title=\"3.4.2 类型转换\"></a>3.4.2 类型转换</h4><h5 id=\"建议-转换成-string-时，使用-39-39-。\"><a href=\"#建议-转换成-string-时，使用-39-39-。\" class=\"headerlink\" title=\"[建议] 转换成 string 时，使用 + &#39;&#39;。\"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">num + <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(num);</div><div class=\"line\">num.toString();</div><div class=\"line\"><span class=\"built_in\">String</span>(num);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-转换成-number-时，通常使用-。\"><a href=\"#建议-转换成-number-时，通常使用-。\" class=\"headerlink\" title=\"[建议] 转换成 number 时，通常使用 +。\"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">+str;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(str);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。\"><a href=\"#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。\" class=\"headerlink\" title=\"[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。\"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"string\">'200px'</span>;</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(width, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-使用-parseInt-时，必须指定进制。\"><a href=\"#强制-使用-parseInt-时，必须指定进制。\" class=\"headerlink\" title=\"[强制] 使用 parseInt 时，必须指定进制。\"></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(str, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(str);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-转换成-boolean-时，使用-。\"><a href=\"#建议-转换成-boolean-时，使用-。\" class=\"headerlink\" title=\"[建议] 转换成 boolean 时，使用 !!。\"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\">!!num;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。\"><a href=\"#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。\" class=\"headerlink\" title=\"[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。\"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor / Math.round / Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">Math</span>.ceil(num);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(num, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-5-字符串\"><a href=\"#3-5-字符串\" class=\"headerlink\" title=\"3.5 字符串\"></a>3.5 字符串</h3><h5 id=\"强制-字符串开头和结束使用单引号-39-。\"><a href=\"#强制-字符串开头和结束使用单引号-39-。\" class=\"headerlink\" title=\"[强制] 字符串开头和结束使用单引号 &#39;。\"></a>[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p>\n<ol>\n<li>输入单引号不需要按住 shift，方便输入。</li>\n<li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'我是一个字符串'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"string\">'&lt;div class=\"cls\"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-数组-或-拼接字符串。\"><a href=\"#建议-使用-数组-或-拼接字符串。\" class=\"headerlink\" title=\"[建议] 使用 数组 或 + 拼接字符串。\"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p>\n<ol>\n<li>使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。</li>\n<li>在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。</li>\n<li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用数组拼接字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = [</div><div class=\"line\">    <span class=\"comment\">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></div><div class=\"line\">    <span class=\"string\">'&lt;ul&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;/ul&gt;'</span></div><div class=\"line\">].join(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 + 拼接字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">''</span> <span class=\"comment\">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></div><div class=\"line\">    + <span class=\"string\">'&lt;ul&gt;'</span>,</div><div class=\"line\">    +    <span class=\"string\">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class=\"line\">    +    <span class=\"string\">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class=\"line\">    + <span class=\"string\">'&lt;/ul&gt;'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。\"><a href=\"#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。\" class=\"headerlink\" title=\"[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。\"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p>\n<p>使用模板引擎有如下好处：</p>\n<ol>\n<li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li>\n<li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li>\n</ol>\n<ul>\n<li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li>\n<li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li>\n<li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li>\n<li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li>\n<li>hogon: 体积小，在现代浏览器下性能高。</li>\n<li>nunjucks: 体积较大，性能一般，模板复用性高。</li>\n</ul>\n<h3 id=\"3-6-对象\"><a href=\"#3-6-对象\" class=\"headerlink\" title=\"3.6 对象\"></a>3.6 对象</h3><h5 id=\"强制-使用对象字面量-创建新-Object。\"><a href=\"#强制-使用对象字面量-创建新-Object。\" class=\"headerlink\" title=\"[强制] 使用对象字面量 {} 创建新 Object。\"></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。\"><a href=\"#强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。\" class=\"headerlink\" title=\"[强制] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，则所有 属性 不得添加引号。\"></a>[强制] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，则所有 <code>属性</code> 不得添加引号。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。\"><a href=\"#强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。\" class=\"headerlink\" title=\"[强制] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 必须添加 &#39;。\"></a>[强制] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 必须添加 <code>&#39;</code>。</h5><p>解释：</p>\n<p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p>\n<p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">'more-info'</span>: <span class=\"string\">'...'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">'more-info'</span>: <span class=\"string\">'...'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-不允许修改和扩展任何原生对象和宿主对象的原型。\"><a href=\"#强制-不允许修改和扩展任何原生对象和宿主对象的原型。\" class=\"headerlink\" title=\"[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。\"></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下行为绝对禁止</span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-属性访问时，尽量使用-。\"><a href=\"#建议-属性访问时，尽量使用-。\" class=\"headerlink\" title=\"[建议] 属性访问时，尽量使用 .。\"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p>\n<p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p>\n<p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p>\n<p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">info.age;</div><div class=\"line\">info[<span class=\"string\">'more-info'</span>];</div></pre></td></tr></table></figure>\n<h5 id=\"建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。\"><a href=\"#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。\" class=\"headerlink\" title=\"[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。\"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newInfo = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> info) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (info.hasOwnProperty(key)) &#123;</div><div class=\"line\">        newInfo[key] = info[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-7-数组\"><a href=\"#3-7-数组\" class=\"headerlink\" title=\"3.7 数组\"></a>3.7 数组</h3><h5 id=\"强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。\"><a href=\"#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。\" class=\"headerlink\" title=\"[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。\"></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-遍历数组不使用-for-in。\"><a href=\"#强制-遍历数组不使用-for-in。\" class=\"headerlink\" title=\"[强制] 遍历数组不使用 for in。\"></a>[强制] 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p>\n<p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">arr.other = <span class=\"string\">'other things'</span>; <span class=\"comment\">// 这里仅作演示, 实际中应使用Object类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确的遍历方式</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误的遍历方式</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。\"><a href=\"#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。\" class=\"headerlink\" title=\"[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。\"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p>\n<p>自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：</p>\n<ol>\n<li>需要稳定的排序算法，达到严格一致的排序结果。</li>\n<li>数据特点鲜明，适合使用桶排。</li>\n</ol>\n<h5 id=\"建议-清空数组使用-length-0。\"><a href=\"#建议-清空数组使用-length-0。\" class=\"headerlink\" title=\"[建议] 清空数组使用 .length = 0。\"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id=\"3-8-函数\"><a href=\"#3-8-函数\" class=\"headerlink\" title=\"3.8 函数\"></a>3.8 函数</h3><h4 id=\"3-8-1-函数长度\"><a href=\"#3-8-1-函数长度\" class=\"headerlink\" title=\"3.8.1 函数长度\"></a>3.8.1 函数长度</h4><h5 id=\"建议-一个函数的长度控制在-50-行以内。\"><a href=\"#建议-一个函数的长度控制在-50-行以内。\" class=\"headerlink\" title=\"[建议] 一个函数的长度控制在 50 行以内。\"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p>\n<p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>\n<p>特定算法等不可分割的逻辑允许例外。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncViewStateOnUserAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x.checked) &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">true</span>;</div><div class=\"line\">        z.value = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!a.value) &#123;</div><div class=\"line\">        warning.innerText = <span class=\"string\">'Please enter it'</span>;</div><div class=\"line\">        submitButton.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        warning.innerText = <span class=\"string\">''</span>;</div><div class=\"line\">        submitButton.disabled = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncViewStateOnUserAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    syncXStateToView();</div><div class=\"line\">    checkAAvailability();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncXStateToView</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x.checked) &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">true</span>;</div><div class=\"line\">        z.value = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAAvailability</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!a.value) &#123;</div><div class=\"line\">        displayWarningForAMissing();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        clearWarnignForA();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-8-2-参数设计\"><a href=\"#3-8-2-参数设计\" class=\"headerlink\" title=\"3.8.2 参数设计\"></a>3.8.2 参数设计</h4><h5 id=\"建议-一个函数的参数控制在-6-个以内。\"><a href=\"#建议-一个函数的参数控制在-6-个以内。\" class=\"headerlink\" title=\"[建议] 一个函数的参数控制在 6 个以内。\"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p>\n<p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。</p>\n<p>某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p>\n<h5 id=\"建议-通过-options-参数传递非数据输入型参数。\"><a href=\"#建议-通过-options-参数传递非数据输入型参数。\" class=\"headerlink\" title=\"[建议] 通过 options 参数传递非数据输入型参数。\"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p>\n<p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。</p>\n<p>如下函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 移除某个元素</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Node&#125; element 需要移除的元素</div><div class=\"line\"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeElement</span>(<span class=\"params\">element, removeEventListeners</span>) </span>&#123;</div><div class=\"line\">    element.parent.removeChild(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (removeEventListeners) &#123;</div><div class=\"line\">        element.clearEventListeners();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以转换为下面的签名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 移除某个元素</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Node&#125; element 需要移除的元素</div><div class=\"line\"> * @param &#123;Object&#125; options 相关的逻辑配置</div><div class=\"line\"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeElement</span>(<span class=\"params\">element, options</span>) </span>&#123;</div><div class=\"line\">    element.parent.removeChild(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (options.removeEventListeners) &#123;</div><div class=\"line\">        element.clearEventListeners();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种模式有几个显著的优势：</p>\n<ul>\n<li>boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li>\n<li>当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。</li>\n<li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li>\n</ul>\n<h4 id=\"3-8-3-闭包\"><a href=\"#3-8-3-闭包\" class=\"headerlink\" title=\"3.8.3 闭包\"></a>3.8.3 闭包</h4><h5 id=\"建议-在适当的时候将闭包内大对象置为-null。\"><a href=\"#建议-在适当的时候将闭包内大对象置为-null。\" class=\"headerlink\" title=\"[建议] 在适当的时候将闭包内大对象置为 null。\"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p>\n<p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>\n<p>闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。</p>\n<p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>\n<ul>\n<li>嵌套的函数中是否有使用该变量。</li>\n<li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li>\n<li>是否使用了 with 表达式。</li>\n</ul>\n<p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>\n<p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p>\n<ol>\n<li>如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol>\n<li>如果是 V8 引擎，则退出全过程。</li>\n<li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>\n</ol>\n</li>\n<li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol>\n<li>如果 FunctionBody 中含有 <strong>直接调用eval</strong>，则退出全过程。</li>\n<li>否则得到所有的 Identifier。</li>\n<li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li>\n<li>对 binding 添加 notSwap 属性，其值为 true。</li>\n</ol>\n</li>\n<li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：<ol>\n<li>如果是V8引擎，删除该绑定。</li>\n<li>如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li>\n</ol>\n</li>\n</ol>\n<p>对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p>\n<p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>\n<h5 id=\"建议-使用-IIFE-避免-Lift-效应。\"><a href=\"#建议-使用-IIFE-避免-Lift-效应。\" class=\"headerlink\" title=\"[建议] 使用 IIFE 避免 Lift 效应。\"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p>\n<p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tasks = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    tasks[tasks.length] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Current cursor is at '</span> + i);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> len = tasks.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    tasks[len]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p>\n<p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tasks = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 注意有一层额外的闭包</span></div><div class=\"line\">    tasks[tasks.length] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Current cursor is at '</span> + i);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> len = tasks.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    tasks[len]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-8-4-空函数\"><a href=\"#3-8-4-空函数\" class=\"headerlink\" title=\"3.8.4 空函数\"></a>3.8.4 空函数</h4><h5 id=\"建议-空函数不使用-new-Function-的形式。\"><a href=\"#建议-空函数不使用-new-Function-的形式。\" class=\"headerlink\" title=\"[建议] 空函数不使用 new Function() 的形式。\"></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> emptyFunction = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\"><a href=\"#建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\" class=\"headerlink\" title=\"[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\"></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EMPTY_FUNCTION = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</div><div class=\"line\">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</div><div class=\"line\">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</div></pre></td></tr></table></figure>\n<h3 id=\"3-9-面向对象\"><a href=\"#3-9-面向对象\" class=\"headerlink\" title=\"3.9 面向对象\"></a>3.9 面向对象</h3><h5 id=\"强制-类的继承方案，实现时需要修正-constructor。\"><a href=\"#强制-类的继承方案，实现时需要修正-constructor。\" class=\"headerlink\" title=\"[强制] 类的继承方案，实现时需要修正 constructor。\"></a>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5><p>解释：</p>\n<p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 构建类之间的继承关系</div><div class=\"line\"> * </div><div class=\"line\"> * @param &#123;Function&#125; subClass 子类函数</div><div class=\"line\"> * @param &#123;Function&#125; superClass 父类函数</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div><div class=\"line\">    F.prototype = superClass.prototype;</div><div class=\"line\">    subClass.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    subClass.prototype.constructor = subClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-声明类时，保证-constructor-的正确性。\"><a href=\"#建议-声明类时，保证-constructor-的正确性。\" class=\"headerlink\" title=\"[建议] 声明类时，保证 constructor 的正确性。\"></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 直接prototype等于对象时，需要修正constructor</span></div><div class=\"line\">Animal.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Animal,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'animal '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' jump'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这种方式扩展prototype则无需理会constructor</span></div><div class=\"line\">Animal.prototype.jump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'animal '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' jump'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-属性在构造函数中声明，方法在原型中声明。\"><a href=\"#建议-属性在构造函数中声明，方法在原型中声明。\" class=\"headerlink\" title=\"[建议] 属性在构造函数中声明，方法在原型中声明。\"></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5><p>解释： </p>\n<p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">value, engine</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TextNode.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-自定义事件的-事件名-必须全小写。\"><a href=\"#强制-自定义事件的-事件名-必须全小写。\" class=\"headerlink\" title=\"[强制] 自定义事件的 事件名 必须全小写。\"></a>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5><p>解释：</p>\n<p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p>\n<h5 id=\"强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。\"><a href=\"#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。\" class=\"headerlink\" title=\"[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。\"></a>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5><p>解释：</p>\n<p>一个事件对象的好处有：</p>\n<ol>\n<li>顺序无关，避免事件监听者需要记忆参数顺序。</li>\n<li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>\n<li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li>\n</ol>\n<h5 id=\"建议-设计自定义事件时，应考虑禁止默认行为。\"><a href=\"#建议-设计自定义事件时，应考虑禁止默认行为。\" class=\"headerlink\" title=\"[建议] 设计自定义事件时，应考虑禁止默认行为。\"></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5><p>解释：</p>\n<p>常见禁止默认行为的方式有两种：</p>\n<ol>\n<li>事件监听函数中 return false。</li>\n<li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li>\n</ol>\n<h3 id=\"3-10-动态特性\"><a href=\"#3-10-动态特性\" class=\"headerlink\" title=\"3.10 动态特性\"></a>3.10 动态特性</h3><h4 id=\"3-10-1-eval\"><a href=\"#3-10-1-eval\" class=\"headerlink\" title=\"3.10.1 eval\"></a>3.10.1 eval</h4><h5 id=\"强制-避免使用直接-eval-函数。\"><a href=\"#强制-避免使用直接-eval-函数。\" class=\"headerlink\" title=\"[强制] 避免使用直接 eval 函数。\"></a>[强制] 避免使用直接 <code>eval</code> 函数。</h5><p>解释：</p>\n<p>直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。</p>\n<p>如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p>\n<h5 id=\"建议-尽量避免使用-eval-函数。\"><a href=\"#建议-尽量避免使用-eval-函数。\" class=\"headerlink\" title=\"[建议] 尽量避免使用 eval 函数。\"></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5><h4 id=\"3-10-2-动态执行代码\"><a href=\"#3-10-2-动态执行代码\" class=\"headerlink\" title=\"3.10.2 动态执行代码\"></a>3.10.2 动态执行代码</h4><h5 id=\"建议-使用-new-Function-执行动态代码。\"><a href=\"#建议-使用-new-Function-执行动态代码。\" class=\"headerlink\" title=\"[建议] 使用 new Function 执行动态代码。\"></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5><p>解释：</p>\n<p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'return x + y;'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> result = handler($(<span class=\"string\">'#x'</span>).val(), $(<span class=\"string\">'#y'</span>).val());</div></pre></td></tr></table></figure>\n<h4 id=\"3-10-3-with\"><a href=\"#3-10-3-with\" class=\"headerlink\" title=\"3.10.3 with\"></a>3.10.3 with</h4><h5 id=\"建议-尽量不要使用-with。\"><a href=\"#建议-尽量不要使用-with。\" class=\"headerlink\" title=\"[建议] 尽量不要使用 with。\"></a>[建议] 尽量不要使用 <code>with</code>。</h5><p>解释：</p>\n<p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。</p>\n<h4 id=\"3-10-4-delete\"><a href=\"#3-10-4-delete\" class=\"headerlink\" title=\"3.10.4 delete\"></a>3.10.4 delete</h4><h5 id=\"建议-减少-delete-的使用。\"><a href=\"#建议-减少-delete-的使用。\" class=\"headerlink\" title=\"[建议] 减少 delete 的使用。\"></a>[建议] 减少 <code>delete</code> 的使用。</h5><p>解释：</p>\n<p>如果没有特别的需求，减少或避免使用<code>delete</code>。<code>delete</code>的使用会破坏部分 JavaScript 引擎的性能优化。</p>\n<h5 id=\"建议-处理-delete-可能产生的异常。\"><a href=\"#建议-处理-delete-可能产生的异常。\" class=\"headerlink\" title=\"[建议] 处理 delete 可能产生的异常。\"></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5><p>解释：</p>\n<p>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。</p>\n<p>在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> o.x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (deleteError) &#123;</div><div class=\"line\">    o.x = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-10-5-对象属性\"><a href=\"#3-10-5-对象属性\" class=\"headerlink\" title=\"3.10.5 对象属性\"></a>3.10.5 对象属性</h4><h5 id=\"建议-避免修改外部传入的对象。\"><a href=\"#建议-避免修改外部传入的对象。\" class=\"headerlink\" title=\"[建议] 避免修改外部传入的对象。\"></a>[建议] 避免修改外部传入的对象。</h5><p>解释：</p>\n<p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p>\n<p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p>\n<p>下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">datasource</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.datasource = datasource;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Tree.prototype.selectNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 从datasource中找出节点对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.findNode(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</div><div class=\"line\">        node.selected = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flushView();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">datasource</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.datasource = datasource;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeIndex = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Tree.prototype.selectNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 从datasource中找出节点对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.findNode(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.selectedNodeIndex[id] = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flushView();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p>\n<h5 id=\"建议-具备强类型的设计。\"><a href=\"#建议-具备强类型的设计。\" class=\"headerlink\" title=\"[建议] 具备强类型的设计。\"></a>[建议] 具备强类型的设计。</h5><p>解释：</p>\n<ul>\n<li>如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。</li>\n<li>从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li>\n</ul>\n<h2 id=\"4-浏览器环境\"><a href=\"#4-浏览器环境\" class=\"headerlink\" title=\"4 浏览器环境\"></a>4 浏览器环境</h2><h3 id=\"4-1-模块化\"><a href=\"#4-1-模块化\" class=\"headerlink\" title=\"4.1 模块化\"></a>4.1 模块化</h3><h4 id=\"4-1-1-AMD\"><a href=\"#4-1-1-AMD\" class=\"headerlink\" title=\"4.1.1 AMD\"></a>4.1.1 AMD</h4><h5 id=\"强制-使用-AMD-作为模块定义。\"><a href=\"#强制-使用-AMD-作为模块定义。\" class=\"headerlink\" title=\"[强制] 使用 AMD 作为模块定义。\"></a>[强制] 使用 <code>AMD</code> 作为模块定义。</h5><p>解释：</p>\n<p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>\n<p>目前，比较成熟的 AMD Loader 有：</p>\n<ul>\n<li>官方实现的 <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">requirejs</a></li>\n<li>百度自己实现的 <a href=\"https://github.com/ecomfe/esl\" target=\"_blank\" rel=\"external\">esl</a></li>\n</ul>\n<h5 id=\"强制-模块-id-必须符合标准。\"><a href=\"#强制-模块-id-必须符合标准。\" class=\"headerlink\" title=\"[强制] 模块 id 必须符合标准。\"></a>[强制] 模块 <code>id</code> 必须符合标准。</h5><p>解释：</p>\n<p>模块 id 必须符合以下约束条件：</p>\n<ol>\n<li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li>\n<li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>\n<li>不应该有 .js 后缀。</li>\n<li>跟文件的路径保持一致。</li>\n</ol>\n<h4 id=\"4-1-2-define\"><a href=\"#4-1-2-define\" class=\"headerlink\" title=\"4.1.2 define\"></a>4.1.2 define</h4><h5 id=\"建议-定义模块时不要指明-id-和-dependencies。\"><a href=\"#建议-定义模块时不要指明-id-和-dependencies。\" class=\"headerlink\" title=\"[建议] 定义模块时不要指明 id 和 dependencies。\"></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5><p>解释：</p>\n<p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p>\n<p>所以，推荐使用 define(factory) 的形式进行模块定义。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-return-来返回模块定义。\"><a href=\"#建议-使用-return-来返回模块定义。\" class=\"headerlink\" title=\"[建议] 使用 return 来返回模块定义。\"></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5><p>解释：</p>\n<p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-require\"><a href=\"#4-1-3-require\" class=\"headerlink\" title=\"4.1.3 require\"></a>4.1.3 require</h4><h5 id=\"强制-全局运行环境中，require-必须以-async-require-形式调用。\"><a href=\"#强制-全局运行环境中，require-必须以-async-require-形式调用。\" class=\"headerlink\" title=\"[强制] 全局运行环境中，require 必须以 async require 形式调用。\"></a>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5><p>解释：</p>\n<p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'foo'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">foo</span>) </span>&#123;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-模块定义中只允许使用-local-require，不允许使用-global-require。\"><a href=\"#强制-模块定义中只允许使用-local-require，不允许使用-global-require。\" class=\"headerlink\" title=\"[强制] 模块定义中只允许使用 local require，不允许使用 global require。\"></a>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5><p>解释：</p>\n<ol>\n<li>在模块定义中使用 global require，对封装性是一种破坏。</li>\n<li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。</li>\n</ol>\n<h5 id=\"强制-Package在实现时，内部模块的-require-必须使用-relative-id。\"><a href=\"#强制-Package在实现时，内部模块的-require-必须使用-relative-id。\" class=\"headerlink\" title=\"[强制] Package在实现时，内部模块的 require 必须使用 relative id。\"></a>[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5><p>解释：</p>\n<p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'./util'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不会被调用的依赖模块，在-factory-开始处统一-require。\"><a href=\"#建议-不会被调用的依赖模块，在-factory-开始处统一-require。\" class=\"headerlink\" title=\"[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。\"></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5><p>解释：</p>\n<p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'css!foo.css'</span>);</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'tpl!bar.tpl.html'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"4-2-DOM\"><a href=\"#4-2-DOM\" class=\"headerlink\" title=\"4.2 DOM\"></a>4.2 DOM</h3><h4 id=\"4-2-1-元素获取\"><a href=\"#4-2-1-元素获取\" class=\"headerlink\" title=\"4.2.1 元素获取\"></a>4.2.1 元素获取</h4><h5 id=\"建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。\"><a href=\"#建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。\" class=\"headerlink\" title=\"[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用document.all。\"></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5><h5 id=\"建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。\"><a href=\"#建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。\" class=\"headerlink\" title=\"[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。\"></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5><h5 id=\"建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\"><a href=\"#建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\" class=\"headerlink\" title=\"[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\"></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5><p>解释：</p>\n<p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'*'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示为 DIV</span></div><div class=\"line\">alert(elements[<span class=\"number\">0</span>].tagName);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> div = elements[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.insertBefore(p, div);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示为 P</span></div><div class=\"line\">alert(elements[<span class=\"number\">0</span>].tagName);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\"><a href=\"#建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\" class=\"headerlink\" title=\"[建议] 获取元素的直接子元素时使用 children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\"></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5><h4 id=\"4-2-2-样式获取\"><a href=\"#4-2-2-样式获取\" class=\"headerlink\" title=\"4.2.2 样式获取\"></a>4.2.2 样式获取</h4><h5 id=\"建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。\"><a href=\"#建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。\" class=\"headerlink\" title=\"[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle。\"></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5><p>解释：</p>\n<p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p>\n<h4 id=\"4-2-3-样式设置\"><a href=\"#4-2-3-样式设置\" class=\"headerlink\" title=\"4.2.3 样式设置\"></a>4.2.3 样式设置</h4><h5 id=\"建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。\"><a href=\"#建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。\" class=\"headerlink\" title=\"[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。\"></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5><h5 id=\"强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。\"><a href=\"#强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。\" class=\"headerlink\" title=\"[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。\"></a>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5><p>解释：</p>\n<p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p>\n<h4 id=\"4-2-4-DOM-操作\"><a href=\"#4-2-4-DOM-操作\" class=\"headerlink\" title=\"4.2.4 DOM 操作\"></a>4.2.4 DOM 操作</h4><h5 id=\"建议-操作-DOM-时，尽量减少页面-reflow。\"><a href=\"#建议-操作-DOM-时，尽量减少页面-reflow。\" class=\"headerlink\" title=\"[建议] 操作 DOM 时，尽量减少页面 reflow。\"></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5><p>解释：</p>\n<p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p>\n<ul>\n<li>DOM元素的添加、修改（内容）、删除。</li>\n<li>应用新的样式或者修改任何影响元素布局的属性。</li>\n<li>Resize浏览器窗口、滚动页面。</li>\n<li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li>\n</ul>\n<h5 id=\"建议-尽量减少-DOM-操作。\"><a href=\"#建议-尽量减少-DOM-操作。\" class=\"headerlink\" title=\"[建议] 尽量减少 DOM 操作。\"></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5><p>解释：</p>\n<p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>\n<ol>\n<li>在循环体中 createElement 并 append 到父元素中。</li>\n<li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li>\n</ol>\n<p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p>\n<h4 id=\"4-2-5-DOM-事件\"><a href=\"#4-2-5-DOM-事件\" class=\"headerlink\" title=\"4.2.5 DOM 事件\"></a>4.2.5 DOM 事件</h4><h5 id=\"建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。\"><a href=\"#建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。\" class=\"headerlink\" title=\"[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。\"></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5><p>解释：</p>\n<p>expando 属性绑定事件容易导致互相覆盖。</p>\n<h5 id=\"建议-使用-addEventListener-时第三个参数使用-false。\"><a href=\"#建议-使用-addEventListener-时第三个参数使用-false。\" class=\"headerlink\" title=\"[建议] 使用 addEventListener 时第三个参数使用 false。\"></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5><p>解释：</p>\n<p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p>\n<h5 id=\"建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\"><a href=\"#建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\" class=\"headerlink\" title=\"[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\"></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>","excerpt":"","more":"<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时<span class=\"comment\">(如TypeScript等)</span>时，适用的部分也应尽量遵循本文档的约定</div></pre></td></tr></table></figure>\n<p>#</p>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>JavaScript在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。</p>\n<p>虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。</p>\n<h2 id=\"2-代码风格\"><a href=\"#2-代码风格\" class=\"headerlink\" title=\"2 代码风格\"></a>2 代码风格</h2><h3 id=\"2-1-文件\"><a href=\"#2-1-文件\" class=\"headerlink\" title=\"2.1 文件\"></a>2.1 文件</h3><h5 id=\"建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。\"><a href=\"#建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。\" class=\"headerlink\" title=\"[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。\"></a>[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p>\n<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>\n<h5 id=\"建议-在文件结尾处，保留一个空行。\"><a href=\"#建议-在文件结尾处，保留一个空行。\" class=\"headerlink\" title=\"[建议] 在文件结尾处，保留一个空行。\"></a>[建议] 在文件结尾处，保留一个空行。</h5><h3 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h3><h4 id=\"2-2-1-缩进\"><a href=\"#2-2-1-缩进\" class=\"headerlink\" title=\"2.2.1 缩进\"></a>2.2.1 缩进</h4><h5 id=\"强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。\"><a href=\"#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。\" class=\"headerlink\" title=\"[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。\"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id=\"强制-switch-下的-case-和-default-必须增加一个缩进层级。\"><a href=\"#强制-switch-下的-case-和-default-必须增加一个缩进层级。\" class=\"headerlink\" title=\"[强制] switch 下的 case 和 default 必须增加一个缩进层级。\"></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (variable) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"comment\">// do...</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (variable) &#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"comment\">// do...</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-空格\"><a href=\"#2-2-2-空格\" class=\"headerlink\" title=\"2.2.2 空格\"></a>2.2.2 空格</h4><h5 id=\"强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\"><a href=\"#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\" class=\"headerlink\" title=\"[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。\"></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = !arr.length;</div><div class=\"line\">a++;</div><div class=\"line\">a = b + c;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-用作代码块起始的左花括号-前必须有一个空格。\"><a href=\"#强制-用作代码块起始的左花括号-前必须有一个空格。\" class=\"headerlink\" title=\"[强制] 用作代码块起始的左花括号 { 前必须有一个空格。\"></a>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。\"><a href=\"#强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。\" class=\"headerlink\" title=\"[强制] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。\"></a>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span>(condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span>(condition) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。\"><a href=\"#强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。\" class=\"headerlink\" title=\"[强制] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。\"></a>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span> : <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span> :<span class=\"number\">3</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。\"><a href=\"#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。\" class=\"headerlink\" title=\"[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。\"></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">funcName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">funcName ();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-和-前不允许有空格。\"><a href=\"#强制-和-前不允许有空格。\" class=\"headerlink\" title=\"[强制] , 和 ; 前不允许有空格。\"></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">callFunc(a, b);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\">callFunc(a , b) ;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。\"><a href=\"#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。\" class=\"headerlink\" title=\"[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。\"></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"></div><div class=\"line\">callFunc(param1, param2, param3);</div><div class=\"line\"></div><div class=\"line\">save(<span class=\"keyword\">this</span>.list[<span class=\"keyword\">this</span>.indexes[i]]);</div><div class=\"line\"></div><div class=\"line\">needIncream &amp;&amp; (variable += increament);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (num &gt; list.length) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"></div><div class=\"line\">callFunc( param1, param2, param3 );</div><div class=\"line\"></div><div class=\"line\">save( <span class=\"keyword\">this</span>.list[ <span class=\"keyword\">this</span>.indexes[ i ] ] );</div><div class=\"line\"></div><div class=\"line\">needIncreament &amp;&amp; ( variable += increament );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ( num &gt; list.length ) &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> ( len-- ) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。\"><a href=\"#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。\" class=\"headerlink\" title=\"[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。\"></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p>\n<p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [ ];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ];</div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'obj'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> obj3 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'obj'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span>&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-行尾不得有多余的空格。\"><a href=\"#强制-行尾不得有多余的空格。\" class=\"headerlink\" title=\"[强制] 行尾不得有多余的空格。\"></a>[强制] 行尾不得有多余的空格。</h5><h4 id=\"2-2-3-换行\"><a href=\"#2-2-3-换行\" class=\"headerlink\" title=\"2.2.3 换行\"></a>2.2.3 换行</h4><h5 id=\"强制-每个独立语句结束后必须换行。\"><a href=\"#强制-每个独立语句结束后必须换行。\" class=\"headerlink\" title=\"[强制] 每个独立语句结束后必须换行。\"></a>[强制] 每个独立语句结束后必须换行。</h5><h5 id=\"强制-每行不得超过-120-个字符。\"><a href=\"#强制-每行不得超过-120-个字符。\" class=\"headerlink\" title=\"[强制] 每行不得超过 120 个字符。\"></a>[强制] 每行不得超过 <code>120</code> 个字符。</h5><p>解释：</p>\n<p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p>\n<h5 id=\"强制-运算符处换行时，运算符必须在新行的行首。\"><a href=\"#强制-运算符处换行时，运算符必须在新行的行首。\" class=\"headerlink\" title=\"[强制] 运算符处换行时，运算符必须在新行的行首。\"></a>[强制] 运算符处换行时，运算符必须在新行的行首。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated()</div><div class=\"line\">    &amp;&amp; user.isInRole(<span class=\"string\">'admin'</span>)</div><div class=\"line\">    &amp;&amp; user.hasAuthority(<span class=\"string\">'add-admin'</span>)</div><div class=\"line\">    || user.hasAuthority(<span class=\"string\">'delete-admin'</span>)</div><div class=\"line\">) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = number1 + number2 + number3</div><div class=\"line\">    + number4 + number5;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated() &amp;&amp;</div><div class=\"line\">    user.isInRole(<span class=\"string\">'admin'</span>) &amp;&amp;</div><div class=\"line\">    user.hasAuthority(<span class=\"string\">'add-admin'</span>) ||</div><div class=\"line\">    user.hasAuthority(<span class=\"string\">'delete-admin'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = number1 + number2 + number3 +</div><div class=\"line\">    number4 + number5;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。\"><a href=\"#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在-或-前换行。\" class=\"headerlink\" title=\"[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 , 或 ; 前换行。\"></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument,</div><div class=\"line\">    anotherVeryLongArgument,</div><div class=\"line\">    callback</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span></div><div class=\"line\">    , <span class=\"attr\">b</span>: <span class=\"number\">2</span></div><div class=\"line\">    , <span class=\"attr\">c</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument</div><div class=\"line\">    , anotherVeryLongArgument</div><div class=\"line\">    , callback</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。\"><a href=\"#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。\" class=\"headerlink\" title=\"[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。\"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setStyle</span>(<span class=\"params\">element, property, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (element == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    element.style[property] = value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。\"><a href=\"#建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。\" class=\"headerlink\" title=\"[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。\"></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></div><div class=\"line\"><span class=\"comment\">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (user.isAuthenticated()</div><div class=\"line\">    &amp;&amp; user.isInRole(<span class=\"string\">'admin'</span>)</div><div class=\"line\">    &amp;&amp; user.hasAuthority(<span class=\"string\">'add-admin'</span>)</div><div class=\"line\">    || user.hasAuthority(<span class=\"string\">'delete-admin'</span>)</div><div class=\"line\">) &#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></div><div class=\"line\"><span class=\"comment\">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></div><div class=\"line\"><span class=\"comment\">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"string\">''</span> <span class=\"comment\">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span></div><div class=\"line\">    + <span class=\"string\">'&lt;article&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></div><div class=\"line\">    +     <span class=\"string\">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></div><div class=\"line\">    + <span class=\"string\">'&lt;/article&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = [</div><div class=\"line\">    <span class=\"string\">'&lt;article&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;/article&gt;'</span></div><div class=\"line\">];</div><div class=\"line\">html = html.join(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></div><div class=\"line\"><span class=\"comment\">// 所有参数必须增加一个缩进。</span></div><div class=\"line\">foo(</div><div class=\"line\">    aVeryVeryLongArgument,</div><div class=\"line\">    anotherVeryLongArgument,</div><div class=\"line\">    callback</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以按逻辑对参数进行组合。</span></div><div class=\"line\"><span class=\"comment\">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span></div><div class=\"line\">baidu.format(</div><div class=\"line\">    dateFormatTemplate,</div><div class=\"line\">    year, month, date, hour, minute, second</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></div><div class=\"line\"><span class=\"comment\">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span></div><div class=\"line\">setTimeout(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"number\">200</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">order.data.read(</div><div class=\"line\">    <span class=\"string\">'id='</span> + me.model.id, </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        me.attchToModel(data.result);</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;, </div><div class=\"line\">    <span class=\"number\">300</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 链式调用较长时采用缩进进行调整。</span></div><div class=\"line\">$(<span class=\"string\">'#items'</span>)</div><div class=\"line\">    .find(<span class=\"string\">'.selected'</span>)</div><div class=\"line\">    .highlight()</div><div class=\"line\">    .end();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></div><div class=\"line\"><span class=\"keyword\">var</span> result = thisIsAVeryVeryLongCondition</div><div class=\"line\">    ? resultA : resultB;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> result = condition</div><div class=\"line\">    ? thisIsAVeryVeryLongResult</div><div class=\"line\">    : resultB;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 数组和对象初始化的混用，严格按照每个对象的 &#123; 和结束 &#125; 在独立一行的风格书写。</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。\"><a href=\"#建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。\" class=\"headerlink\" title=\"[建议] 对于 if...else...、try...catch...finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。\"></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">    <span class=\"comment\">// some statements;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-4-语句\"><a href=\"#2-2-4-语句\" class=\"headerlink\" title=\"2.2.4 语句\"></a>2.2.4 语句</h4><h5 id=\"强制-不得省略语句结束的分号。\"><a href=\"#强制-不得省略语句结束的分号。\" class=\"headerlink\" title=\"[强制] 不得省略语句结束的分号。\"></a>[强制] 不得省略语句结束的分号。</h5><h5 id=\"强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。\"><a href=\"#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。\" class=\"headerlink\" title=\"[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。\"></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</div><div class=\"line\">    callFunc();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (condition) callFunc();</div><div class=\"line\"><span class=\"keyword\">if</span> (condition)</div><div class=\"line\">    callFunc();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数定义结束不允许添加分号。\"><a href=\"#强制-函数定义结束不允许添加分号。\" class=\"headerlink\" title=\"[强制] 函数定义结束不允许添加分号。\"></a>[强制] 函数定义结束不允许添加分号。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是函数表达式，分号是不允许省略的。</span></div><div class=\"line\"><span class=\"keyword\">var</span> funcName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。\"><a href=\"#强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。\" class=\"headerlink\" title=\"[强制] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 (。\"></a>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5><p>解释：</p>\n<p>IIFE = Immediately-Invoked Function Expression.</p>\n<p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> task = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// Code</span></div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> task = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Code</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-3-命名\"><a href=\"#2-3-命名\" class=\"headerlink\" title=\"2.3 命名\"></a>2.3 命名</h3><h5 id=\"强制-变量-使用-Camel命名法。\"><a href=\"#强制-变量-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 变量 使用 Camel命名法。\"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loadingModules = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。\"><a href=\"#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。\" class=\"headerlink\" title=\"[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。\"></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HTML_ENTITY = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数-使用-Camel命名法。\"><a href=\"#强制-函数-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 函数 使用 Camel命名法。\"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringFormat</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-函数的-参数-使用-Camel命名法。\"><a href=\"#强制-函数的-参数-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 函数的 参数 使用 Camel命名法。\"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hear</span>(<span class=\"params\">theBells</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类-使用-Pascal命名法。\"><a href=\"#强制-类-使用-Pascal命名法。\" class=\"headerlink\" title=\"[强制] 类 使用 Pascal命名法。\"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类的-方法-属性-使用-Camel命名法。\"><a href=\"#强制-类的-方法-属性-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 类的 方法 / 属性 使用 Camel命名法。\"></a>[强制] 类的 <code>方法 / 属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">value, engine</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TextNode.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。\"><a href=\"#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。\" class=\"headerlink\" title=\"[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。\"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> TargetState = &#123;</div><div class=\"line\">    <span class=\"attr\">READING</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">READED</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">APPLIED</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">READY</span>: <span class=\"number\">4</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-命名空间-使用-Camel命名法。\"><a href=\"#强制-命名空间-使用-Camel命名法。\" class=\"headerlink\" title=\"[强制] 命名空间 使用 Camel命名法。\"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">equipments.heavyWeapons = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\"><a href=\"#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\" class=\"headerlink\" title=\"[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。\"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">XMLParser</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertHTML</span>(<span class=\"params\">element, html</span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> httpRequest = <span class=\"keyword\">new</span> HTTPRequest();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类名-使用-名词。\"><a href=\"#强制-类名-使用-名词。\" class=\"headerlink\" title=\"[强制] 类名 使用 名词。\"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Engine</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-函数名-使用-动宾短语。\"><a href=\"#建议-函数名-使用-动宾短语。\" class=\"headerlink\" title=\"[建议] 函数名 使用 动宾短语。\"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-boolean-类型的变量使用-is-或-has-开头。\"><a href=\"#建议-boolean-类型的变量使用-is-或-has-开头。\" class=\"headerlink\" title=\"[建议] boolean 类型的变量使用 is 或 has 开头。\"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> isReady = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> hasMoreCommands = <span class=\"literal\">false</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-Promise对象-用-动宾短语的进行时-表达。\"><a href=\"#建议-Promise对象-用-动宾短语的进行时-表达。\" class=\"headerlink\" title=\"[建议] Promise对象 用 动宾短语的进行时 表达。\"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loadingData = ajax.get(<span class=\"string\">'url'</span>);</div><div class=\"line\">loadingData.then(callback);</div></pre></td></tr></table></figure>\n<h3 id=\"2-4-注释\"><a href=\"#2-4-注释\" class=\"headerlink\" title=\"2.4 注释\"></a>2.4 注释</h3><h4 id=\"2-4-1-单行注释\"><a href=\"#2-4-1-单行注释\" class=\"headerlink\" title=\"2.4.1 单行注释\"></a>2.4.1 单行注释</h4><h5 id=\"强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。\"><a href=\"#强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。\" class=\"headerlink\" title=\"[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。\"></a>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5><h4 id=\"2-4-2-多行注释\"><a href=\"#2-4-2-多行注释\" class=\"headerlink\" title=\"2.4.2 多行注释\"></a>2.4.2 多行注释</h4><h5 id=\"建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。\"><a href=\"#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。\" class=\"headerlink\" title=\"[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。\"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id=\"2-4-3-文档化注释\"><a href=\"#2-4-3-文档化注释\" class=\"headerlink\" title=\"2.4.3 文档化注释\"></a>2.4.3 文档化注释</h4><h5 id=\"强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。\"><a href=\"#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。\" class=\"headerlink\" title=\"[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。\"></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p>\n<ol>\n<li>文件</li>\n<li>namespace</li>\n<li>类</li>\n<li>函数或方法</li>\n<li>类属性</li>\n<li>事件</li>\n<li>全局变量</li>\n<li>常量</li>\n<li>AMD 模块</li>\n</ol>\n<h5 id=\"强制-文档注释前必须空一行。\"><a href=\"#强制-文档注释前必须空一行。\" class=\"headerlink\" title=\"[强制] 文档注释前必须空一行。\"></a>[强制] 文档注释前必须空一行。</h5><h5 id=\"建议-自文档化的文档说明-what，而不是-how。\"><a href=\"#建议-自文档化的文档说明-what，而不是-how。\" class=\"headerlink\" title=\"[建议] 自文档化的文档说明 what，而不是 how。\"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id=\"2-4-4-类型定义\"><a href=\"#2-4-4-类型定义\" class=\"headerlink\" title=\"2.4.4 类型定义\"></a>2.4.4 类型定义</h4><h5 id=\"强制-类型定义都是以-开始-以-结束。\"><a href=\"#强制-类型定义都是以-开始-以-结束。\" class=\"headerlink\" title=\"[强制] 类型定义都是以{开始, 以}结束。\"></a>[强制] 类型定义都是以<code>{</code>开始, 以<code>}</code>结束。</h5><p>解释：</p>\n<p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>\n<p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>\n<h5 id=\"强制-对于基本类型-string-number-boolean-，首字母必须小写。\"><a href=\"#强制-对于基本类型-string-number-boolean-，首字母必须小写。\" class=\"headerlink\" title=\"[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。\"></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table>\n<thead>\n<tr>\n<th>类型定义</th>\n<th>语法示例</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>{string}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>{number}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>{boolean}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>{Object}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Function</td>\n<td>{Function}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>RegExp</td>\n<td>{RegExp}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>{Array}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>{Date}</td>\n<td>–</td>\n</tr>\n<tr>\n<td>单一类型集合</td>\n<td>{Array.&lt;string&gt;}</td>\n<td>string 类型的数组</td>\n</tr>\n<tr>\n<td>多类型</td>\n<td>{(number｜boolean)}</td>\n<td>可能是 number 类型, 也可能是 boolean 类型</td>\n</tr>\n<tr>\n<td>允许为null</td>\n<td>{?number}</td>\n<td>可能是 number, 也可能是 null</td>\n</tr>\n<tr>\n<td>不允许为null</td>\n<td>{!Object}</td>\n<td>Object 类型, 但不是 null</td>\n</tr>\n<tr>\n<td>Function类型</td>\n<td>{function(number, boolean)}</td>\n<td>函数, 形参类型</td>\n</tr>\n<tr>\n<td>Function带返回值</td>\n<td>{function(number, boolean):string}</td>\n<td>函数, 形参, 返回值类型</td>\n</tr>\n<tr>\n<td>参数可选</td>\n<td>@param {string=} name</td>\n<td>可选参数, =为类型后缀</td>\n</tr>\n<tr>\n<td>可变参数</td>\n<td>@param {…number} args</td>\n<td>变长参数,  …为类型前缀</td>\n</tr>\n<tr>\n<td>任意类型</td>\n<td>{*}</td>\n<td>任意类型</td>\n</tr>\n<tr>\n<td>可选任意类型</td>\n<td>@param {*=} name</td>\n<td>可选参数，类型不限</td>\n</tr>\n<tr>\n<td>可变任意类型</td>\n<td>@param {…*} args</td>\n<td>变长参数，类型不限</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-4-5-文件注释\"><a href=\"#2-4-5-文件注释\" class=\"headerlink\" title=\"2.4.5 文件注释\"></a>2.4.5 文件注释</h4><h5 id=\"强制-文件顶部必须包含文件注释，用-file-标识文件说明。\"><a href=\"#强制-文件顶部必须包含文件注释，用-file-标识文件说明。\" class=\"headerlink\" title=\"[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。\"></a>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @file Describe the file</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<h5 id=\"建议-文件注释中可以用-author-标识开发者信息。\"><a href=\"#建议-文件注释中可以用-author-标识开发者信息。\" class=\"headerlink\" title=\"[建议] 文件注释中可以用 @author 标识开发者信息。\"></a>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5><p>解释：</p>\n<p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p>\n<p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p>\n<p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>\n<p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p>\n<p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @file Describe the file</div><div class=\"line\"> * @author author-name(mail-name@domain.com)</div><div class=\"line\"> *         author-name2(mail-name2@domain.com)</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-4-6-命名空间注释\"><a href=\"#2-4-6-命名空间注释\" class=\"headerlink\" title=\"2.4.6 命名空间注释\"></a>2.4.6 命名空间注释</h4><h5 id=\"建议-命名空间使用-namespace-标识。\"><a href=\"#建议-命名空间使用-namespace-标识。\" class=\"headerlink\" title=\"[建议] 命名空间使用 @namespace 标识。\"></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * @namespace</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> util = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-7-类注释\"><a href=\"#2-4-7-类注释\" class=\"headerlink\" title=\"2.4.7 类注释\"></a>2.4.7 类注释</h4><h5 id=\"建议-使用-class-标记类或构造函数。\"><a href=\"#建议-使用-class-标记类或构造函数。\" class=\"headerlink\" title=\"[建议] 使用 @class 标记类或构造函数。\"></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5><p>解释：</p>\n<p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Developer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-extends-标记类的继承信息。\"><a href=\"#建议-使用-extends-标记类的继承信息。\" class=\"headerlink\" title=\"[建议] 使用 @extends 标记类的继承信息。\"></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fronteer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Fronteer, Developer);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。\"><a href=\"#强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。\" class=\"headerlink\" title=\"[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。\"></a>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5><p>解释：</p>\n<p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 类描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fronteer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.extend(</div><div class=\"line\">    Fronteer.prototype,</div><div class=\"line\">    <span class=\"comment\">/** @lends Fronteer.prototype */</span>&#123;</div><div class=\"line\">        <span class=\"attr\">_getLevel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。\"><a href=\"#强制-类的属性或方法等成员信息使用-public-protected-private-中的任意一个，指明可访问性。\" class=\"headerlink\" title=\"[强制] 类的属性或方法等成员信息使用 @public / @protected / @private 中的任意一个，指明可访问性。\"></a>[强制] 类的属性或方法等成员信息使用 <code>@public</code> / <code>@protected</code> / <code>@private</code> 中的任意一个，指明可访问性。</h5><p>解释：</p>\n<p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 类描述</div><div class=\"line\"> *</div><div class=\"line\"> * @class</div><div class=\"line\"> * @extends Developer</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Fronteer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Developer.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 属性描述</div><div class=\"line\">     *</div><div class=\"line\">     * @type &#123;string&#125;</div><div class=\"line\">     * @private</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._level = <span class=\"string\">'T12'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// constructor body</span></div><div class=\"line\">&#125;;</div><div class=\"line\">util.inherits(Fronteer, Developer);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 方法描述</div><div class=\"line\"> *</div><div class=\"line\"> * @private</div><div class=\"line\"> * @return &#123;string&#125; 返回值描述</div><div class=\"line\"> */</span></div><div class=\"line\">Fronteer.prototype._getLevel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-8-函数-方法注释\"><a href=\"#2-4-8-函数-方法注释\" class=\"headerlink\" title=\"2.4.8 函数/方法注释\"></a>2.4.8 函数/方法注释</h4><h5 id=\"强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\"><a href=\"#强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\" class=\"headerlink\" title=\"[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。\"></a>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5><h5 id=\"强制-参数和返回值注释必须包含类型信息和说明。\"><a href=\"#强制-参数和返回值注释必须包含类型信息和说明。\" class=\"headerlink\" title=\"[强制] 参数和返回值注释必须包含类型信息和说明。\"></a>[强制] 参数和返回值注释必须包含类型信息和说明。</h5><h5 id=\"建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。\"><a href=\"#建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。\" class=\"headerlink\" title=\"[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。\"></a>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 函数描述</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;string&#125; p1 参数1的说明</div><div class=\"line\"> * @param &#123;string&#125; p2 参数2的说明，比较长</div><div class=\"line\"> *     那就换行了.</div><div class=\"line\"> * @param &#123;number=&#125; p3 参数3的说明（可选）</div><div class=\"line\"> * @return &#123;Object&#125; 返回值描述</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1, p2, p3</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p3 = p3 || <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">p1</span>: p1,</div><div class=\"line\">        <span class=\"attr\">p2</span>: p2,</div><div class=\"line\">        <span class=\"attr\">p3</span>: p3</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对-Object-中各项的描述，-必须使用-param-标识。\"><a href=\"#强制-对-Object-中各项的描述，-必须使用-param-标识。\" class=\"headerlink\" title=\"[强制] 对 Object 中各项的描述， 必须使用 @param 标识。\"></a>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 函数描述</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Object&#125; option 参数描述</div><div class=\"line\"> * @param &#123;string&#125; option.url option项描述</div><div class=\"line\"> * @param &#123;string=&#125; option.method option项描述，可选参数</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">option</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。\"><a href=\"#建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。\" class=\"headerlink\" title=\"[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param、@return，仅用 @override 标识，否则仍应作完整注释。\"></a>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5><p>解释：</p>\n<p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p>\n<h4 id=\"2-4-9-事件注释\"><a href=\"#2-4-9-事件注释\" class=\"headerlink\" title=\"2.4.9 事件注释\"></a>2.4.9 事件注释</h4><h5 id=\"强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。\"><a href=\"#强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。\" class=\"headerlink\" title=\"[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。\"></a>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 值变更时触发</div><div class=\"line\"> *</div><div class=\"line\"> * @event</div><div class=\"line\"> * @param &#123;Object&#125; e e描述</div><div class=\"line\"> * @param &#123;string&#125; e.before before描述</div><div class=\"line\"> * @param &#123;string&#125; e.after after描述</div><div class=\"line\"> */</span></div><div class=\"line\">onchange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。\"><a href=\"#强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。\" class=\"headerlink\" title=\"[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。\"></a>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5><h5 id=\"建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。\"><a href=\"#建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。\" class=\"headerlink\" title=\"[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。\"></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 点击处理</div><div class=\"line\"> *</div><div class=\"line\"> * @fires Select#change</div><div class=\"line\"> * @private</div><div class=\"line\"> */</span></div><div class=\"line\">Select.prototype.clickHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 值变更时触发</div><div class=\"line\">     *</div><div class=\"line\">     * @event Select#change</div><div class=\"line\">     * @param &#123;Object&#125; e e描述</div><div class=\"line\">     * @param &#123;string&#125; e.before before描述</div><div class=\"line\">     * @param &#123;string&#125; e.after after描述</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.fire(</div><div class=\"line\">        <span class=\"string\">'change'</span>,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">before</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">            <span class=\"attr\">after</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-10-常量注释\"><a href=\"#2-4-10-常量注释\" class=\"headerlink\" title=\"2.4.10 常量注释\"></a>2.4.10 常量注释</h4><h5 id=\"强制-常量必须使用-const-标记，并包含说明和类型信息。\"><a href=\"#强制-常量必须使用-const-标记，并包含说明和类型信息。\" class=\"headerlink\" title=\"[强制] 常量必须使用 @const 标记，并包含说明和类型信息。\"></a>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 常量说明</div><div class=\"line\"> *</div><div class=\"line\"> * @const</div><div class=\"line\"> * @type &#123;string&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> REQUEST_URL = <span class=\"string\">'myurl.do'</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-11-复杂类型注释\"><a href=\"#2-4-11-复杂类型注释\" class=\"headerlink\" title=\"2.4.11 复杂类型注释\"></a>2.4.11 复杂类型注释</h4><h5 id=\"建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。\"><a href=\"#建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。\" class=\"headerlink\" title=\"[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。\"></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 服务器</div><div class=\"line\"> *</div><div class=\"line\"> * @typedef &#123;Object&#125; namespaceA~Server</div><div class=\"line\"> * @property &#123;string&#125; host 主机</div><div class=\"line\"> * @property &#123;number&#125; port 端口</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 服务器列表</div><div class=\"line\"> *</div><div class=\"line\"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> servers = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">'1.2.3.4'</span>,</div><div class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8080</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">host</span>: <span class=\"string\">'1.2.3.5'</span>,</div><div class=\"line\">        <span class=\"attr\">port</span>: <span class=\"number\">8081</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-12-AMD-模块注释\"><a href=\"#2-4-12-AMD-模块注释\" class=\"headerlink\" title=\"2.4.12 AMD 模块注释\"></a>2.4.12 AMD 模块注释</h4><h5 id=\"强制-AMD-模块使用-module-或-exports-标识。\"><a href=\"#强制-AMD-模块使用-module-或-exports-标识。\" class=\"headerlink\" title=\"[强制] AMD 模块使用 @module 或 @exports 标识。\"></a>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5><p>解释：</p>\n<p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * foo description</div><div class=\"line\">         *</div><div class=\"line\">         * @exports Foo</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * baz description</div><div class=\"line\">         *</div><div class=\"line\">         * @return &#123;boolean&#125; return description</div><div class=\"line\">         */</span></div><div class=\"line\">        foo.baz = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> foo;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>也可以在 exports 变量前使用 @module 标识：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * module description.</div><div class=\"line\">         *</div><div class=\"line\">         * @module foo</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * bar description</div><div class=\"line\">         *</div><div class=\"line\">         */</span></div><div class=\"line\">        exports.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>如果直接使用 factory 的 exports 参数，还可以：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * module description.</div><div class=\"line\"> *</div><div class=\"line\"> * @module</div><div class=\"line\"> */</span></div><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, exports</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * bar description</div><div class=\"line\">         *</div><div class=\"line\">         */</span></div><div class=\"line\">        exports.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。\"><a href=\"#强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。\" class=\"headerlink\" title=\"[强制] 对于已使用 @module 标识为 AMD模块 的引用，在 namepaths 中必须增加 module: 作前缀。\"></a>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5><p>解释：</p>\n<p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 点击处理</div><div class=\"line\"> *</div><div class=\"line\"> * @fires module:Select#change</div><div class=\"line\"> * @private</div><div class=\"line\"> */</span></div><div class=\"line\">Select.prototype.clickHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 值变更时触发</div><div class=\"line\">     *</div><div class=\"line\">     * @event module:Select#change</div><div class=\"line\">     * @param &#123;Object&#125; e e描述</div><div class=\"line\">     * @param &#123;string&#125; e.before before描述</div><div class=\"line\">     * @param &#123;string&#125; e.after after描述</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.fire(</div><div class=\"line\">        <span class=\"string\">'change'</span>,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">before</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">            <span class=\"attr\">after</span>: <span class=\"string\">'bar'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于类定义的模块，可以使用-alias-标识构建函数。\"><a href=\"#建议-对于类定义的模块，可以使用-alias-标识构建函数。\" class=\"headerlink\" title=\"[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。\"></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * A module representing a jacket.</div><div class=\"line\"> * @module jacket</div><div class=\"line\"> */</span></div><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * @class</div><div class=\"line\">         * @alias module:jacket</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">var</span> Jacket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Jacket;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-多模块定义时，可以使用-exports-标识各个模块。\"><a href=\"#建议-多模块定义时，可以使用-exports-标识各个模块。\" class=\"headerlink\" title=\"[建议] 多模块定义时，可以使用 @exports 标识各个模块。\"></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// one module</span></div><div class=\"line\">define(<span class=\"string\">'html/utils'</span>,</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Utility functions to ease working with DOM elements.</div><div class=\"line\">     * @exports html/utils</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// another module</span></div><div class=\"line\">define(<span class=\"string\">'tag'</span>,</div><div class=\"line\">    <span class=\"comment\">/** @exports tag */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于-exports-为-Object-的模块，可以使用-namespace标识。\"><a href=\"#建议-对于-exports-为-Object-的模块，可以使用-namespace标识。\" class=\"headerlink\" title=\"[建议] 对于 exports 为 Object 的模块，可以使用@namespace标识。\"></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5><p>解释：</p>\n<p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p>\n<h5 id=\"建议-对于-exports-为类名的模块，使用-class-和-exports-标识。\"><a href=\"#建议-对于-exports-为类名的模块，使用-class-和-exports-标识。\" class=\"headerlink\" title=\"[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。\"></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></div><div class=\"line\"><span class=\"comment\">// 另外需要注意类名需要使用 var 定义的方式。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Bar description</div><div class=\"line\"> *</div><div class=\"line\"> * @see foo</div><div class=\"line\"> * @exports  Bar</div><div class=\"line\"> * @class</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * baz description</div><div class=\"line\"> *</div><div class=\"line\"> * @return &#123;(string|Array)&#125; return description</div><div class=\"line\"> */</span></div><div class=\"line\">Bar.prototype.baz = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-4-13-细节注释\"><a href=\"#2-4-13-细节注释\" class=\"headerlink\" title=\"2.4.13 细节注释\"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>\n<h4 id=\"建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\"><a href=\"#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\" class=\"headerlink\" title=\"[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。\"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">p1, p2, opt_p3</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里对具体内部逻辑进行说明</span></div><div class=\"line\">    <span class=\"comment\">// 说明太长需要换行</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (...) &#123;</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\"><a href=\"#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\" class=\"headerlink\" title=\"[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：\"></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p>\n<ol>\n<li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>\n<li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li>\n<li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>\n<li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>\n</ol>\n<h2 id=\"3-语言特性\"><a href=\"#3-语言特性\" class=\"headerlink\" title=\"3 语言特性\"></a>3 语言特性</h2><h3 id=\"3-1-变量\"><a href=\"#3-1-变量\" class=\"headerlink\" title=\"3.1 变量\"></a>3.1 变量</h3><h5 id=\"强制-变量在使用前必须通过-var-定义。\"><a href=\"#强制-变量在使用前必须通过-var-定义。\" class=\"headerlink\" title=\"[强制] 变量在使用前必须通过 var 定义。\"></a>[强制] 变量在使用前必须通过 <code>var</code> 定义。</h5><p>解释：</p>\n<p>不通过 var 定义变量将导致变量污染全局环境。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'MyName'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\">name = <span class=\"string\">'MyName'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-每个-var-只能声明一个变量。\"><a href=\"#强制-每个-var-只能声明一个变量。\" class=\"headerlink\" title=\"[强制] 每个 var 只能声明一个变量。\"></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p>\n<p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> hangModules = [];</div><div class=\"line\"><span class=\"keyword\">var</span> missModules = [];</div><div class=\"line\"><span class=\"keyword\">var</span> visited = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> hangModules = [],</div><div class=\"line\">    missModules = [],</div><div class=\"line\">    visited = &#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\"><a href=\"#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\" class=\"headerlink\" title=\"[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。\"></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释： </p>\n<p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kv2List</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> item = &#123;</div><div class=\"line\">                <span class=\"attr\">k</span>: key,</div><div class=\"line\">                <span class=\"attr\">v</span>: source[key]</div><div class=\"line\">            &#125;;</div><div class=\"line\">            list.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">kv2List</span>(<span class=\"params\">source</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> key;</div><div class=\"line\">    <span class=\"keyword\">var</span> item;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (source.hasOwnProperty(key)) &#123;</div><div class=\"line\">            item = &#123;</div><div class=\"line\">                <span class=\"attr\">k</span>: key,</div><div class=\"line\">                <span class=\"attr\">v</span>: source[key]</div><div class=\"line\">            &#125;;</div><div class=\"line\">            list.push(item);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> list;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-条件\"><a href=\"#3-2-条件\" class=\"headerlink\" title=\"3.2 条件\"></a>3.2 条件</h3><h5 id=\"强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。\"><a href=\"#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。\" class=\"headerlink\" title=\"[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。\"></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。</h5><p>解释：</p>\n<p>使用 === 可以避免等于判断中隐式的类型转换。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (age === <span class=\"number\">30</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (age == <span class=\"number\">30</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-尽可能使用简洁的表达式。\"><a href=\"#建议-尽可能使用简洁的表达式。\" class=\"headerlink\" title=\"[建议] 尽可能使用简洁的表达式。\"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串为空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!name) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name === <span class=\"string\">''</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串非空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (name !== <span class=\"string\">''</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组非空</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (collection.length) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (collection.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 布尔不成立</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!notTrue) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (notTrue === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// null 或 undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">if</span> (noValue == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (noValue === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> noValue === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-按执行频率排列分支的顺序。\"><a href=\"#建议-按执行频率排列分支的顺序。\" class=\"headerlink\" title=\"[建议] 按执行频率排列分支的顺序。\"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p>\n<p>按执行频率排列分支的顺序好处是：</p>\n<ol>\n<li>阅读的人容易找到最常见的情况，增加可读性。</li>\n<li>提高执行效率。</li>\n</ol>\n<h5 id=\"建议-对于相同变量或表达式的多值条件，用-switch-代替-if。\"><a href=\"#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。\" class=\"headerlink\" title=\"[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。\"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> variable) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'object'</span>:</div><div class=\"line\">        <span class=\"comment\">// ......</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'number'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'boolean'</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'string'</span>:</div><div class=\"line\">        <span class=\"comment\">// ......</span></div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> variable;</div><div class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">'number'</span> || type === <span class=\"string\">'boolean'</span> || type === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。\"><a href=\"#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。\" class=\"headerlink\" title=\"[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。\"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'unnamed'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'unnamed'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-3-循环\"><a href=\"#3-3-循环\" class=\"headerlink\" title=\"3.3 循环\"></a>3.3 循环</h3><h5 id=\"建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。\"><a href=\"#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。\" class=\"headerlink\" title=\"[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。\"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p>\n<p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clicker</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    addListener(element, <span class=\"string\">'click'</span>, clicker);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    addListener(element, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对循环内多次使用的不变值，在循环外用变量缓存。\"><a href=\"#建议-对循环内多次使用的不变值，在循环外用变量缓存。\" class=\"headerlink\" title=\"[建议] 对循环内多次使用的不变值，在循环外用变量缓存。\"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> width = wrap.offsetWidth + <span class=\"string\">'px'</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    element.style.width = width;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    element.style.width = wrap.offsetWidth + <span class=\"string\">'px'</span>;</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对有序集合进行遍历时，缓存-length。\"><a href=\"#建议-对有序集合进行遍历时，缓存-length。\" class=\"headerlink\" title=\"[建议] 对有序集合进行遍历时，缓存 length。\"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p>\n<p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[i];</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。\"><a href=\"#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。\" class=\"headerlink\" title=\"[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。\"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p>\n<p>逆序遍历可以节省变量，代码比较优化。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> len = elements.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> element = elements[len];</div><div class=\"line\">    <span class=\"comment\">// ......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-4-类型\"><a href=\"#3-4-类型\" class=\"headerlink\" title=\"3.4 类型\"></a>3.4 类型</h3><h4 id=\"3-4-1-类型检测\"><a href=\"#3-4-1-类型检测\" class=\"headerlink\" title=\"3.4.1 类型检测\"></a>3.4.1 类型检测</h4><h5 id=\"建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。\"><a href=\"#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。\" class=\"headerlink\" title=\"[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。\"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// string</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'string'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// number</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'number'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// boolean</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'boolean'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Function</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'function'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'object'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// RegExp</span></div><div class=\"line\">variable <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array</span></div><div class=\"line\">variable <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// null</span></div><div class=\"line\">variable === <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// null or undefined</span></div><div class=\"line\">variable == <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> variable === <span class=\"string\">'undefined'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-4-2-类型转换\"><a href=\"#3-4-2-类型转换\" class=\"headerlink\" title=\"3.4.2 类型转换\"></a>3.4.2 类型转换</h4><h5 id=\"建议-转换成-string-时，使用-39-39-。\"><a href=\"#建议-转换成-string-时，使用-39-39-。\" class=\"headerlink\" title=\"[建议] 转换成 string 时，使用 + &#39;&#39;。\"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">num + <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(num);</div><div class=\"line\">num.toString();</div><div class=\"line\"><span class=\"built_in\">String</span>(num);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-转换成-number-时，通常使用-。\"><a href=\"#建议-转换成-number-时，通常使用-。\" class=\"headerlink\" title=\"[建议] 转换成 number 时，通常使用 +。\"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\">+str;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(str);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。\"><a href=\"#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。\" class=\"headerlink\" title=\"[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。\"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"string\">'200px'</span>;</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(width, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-使用-parseInt-时，必须指定进制。\"><a href=\"#强制-使用-parseInt-时，必须指定进制。\" class=\"headerlink\" title=\"[强制] 使用 parseInt 时，必须指定进制。\"></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(str, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(str);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-转换成-boolean-时，使用-。\"><a href=\"#建议-转换成-boolean-时，使用-。\" class=\"headerlink\" title=\"[建议] 转换成 boolean 时，使用 !!。\"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\">!!num;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。\"><a href=\"#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。\" class=\"headerlink\" title=\"[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。\"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor / Math.round / Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">Math</span>.ceil(num);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">3.14</span>;</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(num, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-5-字符串\"><a href=\"#3-5-字符串\" class=\"headerlink\" title=\"3.5 字符串\"></a>3.5 字符串</h3><h5 id=\"强制-字符串开头和结束使用单引号-39-。\"><a href=\"#强制-字符串开头和结束使用单引号-39-。\" class=\"headerlink\" title=\"[强制] 字符串开头和结束使用单引号 &#39;。\"></a>[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p>\n<ol>\n<li>输入单引号不需要按住 shift，方便输入。</li>\n<li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'我是一个字符串'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"string\">'&lt;div class=\"cls\"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-数组-或-拼接字符串。\"><a href=\"#建议-使用-数组-或-拼接字符串。\" class=\"headerlink\" title=\"[建议] 使用 数组 或 + 拼接字符串。\"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p>\n<ol>\n<li>使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。</li>\n<li>在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。</li>\n<li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用数组拼接字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = [</div><div class=\"line\">    <span class=\"comment\">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></div><div class=\"line\">    <span class=\"string\">'&lt;ul&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class=\"line\">        <span class=\"string\">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class=\"line\">    <span class=\"string\">'&lt;/ul&gt;'</span></div><div class=\"line\">].join(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 + 拼接字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">''</span> <span class=\"comment\">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></div><div class=\"line\">    + <span class=\"string\">'&lt;ul&gt;'</span>,</div><div class=\"line\">    +    <span class=\"string\">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class=\"line\">    +    <span class=\"string\">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class=\"line\">    + <span class=\"string\">'&lt;/ul&gt;'</span>;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。\"><a href=\"#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。\" class=\"headerlink\" title=\"[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。\"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p>\n<p>使用模板引擎有如下好处：</p>\n<ol>\n<li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li>\n<li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li>\n</ol>\n<ul>\n<li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li>\n<li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li>\n<li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li>\n<li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li>\n<li>hogon: 体积小，在现代浏览器下性能高。</li>\n<li>nunjucks: 体积较大，性能一般，模板复用性高。</li>\n</ul>\n<h3 id=\"3-6-对象\"><a href=\"#3-6-对象\" class=\"headerlink\" title=\"3.6 对象\"></a>3.6 对象</h3><h5 id=\"强制-使用对象字面量-创建新-Object。\"><a href=\"#强制-使用对象字面量-创建新-Object。\" class=\"headerlink\" title=\"[强制] 使用对象字面量 {} 创建新 Object。\"></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。\"><a href=\"#强制-对象创建时，如果一个对象的所有-属性-均可以不添加引号，则所有-属性-不得添加引号。\" class=\"headerlink\" title=\"[强制] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，则所有 属性 不得添加引号。\"></a>[强制] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，则所有 <code>属性</code> 不得添加引号。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。\"><a href=\"#强制-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-必须添加-39-。\" class=\"headerlink\" title=\"[强制] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 必须添加 &#39;。\"></a>[强制] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 必须添加 <code>&#39;</code>。</h5><p>解释：</p>\n<p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p>\n<p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"string\">'name'</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"string\">'age'</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">'more-info'</span>: <span class=\"string\">'...'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'someone'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">28</span>,</div><div class=\"line\">    <span class=\"string\">'more-info'</span>: <span class=\"string\">'...'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-不允许修改和扩展任何原生对象和宿主对象的原型。\"><a href=\"#强制-不允许修改和扩展任何原生对象和宿主对象的原型。\" class=\"headerlink\" title=\"[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。\"></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 以下行为绝对禁止</span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-属性访问时，尽量使用-。\"><a href=\"#建议-属性访问时，尽量使用-。\" class=\"headerlink\" title=\"[建议] 属性访问时，尽量使用 .。\"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p>\n<p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p>\n<p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p>\n<p>示例： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">info.age;</div><div class=\"line\">info[<span class=\"string\">'more-info'</span>];</div></pre></td></tr></table></figure>\n<h5 id=\"建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。\"><a href=\"#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。\" class=\"headerlink\" title=\"[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。\"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newInfo = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> info) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (info.hasOwnProperty(key)) &#123;</div><div class=\"line\">        newInfo[key] = info[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-7-数组\"><a href=\"#3-7-数组\" class=\"headerlink\" title=\"3.7 数组\"></a>3.7 数组</h3><h5 id=\"强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。\"><a href=\"#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。\" class=\"headerlink\" title=\"[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。\"></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div></pre></td></tr></table></figure>\n<h5 id=\"强制-遍历数组不使用-for-in。\"><a href=\"#强制-遍历数组不使用-for-in。\" class=\"headerlink\" title=\"[强制] 遍历数组不使用 for in。\"></a>[强制] 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p>\n<p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">arr.other = <span class=\"string\">'other things'</span>; <span class=\"comment\">// 这里仅作演示, 实际中应使用Object类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确的遍历方式</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误的遍历方式</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。\"><a href=\"#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。\" class=\"headerlink\" title=\"[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。\"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p>\n<p>自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：</p>\n<ol>\n<li>需要稳定的排序算法，达到严格一致的排序结果。</li>\n<li>数据特点鲜明，适合使用桶排。</li>\n</ol>\n<h5 id=\"建议-清空数组使用-length-0。\"><a href=\"#建议-清空数组使用-length-0。\" class=\"headerlink\" title=\"[建议] 清空数组使用 .length = 0。\"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id=\"3-8-函数\"><a href=\"#3-8-函数\" class=\"headerlink\" title=\"3.8 函数\"></a>3.8 函数</h3><h4 id=\"3-8-1-函数长度\"><a href=\"#3-8-1-函数长度\" class=\"headerlink\" title=\"3.8.1 函数长度\"></a>3.8.1 函数长度</h4><h5 id=\"建议-一个函数的长度控制在-50-行以内。\"><a href=\"#建议-一个函数的长度控制在-50-行以内。\" class=\"headerlink\" title=\"[建议] 一个函数的长度控制在 50 行以内。\"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p>\n<p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>\n<p>特定算法等不可分割的逻辑允许例外。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncViewStateOnUserAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x.checked) &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">true</span>;</div><div class=\"line\">        z.value = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!a.value) &#123;</div><div class=\"line\">        warning.innerText = <span class=\"string\">'Please enter it'</span>;</div><div class=\"line\">        submitButton.disabled = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        warning.innerText = <span class=\"string\">''</span>;</div><div class=\"line\">        submitButton.disabled = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncViewStateOnUserAction</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    syncXStateToView();</div><div class=\"line\">    checkAAvailability();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">syncXStateToView</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x.checked) &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">true</span>;</div><div class=\"line\">        z.value = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        y.checked = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAAvailability</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!a.value) &#123;</div><div class=\"line\">        displayWarningForAMissing();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        clearWarnignForA();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-8-2-参数设计\"><a href=\"#3-8-2-参数设计\" class=\"headerlink\" title=\"3.8.2 参数设计\"></a>3.8.2 参数设计</h4><h5 id=\"建议-一个函数的参数控制在-6-个以内。\"><a href=\"#建议-一个函数的参数控制在-6-个以内。\" class=\"headerlink\" title=\"[建议] 一个函数的参数控制在 6 个以内。\"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p>\n<p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。</p>\n<p>某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p>\n<h5 id=\"建议-通过-options-参数传递非数据输入型参数。\"><a href=\"#建议-通过-options-参数传递非数据输入型参数。\" class=\"headerlink\" title=\"[建议] 通过 options 参数传递非数据输入型参数。\"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p>\n<p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。</p>\n<p>如下函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 移除某个元素</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Node&#125; element 需要移除的元素</div><div class=\"line\"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeElement</span>(<span class=\"params\">element, removeEventListeners</span>) </span>&#123;</div><div class=\"line\">    element.parent.removeChild(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (removeEventListeners) &#123;</div><div class=\"line\">        element.clearEventListeners();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以转换为下面的签名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 移除某个元素</div><div class=\"line\"> *</div><div class=\"line\"> * @param &#123;Node&#125; element 需要移除的元素</div><div class=\"line\"> * @param &#123;Object&#125; options 相关的逻辑配置</div><div class=\"line\"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeElement</span>(<span class=\"params\">element, options</span>) </span>&#123;</div><div class=\"line\">    element.parent.removeChild(element);</div><div class=\"line\">    <span class=\"keyword\">if</span> (options.removeEventListeners) &#123;</div><div class=\"line\">        element.clearEventListeners();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种模式有几个显著的优势：</p>\n<ul>\n<li>boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li>\n<li>当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。</li>\n<li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li>\n</ul>\n<h4 id=\"3-8-3-闭包\"><a href=\"#3-8-3-闭包\" class=\"headerlink\" title=\"3.8.3 闭包\"></a>3.8.3 闭包</h4><h5 id=\"建议-在适当的时候将闭包内大对象置为-null。\"><a href=\"#建议-在适当的时候将闭包内大对象置为-null。\" class=\"headerlink\" title=\"[建议] 在适当的时候将闭包内大对象置为 null。\"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p>\n<p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>\n<p>闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。</p>\n<p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>\n<ul>\n<li>嵌套的函数中是否有使用该变量。</li>\n<li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li>\n<li>是否使用了 with 表达式。</li>\n</ul>\n<p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>\n<p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p>\n<ol>\n<li>如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol>\n<li>如果是 V8 引擎，则退出全过程。</li>\n<li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>\n</ol>\n</li>\n<li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol>\n<li>如果 FunctionBody 中含有 <strong>直接调用eval</strong>，则退出全过程。</li>\n<li>否则得到所有的 Identifier。</li>\n<li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li>\n<li>对 binding 添加 notSwap 属性，其值为 true。</li>\n</ol>\n</li>\n<li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：<ol>\n<li>如果是V8引擎，删除该绑定。</li>\n<li>如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li>\n</ol>\n</li>\n</ol>\n<p>对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p>\n<p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>\n<h5 id=\"建议-使用-IIFE-避免-Lift-效应。\"><a href=\"#建议-使用-IIFE-避免-Lift-效应。\" class=\"headerlink\" title=\"[建议] 使用 IIFE 避免 Lift 效应。\"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p>\n<p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tasks = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    tasks[tasks.length] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Current cursor is at '</span> + i);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> len = tasks.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    tasks[len]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p>\n<p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tasks = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 注意有一层额外的闭包</span></div><div class=\"line\">    tasks[tasks.length] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Current cursor is at '</span> + i);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> len = tasks.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">    tasks[len]();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-8-4-空函数\"><a href=\"#3-8-4-空函数\" class=\"headerlink\" title=\"3.8.4 空函数\"></a>3.8.4 空函数</h4><h5 id=\"建议-空函数不使用-new-Function-的形式。\"><a href=\"#建议-空函数不使用-new-Function-的形式。\" class=\"headerlink\" title=\"[建议] 空函数不使用 new Function() 的形式。\"></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> emptyFunction = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\"><a href=\"#建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\" class=\"headerlink\" title=\"[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。\"></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EMPTY_FUNCTION = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyClass</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</div><div class=\"line\">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</div><div class=\"line\">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</div></pre></td></tr></table></figure>\n<h3 id=\"3-9-面向对象\"><a href=\"#3-9-面向对象\" class=\"headerlink\" title=\"3.9 面向对象\"></a>3.9 面向对象</h3><h5 id=\"强制-类的继承方案，实现时需要修正-constructor。\"><a href=\"#强制-类的继承方案，实现时需要修正-constructor。\" class=\"headerlink\" title=\"[强制] 类的继承方案，实现时需要修正 constructor。\"></a>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5><p>解释：</p>\n<p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 构建类之间的继承关系</div><div class=\"line\"> * </div><div class=\"line\"> * @param &#123;Function&#125; subClass 子类函数</div><div class=\"line\"> * @param &#123;Function&#125; superClass 父类函数</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">subClass, superClass</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>();</div><div class=\"line\">    F.prototype = superClass.prototype;</div><div class=\"line\">    subClass.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    subClass.prototype.constructor = subClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-声明类时，保证-constructor-的正确性。\"><a href=\"#建议-声明类时，保证-constructor-的正确性。\" class=\"headerlink\" title=\"[建议] 声明类时，保证 constructor 的正确性。\"></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 直接prototype等于对象时，需要修正constructor</span></div><div class=\"line\">Animal.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: Animal,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'animal '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' jump'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这种方式扩展prototype则无需理会constructor</span></div><div class=\"line\">Animal.prototype.jump = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'animal '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' jump'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"建议-属性在构造函数中声明，方法在原型中声明。\"><a href=\"#建议-属性在构造函数中声明，方法在原型中声明。\" class=\"headerlink\" title=\"[建议] 属性在构造函数中声明，方法在原型中声明。\"></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5><p>解释： </p>\n<p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TextNode</span>(<span class=\"params\">value, engine</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TextNode.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h5 id=\"强制-自定义事件的-事件名-必须全小写。\"><a href=\"#强制-自定义事件的-事件名-必须全小写。\" class=\"headerlink\" title=\"[强制] 自定义事件的 事件名 必须全小写。\"></a>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5><p>解释：</p>\n<p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p>\n<h5 id=\"强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。\"><a href=\"#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。\" class=\"headerlink\" title=\"[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。\"></a>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5><p>解释：</p>\n<p>一个事件对象的好处有：</p>\n<ol>\n<li>顺序无关，避免事件监听者需要记忆参数顺序。</li>\n<li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>\n<li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li>\n</ol>\n<h5 id=\"建议-设计自定义事件时，应考虑禁止默认行为。\"><a href=\"#建议-设计自定义事件时，应考虑禁止默认行为。\" class=\"headerlink\" title=\"[建议] 设计自定义事件时，应考虑禁止默认行为。\"></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5><p>解释：</p>\n<p>常见禁止默认行为的方式有两种：</p>\n<ol>\n<li>事件监听函数中 return false。</li>\n<li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li>\n</ol>\n<h3 id=\"3-10-动态特性\"><a href=\"#3-10-动态特性\" class=\"headerlink\" title=\"3.10 动态特性\"></a>3.10 动态特性</h3><h4 id=\"3-10-1-eval\"><a href=\"#3-10-1-eval\" class=\"headerlink\" title=\"3.10.1 eval\"></a>3.10.1 eval</h4><h5 id=\"强制-避免使用直接-eval-函数。\"><a href=\"#强制-避免使用直接-eval-函数。\" class=\"headerlink\" title=\"[强制] 避免使用直接 eval 函数。\"></a>[强制] 避免使用直接 <code>eval</code> 函数。</h5><p>解释：</p>\n<p>直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。</p>\n<p>如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p>\n<h5 id=\"建议-尽量避免使用-eval-函数。\"><a href=\"#建议-尽量避免使用-eval-函数。\" class=\"headerlink\" title=\"[建议] 尽量避免使用 eval 函数。\"></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5><h4 id=\"3-10-2-动态执行代码\"><a href=\"#3-10-2-动态执行代码\" class=\"headerlink\" title=\"3.10.2 动态执行代码\"></a>3.10.2 动态执行代码</h4><h5 id=\"建议-使用-new-Function-执行动态代码。\"><a href=\"#建议-使用-new-Function-执行动态代码。\" class=\"headerlink\" title=\"[建议] 使用 new Function 执行动态代码。\"></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5><p>解释：</p>\n<p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'return x + y;'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> result = handler($(<span class=\"string\">'#x'</span>).val(), $(<span class=\"string\">'#y'</span>).val());</div></pre></td></tr></table></figure>\n<h4 id=\"3-10-3-with\"><a href=\"#3-10-3-with\" class=\"headerlink\" title=\"3.10.3 with\"></a>3.10.3 with</h4><h5 id=\"建议-尽量不要使用-with。\"><a href=\"#建议-尽量不要使用-with。\" class=\"headerlink\" title=\"[建议] 尽量不要使用 with。\"></a>[建议] 尽量不要使用 <code>with</code>。</h5><p>解释：</p>\n<p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。</p>\n<h4 id=\"3-10-4-delete\"><a href=\"#3-10-4-delete\" class=\"headerlink\" title=\"3.10.4 delete\"></a>3.10.4 delete</h4><h5 id=\"建议-减少-delete-的使用。\"><a href=\"#建议-减少-delete-的使用。\" class=\"headerlink\" title=\"[建议] 减少 delete 的使用。\"></a>[建议] 减少 <code>delete</code> 的使用。</h5><p>解释：</p>\n<p>如果没有特别的需求，减少或避免使用<code>delete</code>。<code>delete</code>的使用会破坏部分 JavaScript 引擎的性能优化。</p>\n<h5 id=\"建议-处理-delete-可能产生的异常。\"><a href=\"#建议-处理-delete-可能产生的异常。\" class=\"headerlink\" title=\"[建议] 处理 delete 可能产生的异常。\"></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5><p>解释：</p>\n<p>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。</p>\n<p>在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> o.x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (deleteError) &#123;</div><div class=\"line\">    o.x = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-10-5-对象属性\"><a href=\"#3-10-5-对象属性\" class=\"headerlink\" title=\"3.10.5 对象属性\"></a>3.10.5 对象属性</h4><h5 id=\"建议-避免修改外部传入的对象。\"><a href=\"#建议-避免修改外部传入的对象。\" class=\"headerlink\" title=\"[建议] 避免修改外部传入的对象。\"></a>[建议] 避免修改外部传入的对象。</h5><p>解释：</p>\n<p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p>\n<p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p>\n<p>下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">datasource</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.datasource = datasource;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Tree.prototype.selectNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 从datasource中找出节点对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.findNode(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</div><div class=\"line\">        node.selected = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flushView();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tree</span>(<span class=\"params\">datasource</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.datasource = datasource;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeIndex = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Tree.prototype.selectNode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 从datasource中找出节点对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"keyword\">this</span>.findNode(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.selectedNodeIndex[id] = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flushView();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p>\n<h5 id=\"建议-具备强类型的设计。\"><a href=\"#建议-具备强类型的设计。\" class=\"headerlink\" title=\"[建议] 具备强类型的设计。\"></a>[建议] 具备强类型的设计。</h5><p>解释：</p>\n<ul>\n<li>如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。</li>\n<li>从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li>\n</ul>\n<h2 id=\"4-浏览器环境\"><a href=\"#4-浏览器环境\" class=\"headerlink\" title=\"4 浏览器环境\"></a>4 浏览器环境</h2><h3 id=\"4-1-模块化\"><a href=\"#4-1-模块化\" class=\"headerlink\" title=\"4.1 模块化\"></a>4.1 模块化</h3><h4 id=\"4-1-1-AMD\"><a href=\"#4-1-1-AMD\" class=\"headerlink\" title=\"4.1.1 AMD\"></a>4.1.1 AMD</h4><h5 id=\"强制-使用-AMD-作为模块定义。\"><a href=\"#强制-使用-AMD-作为模块定义。\" class=\"headerlink\" title=\"[强制] 使用 AMD 作为模块定义。\"></a>[强制] 使用 <code>AMD</code> 作为模块定义。</h5><p>解释：</p>\n<p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>\n<p>目前，比较成熟的 AMD Loader 有：</p>\n<ul>\n<li>官方实现的 <a href=\"http://requirejs.org/\">requirejs</a></li>\n<li>百度自己实现的 <a href=\"https://github.com/ecomfe/esl\">esl</a></li>\n</ul>\n<h5 id=\"强制-模块-id-必须符合标准。\"><a href=\"#强制-模块-id-必须符合标准。\" class=\"headerlink\" title=\"[强制] 模块 id 必须符合标准。\"></a>[强制] 模块 <code>id</code> 必须符合标准。</h5><p>解释：</p>\n<p>模块 id 必须符合以下约束条件：</p>\n<ol>\n<li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li>\n<li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>\n<li>不应该有 .js 后缀。</li>\n<li>跟文件的路径保持一致。</li>\n</ol>\n<h4 id=\"4-1-2-define\"><a href=\"#4-1-2-define\" class=\"headerlink\" title=\"4.1.2 define\"></a>4.1.2 define</h4><h5 id=\"建议-定义模块时不要指明-id-和-dependencies。\"><a href=\"#建议-定义模块时不要指明-id-和-dependencies。\" class=\"headerlink\" title=\"[建议] 定义模块时不要指明 id 和 dependencies。\"></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5><p>解释：</p>\n<p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p>\n<p>所以，推荐使用 define(factory) 的形式进行模块定义。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-使用-return-来返回模块定义。\"><a href=\"#建议-使用-return-来返回模块定义。\" class=\"headerlink\" title=\"[建议] 使用 return 来返回模块定义。\"></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5><p>解释：</p>\n<p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> exports = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> exports;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-require\"><a href=\"#4-1-3-require\" class=\"headerlink\" title=\"4.1.3 require\"></a>4.1.3 require</h4><h5 id=\"强制-全局运行环境中，require-必须以-async-require-形式调用。\"><a href=\"#强制-全局运行环境中，require-必须以-async-require-形式调用。\" class=\"headerlink\" title=\"[强制] 全局运行环境中，require 必须以 async require 形式调用。\"></a>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5><p>解释：</p>\n<p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// good</span></div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'foo'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">foo</span>) </span>&#123;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bad</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"强制-模块定义中只允许使用-local-require，不允许使用-global-require。\"><a href=\"#强制-模块定义中只允许使用-local-require，不允许使用-global-require。\" class=\"headerlink\" title=\"[强制] 模块定义中只允许使用 local require，不允许使用 global require。\"></a>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5><p>解释：</p>\n<ol>\n<li>在模块定义中使用 global require，对封装性是一种破坏。</li>\n<li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。</li>\n</ol>\n<h5 id=\"强制-Package在实现时，内部模块的-require-必须使用-relative-id。\"><a href=\"#强制-Package在实现时，内部模块的-require-必须使用-relative-id。\" class=\"headerlink\" title=\"[强制] Package在实现时，内部模块的 require 必须使用 relative id。\"></a>[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5><p>解释：</p>\n<p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'./util'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h5 id=\"建议-不会被调用的依赖模块，在-factory-开始处统一-require。\"><a href=\"#建议-不会被调用的依赖模块，在-factory-开始处统一-require。\" class=\"headerlink\" title=\"[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。\"></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5><p>解释：</p>\n<p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'css!foo.css'</span>);</div><div class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">'tpl!bar.tpl.html'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"4-2-DOM\"><a href=\"#4-2-DOM\" class=\"headerlink\" title=\"4.2 DOM\"></a>4.2 DOM</h3><h4 id=\"4-2-1-元素获取\"><a href=\"#4-2-1-元素获取\" class=\"headerlink\" title=\"4.2.1 元素获取\"></a>4.2.1 元素获取</h4><h5 id=\"建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。\"><a href=\"#建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。\" class=\"headerlink\" title=\"[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用document.all。\"></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5><h5 id=\"建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。\"><a href=\"#建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。\" class=\"headerlink\" title=\"[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。\"></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5><h5 id=\"建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\"><a href=\"#建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\" class=\"headerlink\" title=\"[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。\"></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5><p>解释：</p>\n<p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'*'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示为 DIV</span></div><div class=\"line\">alert(elements[<span class=\"number\">0</span>].tagName);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> div = elements[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.insertBefore(p, div);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 显示为 P</span></div><div class=\"line\">alert(elements[<span class=\"number\">0</span>].tagName);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\"><a href=\"#建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\" class=\"headerlink\" title=\"[建议] 获取元素的直接子元素时使用 children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。\"></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5><h4 id=\"4-2-2-样式获取\"><a href=\"#4-2-2-样式获取\" class=\"headerlink\" title=\"4.2.2 样式获取\"></a>4.2.2 样式获取</h4><h5 id=\"建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。\"><a href=\"#建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。\" class=\"headerlink\" title=\"[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle。\"></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5><p>解释：</p>\n<p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p>\n<h4 id=\"4-2-3-样式设置\"><a href=\"#4-2-3-样式设置\" class=\"headerlink\" title=\"4.2.3 样式设置\"></a>4.2.3 样式设置</h4><h5 id=\"建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。\"><a href=\"#建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。\" class=\"headerlink\" title=\"[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。\"></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5><h5 id=\"强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。\"><a href=\"#强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。\" class=\"headerlink\" title=\"[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。\"></a>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5><p>解释：</p>\n<p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p>\n<h4 id=\"4-2-4-DOM-操作\"><a href=\"#4-2-4-DOM-操作\" class=\"headerlink\" title=\"4.2.4 DOM 操作\"></a>4.2.4 DOM 操作</h4><h5 id=\"建议-操作-DOM-时，尽量减少页面-reflow。\"><a href=\"#建议-操作-DOM-时，尽量减少页面-reflow。\" class=\"headerlink\" title=\"[建议] 操作 DOM 时，尽量减少页面 reflow。\"></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5><p>解释：</p>\n<p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p>\n<ul>\n<li>DOM元素的添加、修改（内容）、删除。</li>\n<li>应用新的样式或者修改任何影响元素布局的属性。</li>\n<li>Resize浏览器窗口、滚动页面。</li>\n<li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li>\n</ul>\n<h5 id=\"建议-尽量减少-DOM-操作。\"><a href=\"#建议-尽量减少-DOM-操作。\" class=\"headerlink\" title=\"[建议] 尽量减少 DOM 操作。\"></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5><p>解释：</p>\n<p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>\n<ol>\n<li>在循环体中 createElement 并 append 到父元素中。</li>\n<li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li>\n</ol>\n<p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p>\n<h4 id=\"4-2-5-DOM-事件\"><a href=\"#4-2-5-DOM-事件\" class=\"headerlink\" title=\"4.2.5 DOM 事件\"></a>4.2.5 DOM 事件</h4><h5 id=\"建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。\"><a href=\"#建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。\" class=\"headerlink\" title=\"[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。\"></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5><p>解释：</p>\n<p>expando 属性绑定事件容易导致互相覆盖。</p>\n<h5 id=\"建议-使用-addEventListener-时第三个参数使用-false。\"><a href=\"#建议-使用-addEventListener-时第三个参数使用-false。\" class=\"headerlink\" title=\"[建议] 使用 addEventListener 时第三个参数使用 false。\"></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5><p>解释：</p>\n<p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p>\n<h5 id=\"建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\"><a href=\"#建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\" class=\"headerlink\" title=\"[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。\"></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>"},{"title":"ThinkPHP5 集成扩展 phpQuery用法总结","date":"2017-05-30T06:34:28.000Z","comments":1,"keywords":"ThinkPHP5 集成扩展 phpQuery 用法总结","description":"假期闲来无事,宅在家中,突然想到php里面如何去使用操作DOM爬去自己想要的数据返回给前端了,经过一番搜索找到了这个phpQuery扩展,于是打算集成到ThinkPHP5项目中去使用,遂记录之,集成扩展 phpQuery用法总结","_content":"\n\n## 什么是phpQuery？\n>[phpQuery](http://code.google.com/p/phpquery/)是一个类似于Jquery，能够在 PHP里面操作 HTML DOM节点的一个扩展库，能够灵活的对页面数据进行采集、爬虫获得自己想要的数据、文件下载地址：http://code.google.com/p/phpquery/\n\n\n###   phpQuery的使用介绍\n\n>如下代码 使用 `\\phpQuery::newDocumentHTML($data)` 得到 HTML 的 DOM 树，就可以像Jquery一样操作HTML节点了\n```php\n $filePath = 'http://www.xxxx.com/';\n $data=Http_Spider($filePath);\n \\phpQuery::newDocumentHTML($data);\n //\\phpQuery::newDocumentFile($data);\n $arr = array();\n \n $list = pq('#picture')->find(\"a\");\n foreach ($list as $li) {\n\t $title = pq($li)->attr('title');\n\t $url = pq($li)->attr('href');\n\t $img = pq($li)->find('img')->attr('src');\n\t $tmp = array([\n\t\t 'title' => $title,\n\t\t 'url' => $url,\n\t\t 'img' => $img\n\t\t ]);\n      array_push($arr, $tmp);\n     }\n```\n###  载入文档（loading documents）\n\n>加载文档主要通过phpQuery::newDocument来进行操作，其作用是使得phpQuery可以在服务器预先读取到指定的文件或文本内容。\n主要的方法包括：\n\n```php\nphpQuery::newDocument(html,html,contentType = null)\n\nphpQuery::newDocumentFile(file,file,contentType = null)\n\nphpQuery::newDocumentHTML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentXHTML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentXML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentPHP(html,html,contentType = null)\n\nphpQuery::newDocumentFileHTML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFileXHTML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFileXML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFilePHP(file,file,contentType) \n \n```\n\n\n## 将phpQuery扩展集成到 ThinkPHP5 \n>我们下载phpQuery包 然后将包复制到 Thinkphp项目的根目录 vendor（第三方类库目录）文件夹里面，如下\n ![图片](https://dn-coding-net-production-pp.qbox.me/695499db-0daf-46cf-a8c1-ba2e0216b8e5.png) \n \n然后还有一个文件 `QueryList`，QueryList作为一个类方法使用，在这个类方法里面引入扩展，\n```php\nVendor('phpQuery.phpQuery');\nclass QueryList{\n}\n```\n\n接下来就是如何在控制器方法里面使用这个扩展\n\n```php\ninclude('QueryList.php');\n\n public function splider()\n    {\n     $filePath = 'http://www.xxx.com/';\n      $data=Http_Spider($filePath);\n      \\phpQuery::newDocumentHTML($data);\n\n    }\n```\n接下来就可以像JQuery，一样舒服的使用了","source":"_posts/phpQuery.md","raw":"---\ntitle: ThinkPHP5 集成扩展 phpQuery用法总结\ndate: 2017-05-30 14:34:28\ncomments: true\ncategories: php\ntags: [php,ThinkPHP]\nkeywords: ThinkPHP5 集成扩展 phpQuery 用法总结\ndescription: 假期闲来无事,宅在家中,突然想到php里面如何去使用操作DOM爬去自己想要的数据返回给前端了,经过一番搜索找到了这个phpQuery扩展,于是打算集成到ThinkPHP5项目中去使用,遂记录之,集成扩展 phpQuery用法总结\n\n---\n\n\n## 什么是phpQuery？\n>[phpQuery](http://code.google.com/p/phpquery/)是一个类似于Jquery，能够在 PHP里面操作 HTML DOM节点的一个扩展库，能够灵活的对页面数据进行采集、爬虫获得自己想要的数据、文件下载地址：http://code.google.com/p/phpquery/\n\n\n###   phpQuery的使用介绍\n\n>如下代码 使用 `\\phpQuery::newDocumentHTML($data)` 得到 HTML 的 DOM 树，就可以像Jquery一样操作HTML节点了\n```php\n $filePath = 'http://www.xxxx.com/';\n $data=Http_Spider($filePath);\n \\phpQuery::newDocumentHTML($data);\n //\\phpQuery::newDocumentFile($data);\n $arr = array();\n \n $list = pq('#picture')->find(\"a\");\n foreach ($list as $li) {\n\t $title = pq($li)->attr('title');\n\t $url = pq($li)->attr('href');\n\t $img = pq($li)->find('img')->attr('src');\n\t $tmp = array([\n\t\t 'title' => $title,\n\t\t 'url' => $url,\n\t\t 'img' => $img\n\t\t ]);\n      array_push($arr, $tmp);\n     }\n```\n###  载入文档（loading documents）\n\n>加载文档主要通过phpQuery::newDocument来进行操作，其作用是使得phpQuery可以在服务器预先读取到指定的文件或文本内容。\n主要的方法包括：\n\n```php\nphpQuery::newDocument(html,html,contentType = null)\n\nphpQuery::newDocumentFile(file,file,contentType = null)\n\nphpQuery::newDocumentHTML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentXHTML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentXML(html,html,charset = 'utf-8')\n\nphpQuery::newDocumentPHP(html,html,contentType = null)\n\nphpQuery::newDocumentFileHTML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFileXHTML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFileXML(file,file,charset = 'utf-8')\n\nphpQuery::newDocumentFilePHP(file,file,contentType) \n \n```\n\n\n## 将phpQuery扩展集成到 ThinkPHP5 \n>我们下载phpQuery包 然后将包复制到 Thinkphp项目的根目录 vendor（第三方类库目录）文件夹里面，如下\n ![图片](https://dn-coding-net-production-pp.qbox.me/695499db-0daf-46cf-a8c1-ba2e0216b8e5.png) \n \n然后还有一个文件 `QueryList`，QueryList作为一个类方法使用，在这个类方法里面引入扩展，\n```php\nVendor('phpQuery.phpQuery');\nclass QueryList{\n}\n```\n\n接下来就是如何在控制器方法里面使用这个扩展\n\n```php\ninclude('QueryList.php');\n\n public function splider()\n    {\n     $filePath = 'http://www.xxx.com/';\n      $data=Http_Spider($filePath);\n      \\phpQuery::newDocumentHTML($data);\n\n    }\n```\n接下来就可以像JQuery，一样舒服的使用了","slug":"phpQuery","published":1,"updated":"2017-06-02T02:24:18.430Z","layout":"post","photos":[],"link":"","_id":"cj4sal69p0010ek5bj8f94zky","content":"<h2 id=\"什么是phpQuery？\"><a href=\"#什么是phpQuery？\" class=\"headerlink\" title=\"什么是phpQuery？\"></a>什么是phpQuery？</h2><blockquote>\n<p><a href=\"http://code.google.com/p/phpquery/\" target=\"_blank\" rel=\"external\">phpQuery</a>是一个类似于Jquery，能够在 PHP里面操作 HTML DOM节点的一个扩展库，能够灵活的对页面数据进行采集、爬虫获得自己想要的数据、文件下载地址：<a href=\"http://code.google.com/p/phpquery/\" target=\"_blank\" rel=\"external\">http://code.google.com/p/phpquery/</a></p>\n</blockquote>\n<h3 id=\"phpQuery的使用介绍\"><a href=\"#phpQuery的使用介绍\" class=\"headerlink\" title=\"phpQuery的使用介绍\"></a>phpQuery的使用介绍</h3><blockquote>\n<p>如下代码 使用 <code>\\phpQuery::newDocumentHTML($data)</code> 得到 HTML 的 DOM 树，就可以像Jquery一样操作HTML节点了<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filePath = <span class=\"string\">'http://www.xxxx.com/'</span>;</div><div class=\"line\">$data=Http_Spider($filePath);</div><div class=\"line\">\\phpQuery::newDocumentHTML($data);</div><div class=\"line\"><span class=\"comment\">//\\phpQuery::newDocumentFile($data);</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">$list = pq(<span class=\"string\">'#picture'</span>)-&gt;find(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> ($list <span class=\"keyword\">as</span> $li) &#123;</div><div class=\"line\"> $title = pq($li)-&gt;attr(<span class=\"string\">'title'</span>);</div><div class=\"line\"> $url = pq($li)-&gt;attr(<span class=\"string\">'href'</span>);</div><div class=\"line\"> $img = pq($li)-&gt;find(<span class=\"string\">'img'</span>)-&gt;attr(<span class=\"string\">'src'</span>);</div><div class=\"line\"> $tmp = <span class=\"keyword\">array</span>([</div><div class=\"line\">\t <span class=\"string\">'title'</span> =&gt; $title,</div><div class=\"line\">\t <span class=\"string\">'url'</span> =&gt; $url,</div><div class=\"line\">\t <span class=\"string\">'img'</span> =&gt; $img</div><div class=\"line\">\t ]);</div><div class=\"line\">     array_push($arr, $tmp);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"载入文档（loading-documents）\"><a href=\"#载入文档（loading-documents）\" class=\"headerlink\" title=\"载入文档（loading documents）\"></a>载入文档（loading documents）</h3><blockquote>\n<p>加载文档主要通过phpQuery::newDocument来进行操作，其作用是使得phpQuery可以在服务器预先读取到指定的文件或文本内容。<br>主要的方法包括：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpQuery::newDocument(html,html,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFile(file,file,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentHTML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentXHTML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentXML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentPHP(html,html,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileHTML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileXHTML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileXML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFilePHP(file,file,contentType)</div></pre></td></tr></table></figure>\n<h2 id=\"将phpQuery扩展集成到-ThinkPHP5\"><a href=\"#将phpQuery扩展集成到-ThinkPHP5\" class=\"headerlink\" title=\"将phpQuery扩展集成到 ThinkPHP5\"></a>将phpQuery扩展集成到 ThinkPHP5</h2><blockquote>\n<p>我们下载phpQuery包 然后将包复制到 Thinkphp项目的根目录 vendor（第三方类库目录）文件夹里面，如下<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/695499db-0daf-46cf-a8c1-ba2e0216b8e5.png\" alt=\"图片\"> </p>\n</blockquote>\n<p>然后还有一个文件 <code>QueryList</code>，QueryList作为一个类方法使用，在这个类方法里面引入扩展，<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vendor(<span class=\"string\">'phpQuery.phpQuery'</span>);</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryList</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来就是如何在控制器方法里面使用这个扩展</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">'QueryList.php'</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splider</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">     $filePath = <span class=\"string\">'http://www.xxx.com/'</span>;</div><div class=\"line\">      $data=Http_Spider($filePath);</div><div class=\"line\">      \\phpQuery::newDocumentHTML($data);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>接下来就可以像JQuery，一样舒服的使用了</p>\n","excerpt":"","more":"<h2 id=\"什么是phpQuery？\"><a href=\"#什么是phpQuery？\" class=\"headerlink\" title=\"什么是phpQuery？\"></a>什么是phpQuery？</h2><blockquote>\n<p><a href=\"http://code.google.com/p/phpquery/\">phpQuery</a>是一个类似于Jquery，能够在 PHP里面操作 HTML DOM节点的一个扩展库，能够灵活的对页面数据进行采集、爬虫获得自己想要的数据、文件下载地址：<a href=\"http://code.google.com/p/phpquery/\">http://code.google.com/p/phpquery/</a></p>\n</blockquote>\n<h3 id=\"phpQuery的使用介绍\"><a href=\"#phpQuery的使用介绍\" class=\"headerlink\" title=\"phpQuery的使用介绍\"></a>phpQuery的使用介绍</h3><blockquote>\n<p>如下代码 使用 <code>\\phpQuery::newDocumentHTML($data)</code> 得到 HTML 的 DOM 树，就可以像Jquery一样操作HTML节点了<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$filePath = <span class=\"string\">'http://www.xxxx.com/'</span>;</div><div class=\"line\">$data=Http_Spider($filePath);</div><div class=\"line\">\\phpQuery::newDocumentHTML($data);</div><div class=\"line\"><span class=\"comment\">//\\phpQuery::newDocumentFile($data);</span></div><div class=\"line\">$arr = <span class=\"keyword\">array</span>();</div><div class=\"line\"></div><div class=\"line\">$list = pq(<span class=\"string\">'#picture'</span>)-&gt;find(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> ($list <span class=\"keyword\">as</span> $li) &#123;</div><div class=\"line\"> $title = pq($li)-&gt;attr(<span class=\"string\">'title'</span>);</div><div class=\"line\"> $url = pq($li)-&gt;attr(<span class=\"string\">'href'</span>);</div><div class=\"line\"> $img = pq($li)-&gt;find(<span class=\"string\">'img'</span>)-&gt;attr(<span class=\"string\">'src'</span>);</div><div class=\"line\"> $tmp = <span class=\"keyword\">array</span>([</div><div class=\"line\">\t <span class=\"string\">'title'</span> =&gt; $title,</div><div class=\"line\">\t <span class=\"string\">'url'</span> =&gt; $url,</div><div class=\"line\">\t <span class=\"string\">'img'</span> =&gt; $img</div><div class=\"line\">\t ]);</div><div class=\"line\">     array_push($arr, $tmp);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"载入文档（loading-documents）\"><a href=\"#载入文档（loading-documents）\" class=\"headerlink\" title=\"载入文档（loading documents）\"></a>载入文档（loading documents）</h3><blockquote>\n<p>加载文档主要通过phpQuery::newDocument来进行操作，其作用是使得phpQuery可以在服务器预先读取到指定的文件或文本内容。<br>主要的方法包括：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpQuery::newDocument(html,html,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFile(file,file,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentHTML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentXHTML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentXML(html,html,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentPHP(html,html,contentType = <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileHTML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileXHTML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFileXML(file,file,charset = <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\">phpQuery::newDocumentFilePHP(file,file,contentType)</div></pre></td></tr></table></figure>\n<h2 id=\"将phpQuery扩展集成到-ThinkPHP5\"><a href=\"#将phpQuery扩展集成到-ThinkPHP5\" class=\"headerlink\" title=\"将phpQuery扩展集成到 ThinkPHP5\"></a>将phpQuery扩展集成到 ThinkPHP5</h2><blockquote>\n<p>我们下载phpQuery包 然后将包复制到 Thinkphp项目的根目录 vendor（第三方类库目录）文件夹里面，如下<br> <img src=\"https://dn-coding-net-production-pp.qbox.me/695499db-0daf-46cf-a8c1-ba2e0216b8e5.png\" alt=\"图片\"> </p>\n</blockquote>\n<p>然后还有一个文件 <code>QueryList</code>，QueryList作为一个类方法使用，在这个类方法里面引入扩展，<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vendor(<span class=\"string\">'phpQuery.phpQuery'</span>);</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryList</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来就是如何在控制器方法里面使用这个扩展</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">'QueryList.php'</span>);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splider</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">     $filePath = <span class=\"string\">'http://www.xxx.com/'</span>;</div><div class=\"line\">      $data=Http_Spider($filePath);</div><div class=\"line\">      \\phpQuery::newDocumentHTML($data);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>接下来就可以像JQuery，一样舒服的使用了</p>\n"},{"title":"Vuejs -- Vue基础总结","layout":"post","date":"2016-12-10T14:04:55.000Z","comments":1,"keywords":"Vue.js","description":"Vue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结","_content":"\n\nVue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结,主要包括以下几个方面:\n1.数据绑定\n2.指令\n3.组件\n4.事件\n5.过滤器\n\n\n<!-- more -->\n## Vue基础\n\n### Vue实例\n\n#### 构造器\n通过构造函数可以创建一个Vue的根实例：\n\n```\nvar vm = new Vue({\n  // 选项\n});\n```\n一个Vue的实例是MVVM模型中的ViewModel，在实例化时，需要传入一个选项对象，其中包括挂载元素、数据、模板、方法，生命周期的钩子函数等\n\n#### 实例生命周期\n\n![实例生命周期](http://p0.meituan.net/dpnewvc/43cca72c865daf323a732de2c8924743116787.png)\n\n### 数据绑定\n\nVue.js的模板是基于DOM实现的，Vue的模板都是可解析的有效HTML，且通过一些特性做了增强。\n\n#### 插值\n\n- 文本\n\n最基本的数据绑定形式就是文本插值，使用Mustache语法-双大括号：\n\n```\n<span>Message: {{ msg }}</span>\n```\nMustache标签会被数据对象中的msg值替换，每当属性值发生变化对应也会更新到DOM上\n\n- 原始的HTML\n\n有的时候要输出真正的HTML字符串，则需要用到三Mustache标签，此时的数据绑定会被忽略\n\n```\n<div>{{{ raw_html }}}</div>\n```\n**注意：在网站上动态渲染任意的HTML是非常危险的，容易导致XSS攻击。因此只对可信的HTML使用插值，永不用于用户提交的内容**\n\n- HTML特性\n\nMustache标签也可以用在HTML属性中\n\n```\n<div id=\"item-{{ id }}\"></div>\n```\n但是在Vue.js指令和特殊特性内不能使用插值\n\n#### 绑定表达式\n\n放在Mustache标签内的文本成为绑定表达式，可以由一个简单的Javascript表达式和可选的一个或多个过滤器组成\n\n- javascript表达式\n\n ```\n\t{{ number + 1 }}\n\n\t{{ ok ? 'YES' : 'NO' }}\n\n\t{{ message.split('').reverse().join('') }}\n\n ```\n\n#### 过滤器\n\nVue.js允许在表达式后添加可选的过滤器，以‘管道符’形式\n\n```\n{{ message | capitalize }}\n```\n上述语句表示将`message`的值通过内置的`capitalize`过滤器，这个过滤器其实是一个函数，返回大写的值\n\n过滤器可以串联\n\n ```\n{{ message | filterA | filterB }}\n ```\n\n同时可以接收参数\n\n```\n{{ message | filterA 'arg1' arg2 }}\n```\n过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。这里，字符串 'arg1' 将传给过滤器作为第二个参数，表达式 arg2 的值在计算出来之后作为第三个参数。\n\n\n### 指令\n\n指令是特殊的带有前缀`v-`特性。指令的值限定为**绑定表达式**，它的职责是当其表达式的值改变时把某些行为应用到DOM上。\n\n- v-if、v-show与v-else\n\n ```\n<p v-if=\"greeting\">Hello!</p>\n ```\n 这里通过`v-if`指令将表达式`greeting`的值真假插入/删除p元素。\n\n\n 上述指令用于条件渲染，根据绑定的表达式结果确定是否要渲染HTML元素。`v-else` 元素必须立即跟在 `v-if` 或 `v-show` 元素的后面——否则它不能被识别。\n\n - 区别\n\n `v-if` 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件\n\n `v-show` 绑定的元素始终被编译并保留，只是简单地基于 CSS 切换，另外它不支持`<template>`标签\n\n   一般来说，`v-if` 有更高的切换消耗而 `v-show `有更高的初始渲染消耗。因此，如果需要频繁切换 `v-show` 较好，如果在运行时条件不大可能改变 `v-if` 较好\n\n\n\n- v-on\n\n  利用`v-on`指令用于监听DOM事件，例如：`<a v-on:click=\"doSomething\">`\n\n  另外`v-on`指令还可以缩写成`@`符号表示：\n\n ```\n\t<!-- 完整语法 -->\n\t<a v-on:click=\"doSomething\"></a>\n\n\t<!-- 缩写 -->\n\t<a @click=\"doSomething\"></a>\n  ```\n\n- v-bind\n\n 利用`v-bind`指令用于响应的更新HTML属性，例如：`<a v-bind:href=\"url\"></a>`\n\n 另外`v-bind`指令还可以缩写为`:`表示：\n\n ```\n\t<!-- 完整语法 -->\n\t<a v-bind:href=\"url\"></a>\n\n\t<!-- 缩写 -->\n\t<a :href=\"url\"></a>\n\n\t<!-- 完整语法 -->\n\t<button v-bind:disabled=\"someDynamicCondition\">Button</button>\n\n\t<!-- 缩写 -->\n\t<button :disabled=\"someDynamicCondition\">Button</button>\n ```\n\n- v-model\n\n 此指令用于表单元素上，例如常见的input，select，textarea，radio，checkbox等\n\n  ```\n   <select v-model=\"selected\" multiple>\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected | json }}</span>\n  ```\n\n- v-for\n\n `v-for`指令基于一个数组渲染一个列表。还有一个特殊的变量`$index`，它是当前数组元素的索引\n\n  ```\n  <ul id=\"example-1\">\n\t  <li v-for=\"item in items\">\n\t     {{ parentMessage }} - {{ $index }} - {{ item.message }}\n\t  </li>\n </ul>\n\n var example1 = new Vue({\n\t  el: '#example-1',\n\t  data: {\n\t    items: [\n\t      { message: 'Foo' },\n\t      { message: 'Bar' }\n\t    ]\n\t  }\n })\n  ```\n\n Vue.js封装了数组的变异方法，例如`push`,`pop`,`shift`, `unshift`等和非变异方法，例如`filter`,`concat`等，如果是非变异的方法，则只需要直接使用返回的新数组替换原来的数组即可\n\n  ```\n  example1.items = example1.items.filter(function (item) {\n       return item.message.match(/Foo/)\n  })\n  ```\n\n - track-by\n\n  列表在渲染的过程中通过唯一的键进行追踪，可以通过数组中每个值的唯一id进行标识或者通过`$index`，这种模式下可以处理数组中重复的值\n\n   ```\n    <div v-for=\"item in items\" track-by=\"$index\">\n\t  <!-- content -->\n   </div>\n   ```\n\n### 计算属性\n在Vue.js中将绑定表达式限定为一个表达式，如果需要多余一个表达式的逻辑，应当使用计算属性。一个比较常见的应用方式是b属性的值依赖于a属性的值，则b应当设置为计算属性。计算属性同样具有getter和setter方法\n\n ```\nvar vm = new Vue({\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n      fullName: {\n\t    // getter\n\t    get: function () {\n\t     \treturn this.firstName + ' ' + this.lastName\n\t    },\n\t    // setter\n\t    set: function (newValue) {\n\t        var names = newValue.split(' ')\n\t        this.firstName = names[0]\n\t        this.lastName = names[names.length - 1]\n\t    }\n     }\n  }\n})\n ```\n此时的`vm. fullName`依赖于`vm. firstName `和`vm. lastName`，所以当`vm. firstName`和`vm. lastName`的值改变的时候，`vm. fullName`值也会相应的进行改变。同样的如果调用`vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会有相应更新\n\n### Class与style绑定\n数据绑定的一个常见需求是操作元素的class和它的内联样式。因为它们都是HTML元素的属性，可以用`v-bind`来处理它们：只需要计算出表达式最终字符串。在`v-bind`用于绑定class和style时，Vue.js专门对其进行增强，使得表达式的结果类型除了字符串外，还可以是对象或者数组。\n\n**注意：尽管可以用Mustache标签绑定class，例如class={{className}}，但是不推荐和v-bind:class=className这种方式混用。两者只能选其一**\n\n#### 绑定class\n\n- 对象语法\n\n可以给`v-bind:class`传递一个对象，以动态的切换class。注意`v-bind:class`可以和普通的`class`共存。\n\n```\n<div class=\"static\" v-bind:class=\"{ 'class-a': isA, 'class-b': isB }\"></div>\n\n```\n\n```\ndata: {\n  isA: true,\n  isB: false\n}\n```\n渲染为：\n\n```\n<div class=\"static class-a\"></div>\n```\n\n- 数组语法\n\n可以把一个数组传递给`v-bind:class`，以应用一个class列表\n\n```\n<div v-bind:class=\"[classA, classB]\">\n```\n```\n data: {\n  classA: 'class-a',\n  classB: 'class-b'\n}\n```\n渲染为：\n\n```\n<div class=\"class-a class-b\"></div>\n```\n\n#### 绑定style内联样式\n`v-bind:style`与`v-bind:class`使用方式相同，可以使用对象语法和数组语法。css属性名可以采用驼峰式或者短横线分割命名。\n\n- 对象语法\n\n ```\n <div v-bind:style=\"styleObject\"></div>\n ```\n ```\n  data: {\n\t  styleObject: {\n\t      color: 'red',\n\t      fontSize: '13px'\n\t  }\n}\n ```\n\n- 数组语法\n\n 可以将多个样式对象应用到一个元素上\n `<div v-bind:style=\"[AStyle, BStyle]\">`\n\n ```\n  AStyle: {\n        color: 'red'\n    },\n    BStyle: {\n        fontSize: '22px'\n    }\n ```\n\n### 表单控件绑定\n\n可以通过`v-model`指令在表单元素上创建双向数据绑定\n\n#### Text\n\n```\n<span>Message is: {{ message }}</span>\n<br>\n<input type=\"text\" v-model=\"message\" placeholder=\"edit me\">\n\n```\n\n#### Checkbox\n\n多个复选框，绑定到同一个数组\n\n```\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n<br>\n<span>Checked names: {{ checkedNames | json }}</span>\n```\n\n```\nnew Vue({\n  el: '...',\n  data: {\n    checkedNames: []\n  }\n})\n```\n\n#### Radio\n\n```\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n\n#### Select\n\n - 单选，value为单个字符串\n\n ```\n<select v-model=\"selected\">\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n</select>\n<span>Selected: {{ selected }}</span>\n ```\n\n - 多选，value为一个数组\n\n ```\n <select v-model=\"selected\" multiple>\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ selected | json }}</span>\n ```\n\n#### 参数特性\n\n - lazy\n\n 在默认情况下，`v-model`是在`input`事件中同步输入框值和数据，可以添加一个`lazy`属性，从而在`change`事件中同步\n\n ```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model=\"msg\" lazy>\n ```\n\n- debounce\n\n `debounce`设置一个最小延时，在每次敲击后延时同步输入框和数据，例如在输入过程中发送ajax请求时比较有用。`debounce`延迟写入底层数据，应当用`vm.$watch()`监听数据的变化。\n\n ```\n <input v-model=\"msg\" debounce=\"500\">\n ```\n\n `debounce`参数不会延迟DOM，若想延迟DOM事件，应当使用`debounce过滤器`。包装处理器，让它延迟执行，包装后的处理器将延迟`x`ms（默认为300ms）后执行，如果在延迟结束前再次调用，延时时长重置为`x`ms\n\n ```\n <input @keyup=\"onKeyup | debounce 500\">\n ```\n\n### 方法和事件处理器\n\n#### 方法处理器\n\n可以通过`v-on`指令监听DOM事件，事件监听程序都是写在`methods`属性中。在绑定方的时候，还可以传递参数，包括event对象，在HTML语句中需要使用`$event`进行传递。并且这个`$event`是原生的event对象，包含原生的event事件属性和方法。\n\n```\n<div id=\"example\">\n  <button v-on:click=\"greet($event, 'Vue.js')\">Greet</button>\n</div>\n```\n\n绑定一个事件处理方法`greet`\n\n```\nvar vm = new Vue({\n  el: '#example',\n  // 在 `methods` 对象中定义方法\n  methods: {\n    greet: function (event, msg) {\n      // 方法内 `this` 指向 vm\n      alert('Hello ' + msg + '!')\n      // `event` 是原生 DOM 事件\n      alert(event.target.tagName)\n    }\n  }\n})\n\n// 也可以在 JavaScript 代码中调用方法\nvm.greet() // -> 'Hello Vue.js!'\n```\n#### 事件修饰符\n\n在事件处理器中，通常需要使用到`event.stopPropagation()`和`event.preventDefault()`，在Vue.js中为`v-on`指令添加了`.stop`和`.prevent`两个命令修饰符\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n\n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\">\n\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n\n<!-- 添加事件侦听器时使用 capture 模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n#### 按键修饰符\n\n在监听键盘事件时，经常需要检测keyCode。Vue.js允许为`v-on`添加按键修饰符\n\n```\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n全部按键的别名包括：\n\n- enter\n- tab\n- delete\n- esc\n- space\n- up\n- down\n- left\n- right\n\n### 组件\n\n组件（component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件的使用过程包括定义和注册的过程。组件在注册之后便可以在父实例中以自定义的元素的形式使用，不过要确保在初始化根实例之前注册了组件。而且自定义元素只是作为一个挂载点\n\n```\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n```\n// 定义\nvar MyComponent = Vue.extend({\n  template: '<div>A custom component!</div>'\n})\n\n// 注册\nVue.component('my-component', MyComponent)\n\n// 创建根实例\nnew Vue({\n  el: '#example'\n})\n```\n渲染为：\n\n```\n<div id=\"example\">\n  <div>A custom component!</div>\n</div>\n```\n\n#### 局部注册\n\n有点时候并不需要注册全局组件，可以只让组件用在其他组件内部，用`components`进行注册\n\n```\n//定义子组件\nvar child = Vue.extend({\n    template: '<div>this is child component </div>'\n});\n\n//定义父组件\nvar parent = Vue.extend({\n    template: '<div>this is parent component <child-component></child-component> </div>',\n    components: {\n        //此时子组件child-component只能在父组件中使用\n        'child-component': child\n    }\n});\n\n//注册父组件\nVue.component('parent-component', parent);\n```\n\n#### 模板解析\n\nVue模板是DOM模板，使用浏览器原生的解析器而不是自己实现一个，所以HTML元素对什么元素可以放在它里面是有限制的。常见的限制如下：\n\n- a 不能包含其它的交互元素（如按钮，链接）\n- ul 和 ol 只能直接包含 li\n- select 只能包含 option 和 optgroup\n- table 只能直接包含 thead, tbody, tfoot, tr, caption, col, colgroup\n- tr 只能直接包含 th 和 td\n\n#### 组件选项\n\n在组件内部也会使用数据变量，变量值也会存在data选项中，但是不同于Vue实例的data属性，组件内部的data属性应该是一个函数，在这个函数中返回一个新的对象，其中包含需要的属性名和属性值。\n\n ```\nvar MyComponent = Vue.extend({\n  data: function () {\n    return { a: 1 }\n  }\n})\n ```\n\n#### 使用props进行传值\n\n组件实例的作用域是孤立的，在子组件中不能直接使用父组件中的属性。可以使用props属性将数据传递给子组件。是传递字面量还是动态值通过是否使用`v-bind`指令来确定。\n\n```\nvar child = Vue.extend({\n    template: '<div>this is child component  {{attrA}} {{attrB}}</div>',\n    props: ['attrA', 'attrB']\n});\n\nvar parent = Vue.extend({\n    template: '<div>this is parent component {{a}} ' +\n              '<child-component v-bind:a=\"aa\" attr-a=\"attrA\" v-bind:attr-b=\"attrB\"></child-component>' +\n              '</div>',\n    components: {\n        'child-component': child\n    },\n    data: function () {\n        return {\n            attrA: dynamic  attrA',\n            attrB: 'dynamic attrB'\n        }\n    }\n});\n```\n\n渲染为：\n\n```\n<div>this is child component  attrA dynamic attrB</div>\n```\n**注意：子组件内部具有的属性不能和继承的属性相同，即不能在子组件的data和props中出现相同的变量名，否则程序会报错**\n\n#### 父子组件通信\n\n子组件可以通过`this.$parent`访问它的父组件，父组件有一个`this.$children`，包含子组件的列表。根实例的后代通过`this.$root`访问它。\n\n尽管可以访问到父链上的任意实例，不过子组件应该避免直接依赖父组件的数据，而是通过props属性进行传递，而且在子组件中也不要修改父组件中的状态，理想情况下只有组件自己才可以修改它的状态。\n\n#### 自定义事件\n\nVue.js实现了一个自定义的事件接口，用于在组件树中通信。这个事件系统独立于原声DOM事件，用法也不同。\n\n每个Vue实例都是一个事件触发器\n\n- 使用`$on`监听事件\n- 使用`$emit`在它上面触发事件\n- 使用`$dispatch`派发事件，事件沿着父链冒泡。**不同于DOM原生事件，Vue事件在冒泡过程中第一次触发回调后自动停止冒泡，除非回调函数明确返回`true`**\n- 使用`$broadcast`广播事件，事件向下传导给所有后代\n\n```\n<!-- 子组件模板 -->\n<template id=\"child-template\">\n  <input v-model=\"msg\">\n  <button v-on:click=\"notify\">Dispatch Event</button>\n</template>\n\n<!-- 父组件模板 -->\n<div id=\"events-example\">\n  <p>Messages: {{ messages | json }}</p>\n  <child></child>\n</div>\n```\n\n```\n// 注册子组件\n// 将当前消息派发出去\nVue.component('child', {\n  template: '#child-template',\n  data: function () {\n    return { msg: 'hello' }\n  },\n  methods: {\n    notify: function () {\n      if (this.msg.trim()) {\n        this.$dispatch('child-msg', this.msg)\n        this.msg = ''\n      }\n    }\n  }\n})\n\n// 初始化父组件\n// 将收到消息时将事件推入一个数组\nvar parent = new Vue({\n  el: '#events-example',\n  data: {\n    messages: []\n  },\n  // 在创建实例时 `events` 选项简单地调用 `$on`\n  events: {\n    'child-msg': function (msg) {\n      // 事件回调内的 `this` 自动绑定到注册它的实例上\n      this.messages.push(msg);\n    }\n  }\n})\n```\n\n#### 使用slot分发内容\n\n每个组件都有自己的作用域，父组件模板的内容在父组件作用域内编译，子组件模板的内容在子组件作用域内编译。如果要绑定一个指令打到组件的根节点上，应该按如下方式：\n\n```\nVue.component('child-component', {\n  // v-show指令有效，因为是在正确的作用域内\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n```\n类似的，分发内容也是在父组件的作用域内编译。\n\n- slot\n\n 父组件的内容在渲染的时候会被抛弃，除非子组件包含了`slot`标签。如果子组件只包含一个`slot`，则父组件的内容将被添加到`slot`标签中；如果子组件具有多个`slot`标签，可以通过`slot`标签的`name`属性进行分发。在具有多个`slot`标签时，仍然可以有一个匿名的`slot`，它是默认的`slot`，作为找不到匹配的内容的`slot`。\n\n 子组件模板：\n\n ```\n <div>\n\t  <slot name=\"one\"></slot>\n\t  <slot></slot>\n\t  <slot name=\"two\"></slot>\n</div>\n ```\n\n 父组件模板：\n\n ```\n  <multi-insertion>\n\t  <p slot=\"one\">One</p>\n\t  <p slot=\"two\">Two</p>\n\t  <p>Default A</p>\n   </multi-insertion>\n ```\n\n 渲染为：\n\n ```\n   <div>\n\t  <p slot=\"one\">One</p>\n\t  <p>Default A</p>\n\t  <p slot=\"two\">Two</p>\n   </div>\n ```\n\n#### 编写可复用的组件\n\n在编写组件的时候，如果需要达到可复用的目的，应当定义一个清晰的公开接口。Vue.js组件的API来自三个部分：props、事件和slot\n\n- **props**允许外部环境传递数据给组件\n- **事件**允许组件触发外部环境的action\n- **slot**允许外部环境的内容插入到组件内部结构中\n\n通常一个组件模板的清晰结构如下：\n\n```\n <my-component\n  :foo=\"baz\"\n  :bar=\"qux\"\n  @event-a=\"doThis\"\n  @event-b=\"doThat\">\n  <!-- content -->\n  <img slot=\"icon\" src=\"...\">\n  <p slot=\"main-text\">Hello!</p>\n</my-component>\n```\n\n### 自定义指令\n\n除了Vue内置的指令外，还可以自定义指令。自定义指令提供一种机制将数据变化映射为DOM行为。通过`Vue.directive(id, definition)`方法注册一个全局自定义指令，它接收两个参数，指令ID和定义对象。在HTML元素中使用自定义指令时，需要添加`v-`前缀\n\n#### 钩子函数\n\n定义对象中定义了几个可选的钩子函数\n\n- bind：只调用一次，在指令第一次绑定到元素上时调用\n- update：在bind后立即以初始值为参数第一次调用，以后每次绑定的值发生变化时，触发一次，参数为新值和旧值\n- unbind：只调用一次，在指令元素上解绑时调用\n\n```\nVue.directive('my-directive', {\n\t  bind: function () {\n\t    // 准备工作\n\t    // 例如，添加事件处理器或只需要运行一次的高耗任务\n\t  },\n\t  update: function (newValue, oldValue) {\n\t    // 值更新时的工作\n\t    // 也会以初始值为参数调用一次\n\t  },\n\t  unbind: function () {\n\t    // 清理工作\n\t    // 例如，删除 bind() 添加的事件监听器\n\t  }\n})\n```\n\n#### 指令实例属性\n\n在钩子函数内`this`执行这个指令对象。这个对象暴露了一些实例属性：\n\n- **el**：指令绑定的元素\n- **vm**：拥有该指令的上下文ViewModel\n- **expression**：指令表达式\n- **arg**：指令参数\n- **name**：指令名称\n- **modifiers**：指令修饰符对象\n- **descriptor**：指令解析的结果对象\n\n**注意:这些属性我们应该将其视为可读的，不要修改他们。可以添加自定义属性，但不要覆盖已有的内部属性**\n\n```\n<div id=\"demo\" v-demo:hello.a.b=\"msg\"></div>\n```\n\n```\n Vue.directive('demo', {\n\t  bind: function () {\n\t    console.log('demo bound!')\n\t  },\n\t  update: function (value) {\n\t    this.el.innerHTML =\n\t      'name - '       + this.name + '<br>' +\n\t      'expression - ' + this.expression + '<br>' +\n\t      'argument - '   + this.arg + '<br>' +\n\t      'modifiers - '  + JSON.stringify(this.modifiers) + '<br>' +\n\t      'value - '      + value\n\t  }\n});\nvar demo = new Vue({\n\t  el: '#demo',\n\t  data: {\n\t    msg: 'hello!'\n\t  }\n})\n```\n\n结果为：\n\n```\n name - demo\n expression - msg\n argument - hello\n modifiers - {a: true, b: true}\n value - hello!\n```\n\n#### 高级选项-params\n\n类似于自定义组件的`props`属性，自定义指令提供`params`属性，指令一个数组列表，Vue编译器将自动提取绑定元素的这些特性。而且`params`还支持动态属性，另外还可以指定一个回调，在值变化时调用\n\n```\n<div v-example v-bind:a=\"someValue\"></div>\n```\n\n```\nVue.directive('example', {\n  params: ['a'],\n  paramWatchers: {\n    a: function (val, oldVal) {\n      console.log('a changed!')\n    }\n  }\n})\n```\n\n### 自定义过滤器\n类似于自定义指令，可以通过`Vue.filter()`注册一个全局自定义过滤器，接收两个参数：过滤器ID和过滤器函数，过滤器函数以值为参数，返回转换后的值\n\n自定义过滤器可以接收任意数量的参数，第一个参数为表达式的值，从第二个参数开始可以传递任意值，字面量或者计算表达式\n\n```\nVue.filter('wrap', function (value, begin, end) {\n    return begin + value + end\n});\n\nvar vm = new Vue({\n    el: '#demo',\n    data: {\n   \t   after: 'last'\n    }\n});\n```\n\n```\n<!-- 'hello' => 'before hello after' -->\n<span v-text=\"message | wrap 'before' after\"></span>\n```\n\n\n\n\n\n\n\n","source":"_posts/vuejs.md","raw":"---\ntitle: Vuejs -- Vue基础总结\nlayout: post\ndate: 2016-12-10 22:04:55\ncomments: true\ncategories: Vue.js\ntags: [Vue.js]\nkeywords: Vue.js \ndescription: Vue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结\n---\n\n\nVue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结,主要包括以下几个方面:\n1.数据绑定\n2.指令\n3.组件\n4.事件\n5.过滤器\n\n\n<!-- more -->\n## Vue基础\n\n### Vue实例\n\n#### 构造器\n通过构造函数可以创建一个Vue的根实例：\n\n```\nvar vm = new Vue({\n  // 选项\n});\n```\n一个Vue的实例是MVVM模型中的ViewModel，在实例化时，需要传入一个选项对象，其中包括挂载元素、数据、模板、方法，生命周期的钩子函数等\n\n#### 实例生命周期\n\n![实例生命周期](http://p0.meituan.net/dpnewvc/43cca72c865daf323a732de2c8924743116787.png)\n\n### 数据绑定\n\nVue.js的模板是基于DOM实现的，Vue的模板都是可解析的有效HTML，且通过一些特性做了增强。\n\n#### 插值\n\n- 文本\n\n最基本的数据绑定形式就是文本插值，使用Mustache语法-双大括号：\n\n```\n<span>Message: {{ msg }}</span>\n```\nMustache标签会被数据对象中的msg值替换，每当属性值发生变化对应也会更新到DOM上\n\n- 原始的HTML\n\n有的时候要输出真正的HTML字符串，则需要用到三Mustache标签，此时的数据绑定会被忽略\n\n```\n<div>{{{ raw_html }}}</div>\n```\n**注意：在网站上动态渲染任意的HTML是非常危险的，容易导致XSS攻击。因此只对可信的HTML使用插值，永不用于用户提交的内容**\n\n- HTML特性\n\nMustache标签也可以用在HTML属性中\n\n```\n<div id=\"item-{{ id }}\"></div>\n```\n但是在Vue.js指令和特殊特性内不能使用插值\n\n#### 绑定表达式\n\n放在Mustache标签内的文本成为绑定表达式，可以由一个简单的Javascript表达式和可选的一个或多个过滤器组成\n\n- javascript表达式\n\n ```\n\t{{ number + 1 }}\n\n\t{{ ok ? 'YES' : 'NO' }}\n\n\t{{ message.split('').reverse().join('') }}\n\n ```\n\n#### 过滤器\n\nVue.js允许在表达式后添加可选的过滤器，以‘管道符’形式\n\n```\n{{ message | capitalize }}\n```\n上述语句表示将`message`的值通过内置的`capitalize`过滤器，这个过滤器其实是一个函数，返回大写的值\n\n过滤器可以串联\n\n ```\n{{ message | filterA | filterB }}\n ```\n\n同时可以接收参数\n\n```\n{{ message | filterA 'arg1' arg2 }}\n```\n过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。这里，字符串 'arg1' 将传给过滤器作为第二个参数，表达式 arg2 的值在计算出来之后作为第三个参数。\n\n\n### 指令\n\n指令是特殊的带有前缀`v-`特性。指令的值限定为**绑定表达式**，它的职责是当其表达式的值改变时把某些行为应用到DOM上。\n\n- v-if、v-show与v-else\n\n ```\n<p v-if=\"greeting\">Hello!</p>\n ```\n 这里通过`v-if`指令将表达式`greeting`的值真假插入/删除p元素。\n\n\n 上述指令用于条件渲染，根据绑定的表达式结果确定是否要渲染HTML元素。`v-else` 元素必须立即跟在 `v-if` 或 `v-show` 元素的后面——否则它不能被识别。\n\n - 区别\n\n `v-if` 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件\n\n `v-show` 绑定的元素始终被编译并保留，只是简单地基于 CSS 切换，另外它不支持`<template>`标签\n\n   一般来说，`v-if` 有更高的切换消耗而 `v-show `有更高的初始渲染消耗。因此，如果需要频繁切换 `v-show` 较好，如果在运行时条件不大可能改变 `v-if` 较好\n\n\n\n- v-on\n\n  利用`v-on`指令用于监听DOM事件，例如：`<a v-on:click=\"doSomething\">`\n\n  另外`v-on`指令还可以缩写成`@`符号表示：\n\n ```\n\t<!-- 完整语法 -->\n\t<a v-on:click=\"doSomething\"></a>\n\n\t<!-- 缩写 -->\n\t<a @click=\"doSomething\"></a>\n  ```\n\n- v-bind\n\n 利用`v-bind`指令用于响应的更新HTML属性，例如：`<a v-bind:href=\"url\"></a>`\n\n 另外`v-bind`指令还可以缩写为`:`表示：\n\n ```\n\t<!-- 完整语法 -->\n\t<a v-bind:href=\"url\"></a>\n\n\t<!-- 缩写 -->\n\t<a :href=\"url\"></a>\n\n\t<!-- 完整语法 -->\n\t<button v-bind:disabled=\"someDynamicCondition\">Button</button>\n\n\t<!-- 缩写 -->\n\t<button :disabled=\"someDynamicCondition\">Button</button>\n ```\n\n- v-model\n\n 此指令用于表单元素上，例如常见的input，select，textarea，radio，checkbox等\n\n  ```\n   <select v-model=\"selected\" multiple>\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n  </select>\n  <br>\n  <span>Selected: {{ selected | json }}</span>\n  ```\n\n- v-for\n\n `v-for`指令基于一个数组渲染一个列表。还有一个特殊的变量`$index`，它是当前数组元素的索引\n\n  ```\n  <ul id=\"example-1\">\n\t  <li v-for=\"item in items\">\n\t     {{ parentMessage }} - {{ $index }} - {{ item.message }}\n\t  </li>\n </ul>\n\n var example1 = new Vue({\n\t  el: '#example-1',\n\t  data: {\n\t    items: [\n\t      { message: 'Foo' },\n\t      { message: 'Bar' }\n\t    ]\n\t  }\n })\n  ```\n\n Vue.js封装了数组的变异方法，例如`push`,`pop`,`shift`, `unshift`等和非变异方法，例如`filter`,`concat`等，如果是非变异的方法，则只需要直接使用返回的新数组替换原来的数组即可\n\n  ```\n  example1.items = example1.items.filter(function (item) {\n       return item.message.match(/Foo/)\n  })\n  ```\n\n - track-by\n\n  列表在渲染的过程中通过唯一的键进行追踪，可以通过数组中每个值的唯一id进行标识或者通过`$index`，这种模式下可以处理数组中重复的值\n\n   ```\n    <div v-for=\"item in items\" track-by=\"$index\">\n\t  <!-- content -->\n   </div>\n   ```\n\n### 计算属性\n在Vue.js中将绑定表达式限定为一个表达式，如果需要多余一个表达式的逻辑，应当使用计算属性。一个比较常见的应用方式是b属性的值依赖于a属性的值，则b应当设置为计算属性。计算属性同样具有getter和setter方法\n\n ```\nvar vm = new Vue({\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n      fullName: {\n\t    // getter\n\t    get: function () {\n\t     \treturn this.firstName + ' ' + this.lastName\n\t    },\n\t    // setter\n\t    set: function (newValue) {\n\t        var names = newValue.split(' ')\n\t        this.firstName = names[0]\n\t        this.lastName = names[names.length - 1]\n\t    }\n     }\n  }\n})\n ```\n此时的`vm. fullName`依赖于`vm. firstName `和`vm. lastName`，所以当`vm. firstName`和`vm. lastName`的值改变的时候，`vm. fullName`值也会相应的进行改变。同样的如果调用`vm.fullName = 'John Doe'` 时，setter 会被调用，`vm.firstName` 和 `vm.lastName` 也会有相应更新\n\n### Class与style绑定\n数据绑定的一个常见需求是操作元素的class和它的内联样式。因为它们都是HTML元素的属性，可以用`v-bind`来处理它们：只需要计算出表达式最终字符串。在`v-bind`用于绑定class和style时，Vue.js专门对其进行增强，使得表达式的结果类型除了字符串外，还可以是对象或者数组。\n\n**注意：尽管可以用Mustache标签绑定class，例如class={{className}}，但是不推荐和v-bind:class=className这种方式混用。两者只能选其一**\n\n#### 绑定class\n\n- 对象语法\n\n可以给`v-bind:class`传递一个对象，以动态的切换class。注意`v-bind:class`可以和普通的`class`共存。\n\n```\n<div class=\"static\" v-bind:class=\"{ 'class-a': isA, 'class-b': isB }\"></div>\n\n```\n\n```\ndata: {\n  isA: true,\n  isB: false\n}\n```\n渲染为：\n\n```\n<div class=\"static class-a\"></div>\n```\n\n- 数组语法\n\n可以把一个数组传递给`v-bind:class`，以应用一个class列表\n\n```\n<div v-bind:class=\"[classA, classB]\">\n```\n```\n data: {\n  classA: 'class-a',\n  classB: 'class-b'\n}\n```\n渲染为：\n\n```\n<div class=\"class-a class-b\"></div>\n```\n\n#### 绑定style内联样式\n`v-bind:style`与`v-bind:class`使用方式相同，可以使用对象语法和数组语法。css属性名可以采用驼峰式或者短横线分割命名。\n\n- 对象语法\n\n ```\n <div v-bind:style=\"styleObject\"></div>\n ```\n ```\n  data: {\n\t  styleObject: {\n\t      color: 'red',\n\t      fontSize: '13px'\n\t  }\n}\n ```\n\n- 数组语法\n\n 可以将多个样式对象应用到一个元素上\n `<div v-bind:style=\"[AStyle, BStyle]\">`\n\n ```\n  AStyle: {\n        color: 'red'\n    },\n    BStyle: {\n        fontSize: '22px'\n    }\n ```\n\n### 表单控件绑定\n\n可以通过`v-model`指令在表单元素上创建双向数据绑定\n\n#### Text\n\n```\n<span>Message is: {{ message }}</span>\n<br>\n<input type=\"text\" v-model=\"message\" placeholder=\"edit me\">\n\n```\n\n#### Checkbox\n\n多个复选框，绑定到同一个数组\n\n```\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n<br>\n<span>Checked names: {{ checkedNames | json }}</span>\n```\n\n```\nnew Vue({\n  el: '...',\n  data: {\n    checkedNames: []\n  }\n})\n```\n\n#### Radio\n\n```\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n```\n\n#### Select\n\n - 单选，value为单个字符串\n\n ```\n<select v-model=\"selected\">\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n</select>\n<span>Selected: {{ selected }}</span>\n ```\n\n - 多选，value为一个数组\n\n ```\n <select v-model=\"selected\" multiple>\n\t  <option selected>A</option>\n\t  <option>B</option>\n\t  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ selected | json }}</span>\n ```\n\n#### 参数特性\n\n - lazy\n\n 在默认情况下，`v-model`是在`input`事件中同步输入框值和数据，可以添加一个`lazy`属性，从而在`change`事件中同步\n\n ```\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model=\"msg\" lazy>\n ```\n\n- debounce\n\n `debounce`设置一个最小延时，在每次敲击后延时同步输入框和数据，例如在输入过程中发送ajax请求时比较有用。`debounce`延迟写入底层数据，应当用`vm.$watch()`监听数据的变化。\n\n ```\n <input v-model=\"msg\" debounce=\"500\">\n ```\n\n `debounce`参数不会延迟DOM，若想延迟DOM事件，应当使用`debounce过滤器`。包装处理器，让它延迟执行，包装后的处理器将延迟`x`ms（默认为300ms）后执行，如果在延迟结束前再次调用，延时时长重置为`x`ms\n\n ```\n <input @keyup=\"onKeyup | debounce 500\">\n ```\n\n### 方法和事件处理器\n\n#### 方法处理器\n\n可以通过`v-on`指令监听DOM事件，事件监听程序都是写在`methods`属性中。在绑定方的时候，还可以传递参数，包括event对象，在HTML语句中需要使用`$event`进行传递。并且这个`$event`是原生的event对象，包含原生的event事件属性和方法。\n\n```\n<div id=\"example\">\n  <button v-on:click=\"greet($event, 'Vue.js')\">Greet</button>\n</div>\n```\n\n绑定一个事件处理方法`greet`\n\n```\nvar vm = new Vue({\n  el: '#example',\n  // 在 `methods` 对象中定义方法\n  methods: {\n    greet: function (event, msg) {\n      // 方法内 `this` 指向 vm\n      alert('Hello ' + msg + '!')\n      // `event` 是原生 DOM 事件\n      alert(event.target.tagName)\n    }\n  }\n})\n\n// 也可以在 JavaScript 代码中调用方法\nvm.greet() // -> 'Hello Vue.js!'\n```\n#### 事件修饰符\n\n在事件处理器中，通常需要使用到`event.stopPropagation()`和`event.preventDefault()`，在Vue.js中为`v-on`指令添加了`.stop`和`.prevent`两个命令修饰符\n\n```\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n\n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\">\n\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n\n<!-- 添加事件侦听器时使用 capture 模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n#### 按键修饰符\n\n在监听键盘事件时，经常需要检测keyCode。Vue.js允许为`v-on`添加按键修饰符\n\n```\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n全部按键的别名包括：\n\n- enter\n- tab\n- delete\n- esc\n- space\n- up\n- down\n- left\n- right\n\n### 组件\n\n组件（component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件的使用过程包括定义和注册的过程。组件在注册之后便可以在父实例中以自定义的元素的形式使用，不过要确保在初始化根实例之前注册了组件。而且自定义元素只是作为一个挂载点\n\n```\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n```\n// 定义\nvar MyComponent = Vue.extend({\n  template: '<div>A custom component!</div>'\n})\n\n// 注册\nVue.component('my-component', MyComponent)\n\n// 创建根实例\nnew Vue({\n  el: '#example'\n})\n```\n渲染为：\n\n```\n<div id=\"example\">\n  <div>A custom component!</div>\n</div>\n```\n\n#### 局部注册\n\n有点时候并不需要注册全局组件，可以只让组件用在其他组件内部，用`components`进行注册\n\n```\n//定义子组件\nvar child = Vue.extend({\n    template: '<div>this is child component </div>'\n});\n\n//定义父组件\nvar parent = Vue.extend({\n    template: '<div>this is parent component <child-component></child-component> </div>',\n    components: {\n        //此时子组件child-component只能在父组件中使用\n        'child-component': child\n    }\n});\n\n//注册父组件\nVue.component('parent-component', parent);\n```\n\n#### 模板解析\n\nVue模板是DOM模板，使用浏览器原生的解析器而不是自己实现一个，所以HTML元素对什么元素可以放在它里面是有限制的。常见的限制如下：\n\n- a 不能包含其它的交互元素（如按钮，链接）\n- ul 和 ol 只能直接包含 li\n- select 只能包含 option 和 optgroup\n- table 只能直接包含 thead, tbody, tfoot, tr, caption, col, colgroup\n- tr 只能直接包含 th 和 td\n\n#### 组件选项\n\n在组件内部也会使用数据变量，变量值也会存在data选项中，但是不同于Vue实例的data属性，组件内部的data属性应该是一个函数，在这个函数中返回一个新的对象，其中包含需要的属性名和属性值。\n\n ```\nvar MyComponent = Vue.extend({\n  data: function () {\n    return { a: 1 }\n  }\n})\n ```\n\n#### 使用props进行传值\n\n组件实例的作用域是孤立的，在子组件中不能直接使用父组件中的属性。可以使用props属性将数据传递给子组件。是传递字面量还是动态值通过是否使用`v-bind`指令来确定。\n\n```\nvar child = Vue.extend({\n    template: '<div>this is child component  {{attrA}} {{attrB}}</div>',\n    props: ['attrA', 'attrB']\n});\n\nvar parent = Vue.extend({\n    template: '<div>this is parent component {{a}} ' +\n              '<child-component v-bind:a=\"aa\" attr-a=\"attrA\" v-bind:attr-b=\"attrB\"></child-component>' +\n              '</div>',\n    components: {\n        'child-component': child\n    },\n    data: function () {\n        return {\n            attrA: dynamic  attrA',\n            attrB: 'dynamic attrB'\n        }\n    }\n});\n```\n\n渲染为：\n\n```\n<div>this is child component  attrA dynamic attrB</div>\n```\n**注意：子组件内部具有的属性不能和继承的属性相同，即不能在子组件的data和props中出现相同的变量名，否则程序会报错**\n\n#### 父子组件通信\n\n子组件可以通过`this.$parent`访问它的父组件，父组件有一个`this.$children`，包含子组件的列表。根实例的后代通过`this.$root`访问它。\n\n尽管可以访问到父链上的任意实例，不过子组件应该避免直接依赖父组件的数据，而是通过props属性进行传递，而且在子组件中也不要修改父组件中的状态，理想情况下只有组件自己才可以修改它的状态。\n\n#### 自定义事件\n\nVue.js实现了一个自定义的事件接口，用于在组件树中通信。这个事件系统独立于原声DOM事件，用法也不同。\n\n每个Vue实例都是一个事件触发器\n\n- 使用`$on`监听事件\n- 使用`$emit`在它上面触发事件\n- 使用`$dispatch`派发事件，事件沿着父链冒泡。**不同于DOM原生事件，Vue事件在冒泡过程中第一次触发回调后自动停止冒泡，除非回调函数明确返回`true`**\n- 使用`$broadcast`广播事件，事件向下传导给所有后代\n\n```\n<!-- 子组件模板 -->\n<template id=\"child-template\">\n  <input v-model=\"msg\">\n  <button v-on:click=\"notify\">Dispatch Event</button>\n</template>\n\n<!-- 父组件模板 -->\n<div id=\"events-example\">\n  <p>Messages: {{ messages | json }}</p>\n  <child></child>\n</div>\n```\n\n```\n// 注册子组件\n// 将当前消息派发出去\nVue.component('child', {\n  template: '#child-template',\n  data: function () {\n    return { msg: 'hello' }\n  },\n  methods: {\n    notify: function () {\n      if (this.msg.trim()) {\n        this.$dispatch('child-msg', this.msg)\n        this.msg = ''\n      }\n    }\n  }\n})\n\n// 初始化父组件\n// 将收到消息时将事件推入一个数组\nvar parent = new Vue({\n  el: '#events-example',\n  data: {\n    messages: []\n  },\n  // 在创建实例时 `events` 选项简单地调用 `$on`\n  events: {\n    'child-msg': function (msg) {\n      // 事件回调内的 `this` 自动绑定到注册它的实例上\n      this.messages.push(msg);\n    }\n  }\n})\n```\n\n#### 使用slot分发内容\n\n每个组件都有自己的作用域，父组件模板的内容在父组件作用域内编译，子组件模板的内容在子组件作用域内编译。如果要绑定一个指令打到组件的根节点上，应该按如下方式：\n\n```\nVue.component('child-component', {\n  // v-show指令有效，因为是在正确的作用域内\n  template: '<div v-show=\"someChildProperty\">Child</div>',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})\n```\n类似的，分发内容也是在父组件的作用域内编译。\n\n- slot\n\n 父组件的内容在渲染的时候会被抛弃，除非子组件包含了`slot`标签。如果子组件只包含一个`slot`，则父组件的内容将被添加到`slot`标签中；如果子组件具有多个`slot`标签，可以通过`slot`标签的`name`属性进行分发。在具有多个`slot`标签时，仍然可以有一个匿名的`slot`，它是默认的`slot`，作为找不到匹配的内容的`slot`。\n\n 子组件模板：\n\n ```\n <div>\n\t  <slot name=\"one\"></slot>\n\t  <slot></slot>\n\t  <slot name=\"two\"></slot>\n</div>\n ```\n\n 父组件模板：\n\n ```\n  <multi-insertion>\n\t  <p slot=\"one\">One</p>\n\t  <p slot=\"two\">Two</p>\n\t  <p>Default A</p>\n   </multi-insertion>\n ```\n\n 渲染为：\n\n ```\n   <div>\n\t  <p slot=\"one\">One</p>\n\t  <p>Default A</p>\n\t  <p slot=\"two\">Two</p>\n   </div>\n ```\n\n#### 编写可复用的组件\n\n在编写组件的时候，如果需要达到可复用的目的，应当定义一个清晰的公开接口。Vue.js组件的API来自三个部分：props、事件和slot\n\n- **props**允许外部环境传递数据给组件\n- **事件**允许组件触发外部环境的action\n- **slot**允许外部环境的内容插入到组件内部结构中\n\n通常一个组件模板的清晰结构如下：\n\n```\n <my-component\n  :foo=\"baz\"\n  :bar=\"qux\"\n  @event-a=\"doThis\"\n  @event-b=\"doThat\">\n  <!-- content -->\n  <img slot=\"icon\" src=\"...\">\n  <p slot=\"main-text\">Hello!</p>\n</my-component>\n```\n\n### 自定义指令\n\n除了Vue内置的指令外，还可以自定义指令。自定义指令提供一种机制将数据变化映射为DOM行为。通过`Vue.directive(id, definition)`方法注册一个全局自定义指令，它接收两个参数，指令ID和定义对象。在HTML元素中使用自定义指令时，需要添加`v-`前缀\n\n#### 钩子函数\n\n定义对象中定义了几个可选的钩子函数\n\n- bind：只调用一次，在指令第一次绑定到元素上时调用\n- update：在bind后立即以初始值为参数第一次调用，以后每次绑定的值发生变化时，触发一次，参数为新值和旧值\n- unbind：只调用一次，在指令元素上解绑时调用\n\n```\nVue.directive('my-directive', {\n\t  bind: function () {\n\t    // 准备工作\n\t    // 例如，添加事件处理器或只需要运行一次的高耗任务\n\t  },\n\t  update: function (newValue, oldValue) {\n\t    // 值更新时的工作\n\t    // 也会以初始值为参数调用一次\n\t  },\n\t  unbind: function () {\n\t    // 清理工作\n\t    // 例如，删除 bind() 添加的事件监听器\n\t  }\n})\n```\n\n#### 指令实例属性\n\n在钩子函数内`this`执行这个指令对象。这个对象暴露了一些实例属性：\n\n- **el**：指令绑定的元素\n- **vm**：拥有该指令的上下文ViewModel\n- **expression**：指令表达式\n- **arg**：指令参数\n- **name**：指令名称\n- **modifiers**：指令修饰符对象\n- **descriptor**：指令解析的结果对象\n\n**注意:这些属性我们应该将其视为可读的，不要修改他们。可以添加自定义属性，但不要覆盖已有的内部属性**\n\n```\n<div id=\"demo\" v-demo:hello.a.b=\"msg\"></div>\n```\n\n```\n Vue.directive('demo', {\n\t  bind: function () {\n\t    console.log('demo bound!')\n\t  },\n\t  update: function (value) {\n\t    this.el.innerHTML =\n\t      'name - '       + this.name + '<br>' +\n\t      'expression - ' + this.expression + '<br>' +\n\t      'argument - '   + this.arg + '<br>' +\n\t      'modifiers - '  + JSON.stringify(this.modifiers) + '<br>' +\n\t      'value - '      + value\n\t  }\n});\nvar demo = new Vue({\n\t  el: '#demo',\n\t  data: {\n\t    msg: 'hello!'\n\t  }\n})\n```\n\n结果为：\n\n```\n name - demo\n expression - msg\n argument - hello\n modifiers - {a: true, b: true}\n value - hello!\n```\n\n#### 高级选项-params\n\n类似于自定义组件的`props`属性，自定义指令提供`params`属性，指令一个数组列表，Vue编译器将自动提取绑定元素的这些特性。而且`params`还支持动态属性，另外还可以指定一个回调，在值变化时调用\n\n```\n<div v-example v-bind:a=\"someValue\"></div>\n```\n\n```\nVue.directive('example', {\n  params: ['a'],\n  paramWatchers: {\n    a: function (val, oldVal) {\n      console.log('a changed!')\n    }\n  }\n})\n```\n\n### 自定义过滤器\n类似于自定义指令，可以通过`Vue.filter()`注册一个全局自定义过滤器，接收两个参数：过滤器ID和过滤器函数，过滤器函数以值为参数，返回转换后的值\n\n自定义过滤器可以接收任意数量的参数，第一个参数为表达式的值，从第二个参数开始可以传递任意值，字面量或者计算表达式\n\n```\nVue.filter('wrap', function (value, begin, end) {\n    return begin + value + end\n});\n\nvar vm = new Vue({\n    el: '#demo',\n    data: {\n   \t   after: 'last'\n    }\n});\n```\n\n```\n<!-- 'hello' => 'before hello after' -->\n<span v-text=\"message | wrap 'before' after\"></span>\n```\n\n\n\n\n\n\n\n","slug":"vuejs","published":1,"updated":"2017-05-25T00:54:35.717Z","photos":[],"link":"","_id":"cj4sal69v0013ek5ba2bbxjqb","content":"<p>Vue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结,主要包括以下几个方面:<br>1.数据绑定<br>2.指令<br>3.组件<br>4.事件<br>5.过滤器</p>\n<a id=\"more\"></a>\n<h2 id=\"Vue基础\"><a href=\"#Vue基础\" class=\"headerlink\" title=\"Vue基础\"></a>Vue基础</h2><h3 id=\"Vue实例\"><a href=\"#Vue实例\" class=\"headerlink\" title=\"Vue实例\"></a>Vue实例</h3><h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>通过构造函数可以创建一个Vue的根实例：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"type\">Vue</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>一个Vue的实例是MVVM模型中的ViewModel，在实例化时，需要传入一个选项对象，其中包括挂载元素、数据、模板、方法，生命周期的钩子函数等</p>\n<h4 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h4><p><img src=\"http://p0.meituan.net/dpnewvc/43cca72c865daf323a732de2c8924743116787.png\" alt=\"实例生命周期\"></p>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Vue.js的模板是基于DOM实现的，Vue的模板都是可解析的有效HTML，且通过一些特性做了增强。</p>\n<h4 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h4><ul>\n<li>文本</li>\n</ul>\n<p>最基本的数据绑定形式就是文本插值，使用Mustache语法-双大括号：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: </span><span class=\"template-variable\">&#123;&#123; msg &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>Mustache标签会被数据对象中的msg值替换，每当属性值发生变化对应也会更新到DOM上</p>\n<ul>\n<li>原始的HTML</li>\n</ul>\n<p>有的时候要输出真正的HTML字符串，则需要用到三Mustache标签，此时的数据绑定会被忽略</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;&#123; raw_html &#125;&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><strong>注意：在网站上动态渲染任意的HTML是非常危险的，容易导致XSS攻击。因此只对可信的HTML使用插值，永不用于用户提交的内容</strong></p>\n<ul>\n<li>HTML特性</li>\n</ul>\n<p>Mustache标签也可以用在HTML属性中</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"item-&#123;&#123; id &#125;&#125;\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<p>但是在Vue.js指令和特殊特性内不能使用插值</p>\n<h4 id=\"绑定表达式\"><a href=\"#绑定表达式\" class=\"headerlink\" title=\"绑定表达式\"></a>绑定表达式</h4><p>放在Mustache标签内的文本成为绑定表达式，可以由一个简单的Javascript表达式和可选的一个或多个过滤器组成</p>\n<ul>\n<li><p>javascript表达式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + <span class=\"number\">1</span> &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message.split(<span class=\"name\">''</span>).reverse().join(<span class=\"name\">''</span>) &#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>Vue.js允许在表达式后添加可选的过滤器，以‘管道符’形式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<p>上述语句表示将<code>message</code>的值通过内置的<code>capitalize</code>过滤器，这个过滤器其实是一个函数，返回大写的值</p>\n<p>过滤器可以串联</p>\n <figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<p>同时可以接收参数</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA <span class=\"string\">'arg1'</span> arg2 &#125;&#125;</div></pre></td></tr></table></figure>\n<p>过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。这里，字符串 ‘arg1’ 将传给过滤器作为第二个参数，表达式 arg2 的值在计算出来之后作为第三个参数。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是特殊的带有前缀<code>v-</code>特性。指令的值限定为<strong>绑定表达式</strong>，它的职责是当其表达式的值改变时把某些行为应用到DOM上。</p>\n<ul>\n<li><p>v-if、v-show与v-else</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"greeting\"</span>&gt;Hello!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>这里通过<code>v-if</code>指令将表达式<code>greeting</code>的值真假插入/删除p元素。</p>\n</li>\n</ul>\n<p> 上述指令用于条件渲染，根据绑定的表达式结果确定是否要渲染HTML元素。<code>v-else</code> 元素必须立即跟在 <code>v-if</code> 或 <code>v-show</code> 元素的后面——否则它不能被识别。</p>\n<ul>\n<li><p>区别</p>\n<p><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件</p>\n<p><code>v-show</code> 绑定的元素始终被编译并保留，只是简单地基于 CSS 切换，另外它不支持<code>&lt;template&gt;</code>标签</p>\n<p>一般来说，<code>v-if</code> 有更高的切换消耗而 <code>v-show</code>有更高的初始渲染消耗。因此，如果需要频繁切换 <code>v-show</code> 较好，如果在运行时条件不大可能改变 <code>v-if</code> 较好</p>\n</li>\n</ul>\n<ul>\n<li><p>v-on</p>\n<p>利用<code>v-on</code>指令用于监听DOM事件，例如：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code></p>\n<p>另外<code>v-on</code>指令还可以缩写成<code>@</code>符号表示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-bind</p>\n<p>利用<code>v-bind</code>指令用于响应的更新HTML属性，例如：<code>&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</code></p>\n<p>另外<code>v-bind</code>指令还可以缩写为<code>:</code>表示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-model</p>\n<p>此指令用于表单元素上，例如常见的input，select，textarea，radio，checkbox等</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: <span class=\"template-variable\">&#123;&#123; selected | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-for</p>\n<p><code>v-for</code>指令基于一个数组渲染一个列表。还有一个特殊的变量<code>$index</code>，它是当前数组元素的索引</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;ul id=<span class=\"string\">\"example-1\"</span>&gt;</div><div class=\"line\">  &lt;li v-for=<span class=\"string\">\"item in items\"</span>&gt;</div><div class=\"line\">     &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; $index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var example1 = new Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    items: [</div><div class=\"line\">      &#123; message: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; message: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Vue.js封装了数组的变异方法，例如<code>push</code>,<code>pop</code>,<code>shift</code>, <code>unshift</code>等和非变异方法，例如<code>filter</code>,<code>concat</code>等，如果是非变异的方法，则只需要直接使用返回的新数组替换原来的数组即可</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">example1<span class=\"selector-class\">.items</span> = example1<span class=\"selector-class\">.items</span><span class=\"selector-class\">.filter</span>(function (item) &#123;</div><div class=\"line\">     return item<span class=\"selector-class\">.message</span><span class=\"selector-class\">.match</span>(/Foo/)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>track-by</li>\n</ul>\n<p>列表在渲染的过程中通过唯一的键进行追踪，可以通过数组中每个值的唯一id进行标识或者通过<code>$index</code>，这种模式下可以处理数组中重复的值</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in items\"</span> track-by=<span class=\"string\">\"$index\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- content --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>在Vue.js中将绑定表达式限定为一个表达式，如果需要多余一个表达式的逻辑，应当使用计算属性。一个比较常见的应用方式是b属性的值依赖于a属性的值，则b应当设置为计算属性。计算属性同样具有getter和setter方法</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    lastName: <span class=\"string\">'Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  computed: &#123;</div><div class=\"line\">      fullName: &#123;</div><div class=\"line\">\t    <span class=\"comment\">// getter</span></div><div class=\"line\">\t    <span class=\"keyword\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t     \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">\t    &#125;,</div><div class=\"line\">\t    <span class=\"comment\">// setter</span></div><div class=\"line\">\t    <span class=\"keyword\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(newValue)</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</div><div class=\"line\">\t    &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>此时的<code>vm. fullName</code>依赖于<code>vm. firstName</code>和<code>vm. lastName</code>，所以当<code>vm. firstName</code>和<code>vm. lastName</code>的值改变的时候，<code>vm. fullName</code>值也会相应的进行改变。同样的如果调用<code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会有相应更新</p>\n<h3 id=\"Class与style绑定\"><a href=\"#Class与style绑定\" class=\"headerlink\" title=\"Class与style绑定\"></a>Class与style绑定</h3><p>数据绑定的一个常见需求是操作元素的class和它的内联样式。因为它们都是HTML元素的属性，可以用<code>v-bind</code>来处理它们：只需要计算出表达式最终字符串。在<code>v-bind</code>用于绑定class和style时，Vue.js专门对其进行增强，使得表达式的结果类型除了字符串外，还可以是对象或者数组。</p>\n<p><strong>注意：尽管可以用Mustache标签绑定class，例如class=，但是不推荐和v-bind:class=className这种方式混用。两者只能选其一</strong></p>\n<h4 id=\"绑定class\"><a href=\"#绑定class\" class=\"headerlink\" title=\"绑定class\"></a>绑定class</h4><ul>\n<li>对象语法</li>\n</ul>\n<p>可以给<code>v-bind:class</code>传递一个对象，以动态的切换class。注意<code>v-bind:class</code>可以和普通的<code>class</code>共存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"static\"</span> v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; 'class-a': isA, 'class-b': isB &#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">data:</span> &#123;</div><div class=\"line\"><span class=\"attr\">  isA:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">  isB:</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"static class-a\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>数组语法</li>\n</ul>\n<p>可以把一个数组传递给<code>v-bind:class</code>，以应用一个class列表</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-bind:<span class=\"built_in\">class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-tag\">data</span>: &#123;</div><div class=\"line\">  <span class=\"attribute\">classA</span>: <span class=\"string\">'class-a'</span>,</div><div class=\"line\">  classB: <span class=\"string\">'class-b'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a class-b\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"绑定style内联样式\"><a href=\"#绑定style内联样式\" class=\"headerlink\" title=\"绑定style内联样式\"></a>绑定style内联样式</h4><p><code>v-bind:style</code>与<code>v-bind:class</code>使用方式相同，可以使用对象语法和数组语法。css属性名可以采用驼峰式或者短横线分割命名。</p>\n<ul>\n<li><p>对象语法</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-<span class=\"keyword\">bind</span>:style=<span class=\"string\">\"styleObject\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"selector-tag\">data</span>: &#123;</div><div class=\"line\">\t  <span class=\"attribute\">styleObject</span>: &#123;</div><div class=\"line\">\t      color: <span class=\"string\">'red'</span>,</div><div class=\"line\">\t      fontSize: <span class=\"string\">'13px'</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组语法</p>\n<p>可以将多个样式对象应用到一个元素上<br><code>&lt;div v-bind:style=&quot;[AStyle, BStyle]&quot;&gt;</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">AStyle</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"selector-tag\">BStyle</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">fontSize</span>: <span class=\"string\">'22px'</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"表单控件绑定\"><a href=\"#表单控件绑定\" class=\"headerlink\" title=\"表单控件绑定\"></a>表单控件绑定</h3><p>可以通过<code>v-model</code>指令在表单元素上创建双向数据绑定</p>\n<h4 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h4><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message is: </span><span class=\"template-variable\">&#123;&#123; message &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Checkbox\"><a href=\"#Checkbox\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h4><p>多个复选框，绑定到同一个数组</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"jack\"</span> value=<span class=\"string\">\"Jack\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"jack\"</span>&gt;Jack&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"john\"</span> value=<span class=\"string\">\"John\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"john\"</span>&gt;John&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"mike\"</span> value=<span class=\"string\">\"Mike\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"mike\"</span>&gt;Mike&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;span&gt;Checked names: &#123;&#123; checkedNames | json &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Vue</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">checkedNames</span>: []</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h4><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> id=<span class=\"string\">\"one\"</span> value=<span class=\"string\">\"One\"</span> v-model=<span class=\"string\">\"picked\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"one\"</span>&gt;<span class=\"keyword\">One</span>&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> id=<span class=\"string\">\"two\"</span> value=<span class=\"string\">\"Two\"</span> v-model=<span class=\"string\">\"picked\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"two\"</span>&gt;<span class=\"keyword\">Two</span>&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h4><ul>\n<li><p>单选，value为单个字符串</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: <span class=\"template-variable\">&#123;&#123; selected &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>多选，value为一个数组</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: <span class=\"template-variable\">&#123;&#123; selected | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"参数特性\"><a href=\"#参数特性\" class=\"headerlink\" title=\"参数特性\"></a>参数特性</h4><ul>\n<li><p>lazy</p>\n<p>在默认情况下，<code>v-model</code>是在<code>input</code>事件中同步输入框值和数据，可以添加一个<code>lazy</code>属性，从而在<code>change</code>事件中同步</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 在 \"change\" 而不是 \"input\" 事件中更新 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">lazy</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>debounce</p>\n<p><code>debounce</code>设置一个最小延时，在每次敲击后延时同步输入框和数据，例如在输入过程中发送ajax请求时比较有用。<code>debounce</code>延迟写入底层数据，应当用<code>vm.$watch()</code>监听数据的变化。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">input</span> v-model=<span class=\"string\">\"msg\"</span> debounce=<span class=\"string\">\"500\"</span>&gt;</div></pre></td></tr></table></figure>\n<p><code>debounce</code>参数不会延迟DOM，若想延迟DOM事件，应当使用<code>debounce过滤器</code>。包装处理器，让它延迟执行，包装后的处理器将延迟<code>x</code>ms（默认为300ms）后执行，如果在延迟结束前再次调用，延时时长重置为<code>x</code>ms</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">input</span> @keyup=<span class=\"string\">\"onKeyup | debounce 500\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"方法和事件处理器\"><a href=\"#方法和事件处理器\" class=\"headerlink\" title=\"方法和事件处理器\"></a>方法和事件处理器</h3><h4 id=\"方法处理器\"><a href=\"#方法处理器\" class=\"headerlink\" title=\"方法处理器\"></a>方法处理器</h4><p>可以通过<code>v-on</code>指令监听DOM事件，事件监听程序都是写在<code>methods</code>属性中。在绑定方的时候，还可以传递参数，包括event对象，在HTML语句中需要使用<code>$event</code>进行传递。并且这个<code>$event</code>是原生的event对象，包含原生的event事件属性和方法。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;button v-<span class=\"keyword\">on</span>:click=<span class=\"string\">\"greet($event, 'Vue.js')\"</span>&gt;Greet&lt;/button&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<p>绑定一个事件处理方法<code>greet</code></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event, msg)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 方法内 `this` 指向 vm</span></div><div class=\"line\">      alert(<span class=\"string\">'Hello '</span> + msg + <span class=\"string\">'!'</span>)</div><div class=\"line\">      <span class=\"comment\">// `event` 是原生 DOM 事件</span></div><div class=\"line\">      alert(event.target.tagName)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以在 JavaScript 代码中调用方法</span></div><div class=\"line\">vm.greet() <span class=\"comment\">// -&gt; 'Hello Vue.js!'</span></div></pre></td></tr></table></figure>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><p>在事件处理器中，通常需要使用到<code>event.stopPropagation()</code>和<code>event.preventDefault()</code>，在Vue.js中为<code>v-on</code>指令添加了<code>.stop</code>和<code>.prevent</code>两个命令修饰符</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用 capture 模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>在监听键盘事件时，经常需要检测keyCode。Vue.js允许为<code>v-on</code>添加按键修饰符</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>全部按键的别名包括：</p>\n<ul>\n<li>enter</li>\n<li>tab</li>\n<li>delete</li>\n<li>esc</li>\n<li>space</li>\n<li>up</li>\n<li>down</li>\n<li>left</li>\n<li>right</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>组件（component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件的使用过程包括定义和注册的过程。组件在注册之后便可以在父实例中以自定义的元素的形式使用，不过要确保在初始化根实例之前注册了组件。而且自定义元素只是作为一个挂载点</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;<span class=\"keyword\">my</span>-component&gt;&lt;/<span class=\"keyword\">my</span>-component&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  template: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, MyComponent)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;A custom component!&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h4><p>有点时候并不需要注册全局组件，可以只让组件用在其他组件内部，用<code>components</code>进行注册</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义子组件</span></div><div class=\"line\"><span class=\"built_in\">var</span> child = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'&lt;div&gt;this is child component &lt;/div&gt;'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义父组件</span></div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"keyword\">parent</span> = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'&lt;div&gt;this is parent component &lt;child-component&gt;&lt;/child-component&gt; &lt;/div&gt;'</span>,</div><div class=\"line\">    components: &#123;</div><div class=\"line\">        <span class=\"comment\">//此时子组件child-component只能在父组件中使用</span></div><div class=\"line\">        <span class=\"string\">'child-component'</span>: child</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册父组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'parent-component'</span>, <span class=\"keyword\">parent</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"模板解析\"><a href=\"#模板解析\" class=\"headerlink\" title=\"模板解析\"></a>模板解析</h4><p>Vue模板是DOM模板，使用浏览器原生的解析器而不是自己实现一个，所以HTML元素对什么元素可以放在它里面是有限制的。常见的限制如下：</p>\n<ul>\n<li>a 不能包含其它的交互元素（如按钮，链接）</li>\n<li>ul 和 ol 只能直接包含 li</li>\n<li>select 只能包含 option 和 optgroup</li>\n<li>table 只能直接包含 thead, tbody, tfoot, tr, caption, col, colgroup</li>\n<li>tr 只能直接包含 th 和 td</li>\n</ul>\n<h4 id=\"组件选项\"><a href=\"#组件选项\" class=\"headerlink\" title=\"组件选项\"></a>组件选项</h4><p>在组件内部也会使用数据变量，变量值也会存在data选项中，但是不同于Vue实例的data属性，组件内部的data属性应该是一个函数，在这个函数中返回一个新的对象，其中包含需要的属性名和属性值。</p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyComponent = Vue.<span class=\"built_in\">extend</span>(&#123;</div><div class=\"line\">  dat<span class=\"variable\">a:</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"variable\">a:</span> <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"使用props进行传值\"><a href=\"#使用props进行传值\" class=\"headerlink\" title=\"使用props进行传值\"></a>使用props进行传值</h4><p>组件实例的作用域是孤立的，在子组件中不能直接使用父组件中的属性。可以使用props属性将数据传递给子组件。是传递字面量还是动态值通过是否使用<code>v-bind</code>指令来确定。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"type\">Vue</span>.extend(&#123;</div><div class=\"line\">    <span class=\"keyword\">template</span>: '&lt;<span class=\"keyword\">div</span>&gt;this <span class=\"keyword\">is</span> child component  &#123;&#123;attrA&#125;&#125; &#123;&#123;attrB&#125;&#125;&lt;/<span class=\"keyword\">div</span>&gt;',</div><div class=\"line\">    props: ['attrA', 'attrB']</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"type\">Vue</span>.extend(&#123;</div><div class=\"line\">    <span class=\"keyword\">template</span>: '&lt;<span class=\"keyword\">div</span>&gt;this <span class=\"keyword\">is</span> parent component &#123;&#123;a&#125;&#125; ' +</div><div class=\"line\">              '&lt;child-component v-<span class=\"keyword\">bind</span>:a=<span class=\"string\">\"aa\"</span> attr-a=<span class=\"string\">\"attrA\"</span> v-<span class=\"keyword\">bind</span>:attr-b=<span class=\"string\">\"attrB\"</span>&gt;&lt;/child-component&gt;' +</div><div class=\"line\">              '&lt;/<span class=\"keyword\">div</span>&gt;',</div><div class=\"line\">    components: &#123;</div><div class=\"line\">        'child-component': child</div><div class=\"line\">    &#125;,</div><div class=\"line\">    data: function () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            attrA: dynamic  attrA',</div><div class=\"line\">            attrB: 'dynamic attrB'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;<span class=\"keyword\">this</span> <span class=\"keyword\">is</span> child component  attrA <span class=\"keyword\">dynamic</span> attrB&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>注意：子组件内部具有的属性不能和继承的属性相同，即不能在子组件的data和props中出现相同的变量名，否则程序会报错</strong></p>\n<h4 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h4><p>子组件可以通过<code>this.$parent</code>访问它的父组件，父组件有一个<code>this.$children</code>，包含子组件的列表。根实例的后代通过<code>this.$root</code>访问它。</p>\n<p>尽管可以访问到父链上的任意实例，不过子组件应该避免直接依赖父组件的数据，而是通过props属性进行传递，而且在子组件中也不要修改父组件中的状态，理想情况下只有组件自己才可以修改它的状态。</p>\n<h4 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h4><p>Vue.js实现了一个自定义的事件接口，用于在组件树中通信。这个事件系统独立于原声DOM事件，用法也不同。</p>\n<p>每个Vue实例都是一个事件触发器</p>\n<ul>\n<li>使用<code>$on</code>监听事件</li>\n<li>使用<code>$emit</code>在它上面触发事件</li>\n<li>使用<code>$dispatch</code>派发事件，事件沿着父链冒泡。<strong>不同于DOM原生事件，Vue事件在冒泡过程中第一次触发回调后自动停止冒泡，除非回调函数明确返回<code>true</code></strong></li>\n<li>使用<code>$broadcast</code>广播事件，事件向下传导给所有后代</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 子组件模板 --&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child-template\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"notify\"</span>&gt;</span>Dispatch Event<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 父组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"events-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Messages: <span class=\"template-variable\">&#123;&#123; messages | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册子组件</span></div><div class=\"line\"><span class=\"comment\">// 将当前消息派发出去</span></div><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"string\">'#child-template'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attribute\">msg</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">notify</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.msg.trim()) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$dispatch(<span class=\"string\">'child-msg'</span>, <span class=\"keyword\">this</span>.msg)</div><div class=\"line\">        <span class=\"keyword\">this</span>.msg = <span class=\"string\">''</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化父组件</span></div><div class=\"line\"><span class=\"comment\">// 将收到消息时将事件推入一个数组</span></div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">parent</span> = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attribute\">el</span>: <span class=\"string\">'#events-example'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">messages</span>: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// 在创建实例时 `events` 选项简单地调用 `$on`</span></div><div class=\"line\">  <span class=\"attribute\">events</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'child-msg'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 事件回调内的 `this` 自动绑定到注册它的实例上</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.messages.push(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"使用slot分发内容\"><a href=\"#使用slot分发内容\" class=\"headerlink\" title=\"使用slot分发内容\"></a>使用slot分发内容</h4><p>每个组件都有自己的作用域，父组件模板的内容在父组件作用域内编译，子组件模板的内容在子组件作用域内编译。如果要绑定一个指令打到组件的根节点上，应该按如下方式：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// v-show指令有效，因为是在正确的作用域内</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      someChildProperty: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>类似的，分发内容也是在父组件的作用域内编译。</p>\n<ul>\n<li><p>slot</p>\n<p>父组件的内容在渲染的时候会被抛弃，除非子组件包含了<code>slot</code>标签。如果子组件只包含一个<code>slot</code>，则父组件的内容将被添加到<code>slot</code>标签中；如果子组件具有多个<code>slot</code>标签，可以通过<code>slot</code>标签的<code>name</code>属性进行分发。在具有多个<code>slot</code>标签时，仍然可以有一个匿名的<code>slot</code>，它是默认的<code>slot</code>，作为找不到匹配的内容的<code>slot</code>。</p>\n<p>子组件模板：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"one\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>父组件模板：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">multi-insertion</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Default A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">multi-insertion</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Default A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"编写可复用的组件\"><a href=\"#编写可复用的组件\" class=\"headerlink\" title=\"编写可复用的组件\"></a>编写可复用的组件</h4><p>在编写组件的时候，如果需要达到可复用的目的，应当定义一个清晰的公开接口。Vue.js组件的API来自三个部分：props、事件和slot</p>\n<ul>\n<li><strong>props</strong>允许外部环境传递数据给组件</li>\n<li><strong>事件</strong>允许组件触发外部环境的action</li>\n<li><strong>slot</strong>允许外部环境的内容插入到组件内部结构中</li>\n</ul>\n<p>通常一个组件模板的清晰结构如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">my-component</span></span></div><div class=\"line\">  <span class=\"attr\">:foo</span>=<span class=\"string\">\"baz\"</span></div><div class=\"line\">  <span class=\"attr\">:bar</span>=<span class=\"string\">\"qux\"</span></div><div class=\"line\">  @<span class=\"attr\">event-a</span>=<span class=\"string\">\"doThis\"</span></div><div class=\"line\">  @<span class=\"attr\">event-b</span>=<span class=\"string\">\"doThat\"</span>&gt;</div><div class=\"line\">  <span class=\"comment\">&lt;!-- content --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><p>除了Vue内置的指令外，还可以自定义指令。自定义指令提供一种机制将数据变化映射为DOM行为。通过<code>Vue.directive(id, definition)</code>方法注册一个全局自定义指令，它接收两个参数，指令ID和定义对象。在HTML元素中使用自定义指令时，需要添加<code>v-</code>前缀</p>\n<h4 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h4><p>定义对象中定义了几个可选的钩子函数</p>\n<ul>\n<li>bind：只调用一次，在指令第一次绑定到元素上时调用</li>\n<li>update：在bind后立即以初始值为参数第一次调用，以后每次绑定的值发生变化时，触发一次，参数为新值和旧值</li>\n<li>unbind：只调用一次，在指令元素上解绑时调用</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">\t  bind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 准备工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 例如，添加事件处理器或只需要运行一次的高耗任务</span></div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  update: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(newValue, oldValue)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 值更新时的工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 也会以初始值为参数调用一次</span></div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  unbind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 清理工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 例如，删除 bind() 添加的事件监听器</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"指令实例属性\"><a href=\"#指令实例属性\" class=\"headerlink\" title=\"指令实例属性\"></a>指令实例属性</h4><p>在钩子函数内<code>this</code>执行这个指令对象。这个对象暴露了一些实例属性：</p>\n<ul>\n<li><strong>el</strong>：指令绑定的元素</li>\n<li><strong>vm</strong>：拥有该指令的上下文ViewModel</li>\n<li><strong>expression</strong>：指令表达式</li>\n<li><strong>arg</strong>：指令参数</li>\n<li><strong>name</strong>：指令名称</li>\n<li><strong>modifiers</strong>：指令修饰符对象</li>\n<li><strong>descriptor</strong>：指令解析的结果对象</li>\n</ul>\n<p><strong>注意:这些属性我们应该将其视为可读的，不要修改他们。可以添加自定义属性，但不要覆盖已有的内部属性</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">\"demo\"</span> v-demo:hello<span class=\"selector-class\">.a</span><span class=\"selector-class\">.b</span>=<span class=\"string\">\"msg\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Vue.directive(<span class=\"string\">'demo'</span>, &#123;</div><div class=\"line\">\t  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'demo bound!'</span>)</div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.el.innerHTML =</div><div class=\"line\">\t      <span class=\"string\">'name - '</span>       + <span class=\"keyword\">this</span>.name + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'expression - '</span> + <span class=\"keyword\">this</span>.expression + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'argument - '</span>   + <span class=\"keyword\">this</span>.arg + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'modifiers - '</span>  + <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.modifiers) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'value - '</span>      + value</div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\t  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">\t  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">\t    <span class=\"attr\">msg</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">name</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">demo</span></div><div class=\"line\"><span class=\"selector-tag\">expression</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">msg</span></div><div class=\"line\"><span class=\"selector-tag\">argument</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">hello</span></div><div class=\"line\"><span class=\"selector-tag\">modifiers</span> <span class=\"selector-tag\">-</span> &#123;<span class=\"attribute\">a</span>: true, b: true&#125;</div><div class=\"line\"><span class=\"selector-tag\">value</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">hello</span>!</div></pre></td></tr></table></figure>\n<h4 id=\"高级选项-params\"><a href=\"#高级选项-params\" class=\"headerlink\" title=\"高级选项-params\"></a>高级选项-params</h4><p>类似于自定义组件的<code>props</code>属性，自定义指令提供<code>params</code>属性，指令一个数组列表，Vue编译器将自动提取绑定元素的这些特性。而且<code>params</code>还支持动态属性，另外还可以指定一个回调，在值变化时调用</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-example v-bind:<span class=\"keyword\">a</span>=<span class=\"string\">\"someValue\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  param<span class=\"variable\">s:</span> [<span class=\"string\">'a'</span>],</div><div class=\"line\">  paramWatcher<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">    <span class=\"variable\">a:</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, oldVal)</span> &#123;</span></div><div class=\"line\">      console.<span class=\"built_in\">log</span>(<span class=\"string\">'a changed!'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>类似于自定义指令，可以通过<code>Vue.filter()</code>注册一个全局自定义过滤器，接收两个参数：过滤器ID和过滤器函数，过滤器函数以值为参数，返回转换后的值</p>\n<p>自定义过滤器可以接收任意数量的参数，第一个参数为表达式的值，从第二个参数开始可以传递任意值，字面量或者计算表达式</p>\n<figure class=\"highlight ocaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Vue</span>.filter(<span class=\"symbol\">'wrap'</span>, <span class=\"keyword\">function</span> (<span class=\"keyword\">value</span>, <span class=\"keyword\">begin</span>, <span class=\"keyword\">end</span>) &#123;</div><div class=\"line\">    return <span class=\"keyword\">begin</span> + <span class=\"keyword\">value</span> + <span class=\"keyword\">end</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var vm = <span class=\"keyword\">new</span> <span class=\"type\">Vue</span>(&#123;</div><div class=\"line\">    el: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">   \t   after: <span class=\"symbol\">'last'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 'hello' =&gt; 'before hello after' --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"message | wrap 'before' after\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"<p>Vue作为一个前端轻量级的MVVM框架有其独到之处,本文主要针对Vue1.0版本的官方文档进行梳理总结,主要包括以下几个方面:<br>1.数据绑定<br>2.指令<br>3.组件<br>4.事件<br>5.过滤器</p>","more":"<h2 id=\"Vue基础\"><a href=\"#Vue基础\" class=\"headerlink\" title=\"Vue基础\"></a>Vue基础</h2><h3 id=\"Vue实例\"><a href=\"#Vue实例\" class=\"headerlink\" title=\"Vue实例\"></a>Vue实例</h3><h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>通过构造函数可以创建一个Vue的根实例：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> <span class=\"type\">Vue</span>(&#123;</div><div class=\"line\">  <span class=\"comment\">// 选项</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>一个Vue的实例是MVVM模型中的ViewModel，在实例化时，需要传入一个选项对象，其中包括挂载元素、数据、模板、方法，生命周期的钩子函数等</p>\n<h4 id=\"实例生命周期\"><a href=\"#实例生命周期\" class=\"headerlink\" title=\"实例生命周期\"></a>实例生命周期</h4><p><img src=\"http://p0.meituan.net/dpnewvc/43cca72c865daf323a732de2c8924743116787.png\" alt=\"实例生命周期\"></p>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Vue.js的模板是基于DOM实现的，Vue的模板都是可解析的有效HTML，且通过一些特性做了增强。</p>\n<h4 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h4><ul>\n<li>文本</li>\n</ul>\n<p>最基本的数据绑定形式就是文本插值，使用Mustache语法-双大括号：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: </span><span class=\"template-variable\">&#123;&#123; msg &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>Mustache标签会被数据对象中的msg值替换，每当属性值发生变化对应也会更新到DOM上</p>\n<ul>\n<li>原始的HTML</li>\n</ul>\n<p>有的时候要输出真正的HTML字符串，则需要用到三Mustache标签，此时的数据绑定会被忽略</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;&#123; raw_html &#125;&#125;</span><span class=\"xml\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><strong>注意：在网站上动态渲染任意的HTML是非常危险的，容易导致XSS攻击。因此只对可信的HTML使用插值，永不用于用户提交的内容</strong></p>\n<ul>\n<li>HTML特性</li>\n</ul>\n<p>Mustache标签也可以用在HTML属性中</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"item-&#123;&#123; id &#125;&#125;\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<p>但是在Vue.js指令和特殊特性内不能使用插值</p>\n<h4 id=\"绑定表达式\"><a href=\"#绑定表达式\" class=\"headerlink\" title=\"绑定表达式\"></a>绑定表达式</h4><p>放在Mustache标签内的文本成为绑定表达式，可以由一个简单的Javascript表达式和可选的一个或多个过滤器组成</p>\n<ul>\n<li><p>javascript表达式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + <span class=\"number\">1</span> &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; message.split(<span class=\"name\">''</span>).reverse().join(<span class=\"name\">''</span>) &#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><p>Vue.js允许在表达式后添加可选的过滤器，以‘管道符’形式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<p>上述语句表示将<code>message</code>的值通过内置的<code>capitalize</code>过滤器，这个过滤器其实是一个函数，返回大写的值</p>\n<p>过滤器可以串联</p>\n <figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure>\n<p>同时可以接收参数</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA <span class=\"string\">'arg1'</span> arg2 &#125;&#125;</div></pre></td></tr></table></figure>\n<p>过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。这里，字符串 ‘arg1’ 将传给过滤器作为第二个参数，表达式 arg2 的值在计算出来之后作为第三个参数。</p>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是特殊的带有前缀<code>v-</code>特性。指令的值限定为<strong>绑定表达式</strong>，它的职责是当其表达式的值改变时把某些行为应用到DOM上。</p>\n<ul>\n<li><p>v-if、v-show与v-else</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"greeting\"</span>&gt;Hello!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>这里通过<code>v-if</code>指令将表达式<code>greeting</code>的值真假插入/删除p元素。</p>\n</li>\n</ul>\n<p> 上述指令用于条件渲染，根据绑定的表达式结果确定是否要渲染HTML元素。<code>v-else</code> 元素必须立即跟在 <code>v-if</code> 或 <code>v-show</code> 元素的后面——否则它不能被识别。</p>\n<ul>\n<li><p>区别</p>\n<p><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件</p>\n<p><code>v-show</code> 绑定的元素始终被编译并保留，只是简单地基于 CSS 切换，另外它不支持<code>&lt;template&gt;</code>标签</p>\n<p>一般来说，<code>v-if</code> 有更高的切换消耗而 <code>v-show</code>有更高的初始渲染消耗。因此，如果需要频繁切换 <code>v-show</code> 较好，如果在运行时条件不大可能改变 <code>v-if</code> 较好</p>\n</li>\n</ul>\n<ul>\n<li><p>v-on</p>\n<p>利用<code>v-on</code>指令用于监听DOM事件，例如：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code></p>\n<p>另外<code>v-on</code>指令还可以缩写成<code>@</code>符号表示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-bind</p>\n<p>利用<code>v-bind</code>指令用于响应的更新HTML属性，例如：<code>&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</code></p>\n<p>另外<code>v-bind</code>指令还可以缩写为<code>:</code>表示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">\"someDynamicCondition\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-model</p>\n<p>此指令用于表单元素上，例如常见的input，select，textarea，radio，checkbox等</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: </span><span class=\"template-variable\">&#123;&#123; selected | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>v-for</p>\n<p><code>v-for</code>指令基于一个数组渲染一个列表。还有一个特殊的变量<code>$index</code>，它是当前数组元素的索引</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;ul id=<span class=\"string\">\"example-1\"</span>&gt;</div><div class=\"line\">  &lt;li v-for=<span class=\"string\">\"item in items\"</span>&gt;</div><div class=\"line\">     &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; $index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">var example1 = new Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    items: [</div><div class=\"line\">      &#123; message: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123; message: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Vue.js封装了数组的变异方法，例如<code>push</code>,<code>pop</code>,<code>shift</code>, <code>unshift</code>等和非变异方法，例如<code>filter</code>,<code>concat</code>等，如果是非变异的方法，则只需要直接使用返回的新数组替换原来的数组即可</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">example1<span class=\"selector-class\">.items</span> = example1<span class=\"selector-class\">.items</span><span class=\"selector-class\">.filter</span>(function (item) &#123;</div><div class=\"line\">     return item<span class=\"selector-class\">.message</span><span class=\"selector-class\">.match</span>(/Foo/)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>track-by</li>\n</ul>\n<p>列表在渲染的过程中通过唯一的键进行追踪，可以通过数组中每个值的唯一id进行标识或者通过<code>$index</code>，这种模式下可以处理数组中重复的值</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"item in items\"</span> track-by=<span class=\"string\">\"$index\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- content --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>在Vue.js中将绑定表达式限定为一个表达式，如果需要多余一个表达式的逻辑，应当使用计算属性。一个比较常见的应用方式是b属性的值依赖于a属性的值，则b应当设置为计算属性。计算属性同样具有getter和setter方法</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    firstName: <span class=\"string\">'Foo'</span>,</div><div class=\"line\">    lastName: <span class=\"string\">'Bar'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  computed: &#123;</div><div class=\"line\">      fullName: &#123;</div><div class=\"line\">\t    <span class=\"comment\">// getter</span></div><div class=\"line\">\t    <span class=\"keyword\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t     \t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName</div><div class=\"line\">\t    &#125;,</div><div class=\"line\">\t    <span class=\"comment\">// setter</span></div><div class=\"line\">\t    <span class=\"keyword\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(newValue)</span> </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> names = newValue.split(<span class=\"string\">' '</span>)</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.firstName = names[<span class=\"number\">0</span>]</div><div class=\"line\">\t        <span class=\"keyword\">this</span>.lastName = names[names.length - <span class=\"number\">1</span>]</div><div class=\"line\">\t    &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>此时的<code>vm. fullName</code>依赖于<code>vm. firstName</code>和<code>vm. lastName</code>，所以当<code>vm. firstName</code>和<code>vm. lastName</code>的值改变的时候，<code>vm. fullName</code>值也会相应的进行改变。同样的如果调用<code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会有相应更新</p>\n<h3 id=\"Class与style绑定\"><a href=\"#Class与style绑定\" class=\"headerlink\" title=\"Class与style绑定\"></a>Class与style绑定</h3><p>数据绑定的一个常见需求是操作元素的class和它的内联样式。因为它们都是HTML元素的属性，可以用<code>v-bind</code>来处理它们：只需要计算出表达式最终字符串。在<code>v-bind</code>用于绑定class和style时，Vue.js专门对其进行增强，使得表达式的结果类型除了字符串外，还可以是对象或者数组。</p>\n<p><strong>注意：尽管可以用Mustache标签绑定class，例如class=，但是不推荐和v-bind:class=className这种方式混用。两者只能选其一</strong></p>\n<h4 id=\"绑定class\"><a href=\"#绑定class\" class=\"headerlink\" title=\"绑定class\"></a>绑定class</h4><ul>\n<li>对象语法</li>\n</ul>\n<p>可以给<code>v-bind:class</code>传递一个对象，以动态的切换class。注意<code>v-bind:class</code>可以和普通的<code>class</code>共存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"static\"</span> v-bind:<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; 'class-a': isA, 'class-b': isB &#125;\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">data:</span> &#123;</div><div class=\"line\"><span class=\"attr\">  isA:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">  isB:</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"static class-a\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>数组语法</li>\n</ul>\n<p>可以把一个数组传递给<code>v-bind:class</code>，以应用一个class列表</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-bind:<span class=\"built_in\">class</span>=<span class=\"string\">\"[classA, classB]\"</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-tag\">data</span>: &#123;</div><div class=\"line\">  <span class=\"attribute\">classA</span>: <span class=\"string\">'class-a'</span>,</div><div class=\"line\">  classB: <span class=\"string\">'class-b'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"class-a class-b\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"绑定style内联样式\"><a href=\"#绑定style内联样式\" class=\"headerlink\" title=\"绑定style内联样式\"></a>绑定style内联样式</h4><p><code>v-bind:style</code>与<code>v-bind:class</code>使用方式相同，可以使用对象语法和数组语法。css属性名可以采用驼峰式或者短横线分割命名。</p>\n<ul>\n<li><p>对象语法</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-<span class=\"keyword\">bind</span>:style=<span class=\"string\">\"styleObject\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"selector-tag\">data</span>: &#123;</div><div class=\"line\">\t  <span class=\"attribute\">styleObject</span>: &#123;</div><div class=\"line\">\t      color: <span class=\"string\">'red'</span>,</div><div class=\"line\">\t      fontSize: <span class=\"string\">'13px'</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组语法</p>\n<p>可以将多个样式对象应用到一个元素上<br><code>&lt;div v-bind:style=&quot;[AStyle, BStyle]&quot;&gt;</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">AStyle</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"selector-tag\">BStyle</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">fontSize</span>: <span class=\"string\">'22px'</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"表单控件绑定\"><a href=\"#表单控件绑定\" class=\"headerlink\" title=\"表单控件绑定\"></a>表单控件绑定</h3><p>可以通过<code>v-model</code>指令在表单元素上创建双向数据绑定</p>\n<h4 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h4><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message is: </span><span class=\"template-variable\">&#123;&#123; message &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h4 id=\"Checkbox\"><a href=\"#Checkbox\" class=\"headerlink\" title=\"Checkbox\"></a>Checkbox</h4><p>多个复选框，绑定到同一个数组</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"jack\"</span> value=<span class=\"string\">\"Jack\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"jack\"</span>&gt;Jack&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"john\"</span> value=<span class=\"string\">\"John\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"john\"</span>&gt;John&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"checkbox\"</span> id=<span class=\"string\">\"mike\"</span> value=<span class=\"string\">\"Mike\"</span> v-model=<span class=\"string\">\"checkedNames\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"mike\"</span>&gt;Mike&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;span&gt;Checked names: &#123;&#123; checkedNames | json &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">new</span> <span class=\"selector-tag\">Vue</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">el</span>: <span class=\"string\">'...'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">checkedNames</span>: []</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h4><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> id=<span class=\"string\">\"one\"</span> value=<span class=\"string\">\"One\"</span> v-model=<span class=\"string\">\"picked\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"one\"</span>&gt;<span class=\"keyword\">One</span>&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> id=<span class=\"string\">\"two\"</span> value=<span class=\"string\">\"Two\"</span> v-model=<span class=\"string\">\"picked\"</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">label</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"two\"</span>&gt;<span class=\"keyword\">Two</span>&lt;/<span class=\"keyword\">label</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">br</span>&gt;</div><div class=\"line\">&lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h4><ul>\n<li><p>单选，value为单个字符串</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: </span><span class=\"template-variable\">&#123;&#123; selected &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>多选，value为一个数组</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selected\"</span> <span class=\"attr\">multiple</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">selected</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: </span><span class=\"template-variable\">&#123;&#123; selected | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"参数特性\"><a href=\"#参数特性\" class=\"headerlink\" title=\"参数特性\"></a>参数特性</h4><ul>\n<li><p>lazy</p>\n<p>在默认情况下，<code>v-model</code>是在<code>input</code>事件中同步输入框值和数据，可以添加一个<code>lazy</code>属性，从而在<code>change</code>事件中同步</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 在 \"change\" 而不是 \"input\" 事件中更新 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">lazy</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>debounce</p>\n<p><code>debounce</code>设置一个最小延时，在每次敲击后延时同步输入框和数据，例如在输入过程中发送ajax请求时比较有用。<code>debounce</code>延迟写入底层数据，应当用<code>vm.$watch()</code>监听数据的变化。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">input</span> v-model=<span class=\"string\">\"msg\"</span> debounce=<span class=\"string\">\"500\"</span>&gt;</div></pre></td></tr></table></figure>\n<p><code>debounce</code>参数不会延迟DOM，若想延迟DOM事件，应当使用<code>debounce过滤器</code>。包装处理器，让它延迟执行，包装后的处理器将延迟<code>x</code>ms（默认为300ms）后执行，如果在延迟结束前再次调用，延时时长重置为<code>x</code>ms</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">input</span> @keyup=<span class=\"string\">\"onKeyup | debounce 500\"</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"方法和事件处理器\"><a href=\"#方法和事件处理器\" class=\"headerlink\" title=\"方法和事件处理器\"></a>方法和事件处理器</h3><h4 id=\"方法处理器\"><a href=\"#方法处理器\" class=\"headerlink\" title=\"方法处理器\"></a>方法处理器</h4><p>可以通过<code>v-on</code>指令监听DOM事件，事件监听程序都是写在<code>methods</code>属性中。在绑定方的时候，还可以传递参数，包括event对象，在HTML语句中需要使用<code>$event</code>进行传递。并且这个<code>$event</code>是原生的event对象，包含原生的event事件属性和方法。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;button v-<span class=\"keyword\">on</span>:click=<span class=\"string\">\"greet($event, 'Vue.js')\"</span>&gt;Greet&lt;/button&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<p>绑定一个事件处理方法<code>greet</code></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"comment\">// 在 `methods` 对象中定义方法</span></div><div class=\"line\">  methods: &#123;</div><div class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event, msg)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 方法内 `this` 指向 vm</span></div><div class=\"line\">      alert(<span class=\"string\">'Hello '</span> + msg + <span class=\"string\">'!'</span>)</div><div class=\"line\">      <span class=\"comment\">// `event` 是原生 DOM 事件</span></div><div class=\"line\">      alert(event.target.tagName)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以在 JavaScript 代码中调用方法</span></div><div class=\"line\">vm.greet() <span class=\"comment\">// -&gt; 'Hello Vue.js!'</span></div></pre></td></tr></table></figure>\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><p>在事件处理器中，通常需要使用到<code>event.stopPropagation()</code>和<code>event.preventDefault()</code>，在Vue.js中为<code>v-on</code>指令添加了<code>.stop</code>和<code>.prevent</code>两个命令修饰符</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用 capture 模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h4><p>在监听键盘事件时，经常需要检测keyCode。Vue.js允许为<code>v-on</code>添加按键修饰符</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>全部按键的别名包括：</p>\n<ul>\n<li>enter</li>\n<li>tab</li>\n<li>delete</li>\n<li>esc</li>\n<li>space</li>\n<li>up</li>\n<li>down</li>\n<li>left</li>\n<li>right</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>组件（component）是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。组件的使用过程包括定义和注册的过程。组件在注册之后便可以在父实例中以自定义的元素的形式使用，不过要确保在初始化根实例之前注册了组件。而且自定义元素只是作为一个挂载点</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;<span class=\"keyword\">my</span>-component&gt;&lt;/<span class=\"keyword\">my</span>-component&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义</span></div><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = Vue.extend(&#123;</div><div class=\"line\">  template: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, MyComponent)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  el: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;A custom component!&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h4><p>有点时候并不需要注册全局组件，可以只让组件用在其他组件内部，用<code>components</code>进行注册</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义子组件</span></div><div class=\"line\"><span class=\"built_in\">var</span> child = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'&lt;div&gt;this is child component &lt;/div&gt;'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义父组件</span></div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"keyword\">parent</span> = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'&lt;div&gt;this is parent component &lt;child-component&gt;&lt;/child-component&gt; &lt;/div&gt;'</span>,</div><div class=\"line\">    components: &#123;</div><div class=\"line\">        <span class=\"comment\">//此时子组件child-component只能在父组件中使用</span></div><div class=\"line\">        <span class=\"string\">'child-component'</span>: child</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册父组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'parent-component'</span>, <span class=\"keyword\">parent</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"模板解析\"><a href=\"#模板解析\" class=\"headerlink\" title=\"模板解析\"></a>模板解析</h4><p>Vue模板是DOM模板，使用浏览器原生的解析器而不是自己实现一个，所以HTML元素对什么元素可以放在它里面是有限制的。常见的限制如下：</p>\n<ul>\n<li>a 不能包含其它的交互元素（如按钮，链接）</li>\n<li>ul 和 ol 只能直接包含 li</li>\n<li>select 只能包含 option 和 optgroup</li>\n<li>table 只能直接包含 thead, tbody, tfoot, tr, caption, col, colgroup</li>\n<li>tr 只能直接包含 th 和 td</li>\n</ul>\n<h4 id=\"组件选项\"><a href=\"#组件选项\" class=\"headerlink\" title=\"组件选项\"></a>组件选项</h4><p>在组件内部也会使用数据变量，变量值也会存在data选项中，但是不同于Vue实例的data属性，组件内部的data属性应该是一个函数，在这个函数中返回一个新的对象，其中包含需要的属性名和属性值。</p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyComponent = Vue.<span class=\"built_in\">extend</span>(&#123;</div><div class=\"line\">  dat<span class=\"variable\">a:</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"variable\">a:</span> <span class=\"number\">1</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"使用props进行传值\"><a href=\"#使用props进行传值\" class=\"headerlink\" title=\"使用props进行传值\"></a>使用props进行传值</h4><p>组件实例的作用域是孤立的，在子组件中不能直接使用父组件中的属性。可以使用props属性将数据传递给子组件。是传递字面量还是动态值通过是否使用<code>v-bind</code>指令来确定。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"type\">Vue</span>.extend(&#123;</div><div class=\"line\">    <span class=\"keyword\">template</span>: '&lt;<span class=\"keyword\">div</span>&gt;this <span class=\"keyword\">is</span> child component  &#123;&#123;attrA&#125;&#125; &#123;&#123;attrB&#125;&#125;&lt;/<span class=\"keyword\">div</span>&gt;',</div><div class=\"line\">    props: ['attrA', 'attrB']</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"type\">Vue</span>.extend(&#123;</div><div class=\"line\">    <span class=\"keyword\">template</span>: '&lt;<span class=\"keyword\">div</span>&gt;this <span class=\"keyword\">is</span> parent component &#123;&#123;a&#125;&#125; ' +</div><div class=\"line\">              '&lt;child-component v-<span class=\"keyword\">bind</span>:a=<span class=\"string\">\"aa\"</span> attr-a=<span class=\"string\">\"attrA\"</span> v-<span class=\"keyword\">bind</span>:attr-b=<span class=\"string\">\"attrB\"</span>&gt;&lt;/child-component&gt;' +</div><div class=\"line\">              '&lt;/<span class=\"keyword\">div</span>&gt;',</div><div class=\"line\">    components: &#123;</div><div class=\"line\">        'child-component': child</div><div class=\"line\">    &#125;,</div><div class=\"line\">    data: function () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            attrA: dynamic  attrA',</div><div class=\"line\">            attrB: 'dynamic attrB'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;<span class=\"keyword\">this</span> <span class=\"keyword\">is</span> child component  attrA <span class=\"keyword\">dynamic</span> attrB&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>注意：子组件内部具有的属性不能和继承的属性相同，即不能在子组件的data和props中出现相同的变量名，否则程序会报错</strong></p>\n<h4 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h4><p>子组件可以通过<code>this.$parent</code>访问它的父组件，父组件有一个<code>this.$children</code>，包含子组件的列表。根实例的后代通过<code>this.$root</code>访问它。</p>\n<p>尽管可以访问到父链上的任意实例，不过子组件应该避免直接依赖父组件的数据，而是通过props属性进行传递，而且在子组件中也不要修改父组件中的状态，理想情况下只有组件自己才可以修改它的状态。</p>\n<h4 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h4><p>Vue.js实现了一个自定义的事件接口，用于在组件树中通信。这个事件系统独立于原声DOM事件，用法也不同。</p>\n<p>每个Vue实例都是一个事件触发器</p>\n<ul>\n<li>使用<code>$on</code>监听事件</li>\n<li>使用<code>$emit</code>在它上面触发事件</li>\n<li>使用<code>$dispatch</code>派发事件，事件沿着父链冒泡。<strong>不同于DOM原生事件，Vue事件在冒泡过程中第一次触发回调后自动停止冒泡，除非回调函数明确返回<code>true</code></strong></li>\n<li>使用<code>$broadcast</code>广播事件，事件向下传导给所有后代</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 子组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child-template\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"msg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"notify\"</span>&gt;</span>Dispatch Event<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 父组件模板 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"events-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Messages: </span><span class=\"template-variable\">&#123;&#123; messages | json &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册子组件</span></div><div class=\"line\"><span class=\"comment\">// 将当前消息派发出去</span></div><div class=\"line\">Vue.component(<span class=\"string\">'child'</span>, &#123;</div><div class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"string\">'#child-template'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attribute\">msg</span>: <span class=\"string\">'hello'</span> &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">notify</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.msg.trim()) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$dispatch(<span class=\"string\">'child-msg'</span>, <span class=\"keyword\">this</span>.msg)</div><div class=\"line\">        <span class=\"keyword\">this</span>.msg = <span class=\"string\">''</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化父组件</span></div><div class=\"line\"><span class=\"comment\">// 将收到消息时将事件推入一个数组</span></div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">parent</span> = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attribute\">el</span>: <span class=\"string\">'#events-example'</span>,</div><div class=\"line\">  <span class=\"attribute\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">messages</span>: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// 在创建实例时 `events` 选项简单地调用 `$on`</span></div><div class=\"line\">  <span class=\"attribute\">events</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'child-msg'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 事件回调内的 `this` 自动绑定到注册它的实例上</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.messages.push(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"使用slot分发内容\"><a href=\"#使用slot分发内容\" class=\"headerlink\" title=\"使用slot分发内容\"></a>使用slot分发内容</h4><p>每个组件都有自己的作用域，父组件模板的内容在父组件作用域内编译，子组件模板的内容在子组件作用域内编译。如果要绑定一个指令打到组件的根节点上，应该按如下方式：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.component(<span class=\"string\">'child-component'</span>, &#123;</div><div class=\"line\">  <span class=\"comment\">// v-show指令有效，因为是在正确的作用域内</span></div><div class=\"line\">  template: <span class=\"string\">'&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;'</span>,</div><div class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      someChildProperty: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>类似的，分发内容也是在父组件的作用域内编译。</p>\n<ul>\n<li><p>slot</p>\n<p>父组件的内容在渲染的时候会被抛弃，除非子组件包含了<code>slot</code>标签。如果子组件只包含一个<code>slot</code>，则父组件的内容将被添加到<code>slot</code>标签中；如果子组件具有多个<code>slot</code>标签，可以通过<code>slot</code>标签的<code>name</code>属性进行分发。在具有多个<code>slot</code>标签时，仍然可以有一个匿名的<code>slot</code>，它是默认的<code>slot</code>，作为找不到匹配的内容的<code>slot</code>。</p>\n<p>子组件模板：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"one\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">\"two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>父组件模板：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">multi-insertion</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Default A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">multi-insertion</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>渲染为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"one\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Default A<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"two\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"编写可复用的组件\"><a href=\"#编写可复用的组件\" class=\"headerlink\" title=\"编写可复用的组件\"></a>编写可复用的组件</h4><p>在编写组件的时候，如果需要达到可复用的目的，应当定义一个清晰的公开接口。Vue.js组件的API来自三个部分：props、事件和slot</p>\n<ul>\n<li><strong>props</strong>允许外部环境传递数据给组件</li>\n<li><strong>事件</strong>允许组件触发外部环境的action</li>\n<li><strong>slot</strong>允许外部环境的内容插入到组件内部结构中</li>\n</ul>\n<p>通常一个组件模板的清晰结构如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">my-component</span></div><div class=\"line\">  <span class=\"attr\">:foo</span>=<span class=\"string\">\"baz\"</span></div><div class=\"line\">  <span class=\"attr\">:bar</span>=<span class=\"string\">\"qux\"</span></div><div class=\"line\">  @<span class=\"attr\">event-a</span>=<span class=\"string\">\"doThis\"</span></div><div class=\"line\">  @<span class=\"attr\">event-b</span>=<span class=\"string\">\"doThat\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- content --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"...\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">\"main-text\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><p>除了Vue内置的指令外，还可以自定义指令。自定义指令提供一种机制将数据变化映射为DOM行为。通过<code>Vue.directive(id, definition)</code>方法注册一个全局自定义指令，它接收两个参数，指令ID和定义对象。在HTML元素中使用自定义指令时，需要添加<code>v-</code>前缀</p>\n<h4 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h4><p>定义对象中定义了几个可选的钩子函数</p>\n<ul>\n<li>bind：只调用一次，在指令第一次绑定到元素上时调用</li>\n<li>update：在bind后立即以初始值为参数第一次调用，以后每次绑定的值发生变化时，触发一次，参数为新值和旧值</li>\n<li>unbind：只调用一次，在指令元素上解绑时调用</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;</div><div class=\"line\">\t  bind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 准备工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 例如，添加事件处理器或只需要运行一次的高耗任务</span></div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  update: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(newValue, oldValue)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 值更新时的工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 也会以初始值为参数调用一次</span></div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  unbind: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">// 清理工作</span></div><div class=\"line\">\t    <span class=\"comment\">// 例如，删除 bind() 添加的事件监听器</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"指令实例属性\"><a href=\"#指令实例属性\" class=\"headerlink\" title=\"指令实例属性\"></a>指令实例属性</h4><p>在钩子函数内<code>this</code>执行这个指令对象。这个对象暴露了一些实例属性：</p>\n<ul>\n<li><strong>el</strong>：指令绑定的元素</li>\n<li><strong>vm</strong>：拥有该指令的上下文ViewModel</li>\n<li><strong>expression</strong>：指令表达式</li>\n<li><strong>arg</strong>：指令参数</li>\n<li><strong>name</strong>：指令名称</li>\n<li><strong>modifiers</strong>：指令修饰符对象</li>\n<li><strong>descriptor</strong>：指令解析的结果对象</li>\n</ul>\n<p><strong>注意:这些属性我们应该将其视为可读的，不要修改他们。可以添加自定义属性，但不要覆盖已有的内部属性</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">\"demo\"</span> v-demo:hello<span class=\"selector-class\">.a</span><span class=\"selector-class\">.b</span>=<span class=\"string\">\"msg\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Vue.directive(<span class=\"string\">'demo'</span>, &#123;</div><div class=\"line\">\t  <span class=\"attr\">bind</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">'demo bound!'</span>)</div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  <span class=\"attr\">update</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">this</span>.el.innerHTML =</div><div class=\"line\">\t      <span class=\"string\">'name - '</span>       + <span class=\"keyword\">this</span>.name + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'expression - '</span> + <span class=\"keyword\">this</span>.expression + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'argument - '</span>   + <span class=\"keyword\">this</span>.arg + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'modifiers - '</span>  + <span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.modifiers) + <span class=\"string\">'&lt;br&gt;'</span> +</div><div class=\"line\">\t      <span class=\"string\">'value - '</span>      + value</div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\t  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">\t  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">\t    <span class=\"attr\">msg</span>: <span class=\"string\">'hello!'</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">name</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">demo</span></div><div class=\"line\"><span class=\"selector-tag\">expression</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">msg</span></div><div class=\"line\"><span class=\"selector-tag\">argument</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">hello</span></div><div class=\"line\"><span class=\"selector-tag\">modifiers</span> <span class=\"selector-tag\">-</span> &#123;<span class=\"attribute\">a</span>: true, b: true&#125;</div><div class=\"line\"><span class=\"selector-tag\">value</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">hello</span>!</div></pre></td></tr></table></figure>\n<h4 id=\"高级选项-params\"><a href=\"#高级选项-params\" class=\"headerlink\" title=\"高级选项-params\"></a>高级选项-params</h4><p>类似于自定义组件的<code>props</code>属性，自定义指令提供<code>params</code>属性，指令一个数组列表，Vue编译器将自动提取绑定元素的这些特性。而且<code>params</code>还支持动态属性，另外还可以指定一个回调，在值变化时调用</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> v-example v-bind:<span class=\"keyword\">a</span>=<span class=\"string\">\"someValue\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.directive(<span class=\"string\">'example'</span>, &#123;</div><div class=\"line\">  param<span class=\"variable\">s:</span> [<span class=\"string\">'a'</span>],</div><div class=\"line\">  paramWatcher<span class=\"variable\">s:</span> &#123;</div><div class=\"line\">    <span class=\"variable\">a:</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(val, oldVal)</span> &#123;</span></div><div class=\"line\">      console.<span class=\"built_in\">log</span>(<span class=\"string\">'a changed!'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>类似于自定义指令，可以通过<code>Vue.filter()</code>注册一个全局自定义过滤器，接收两个参数：过滤器ID和过滤器函数，过滤器函数以值为参数，返回转换后的值</p>\n<p>自定义过滤器可以接收任意数量的参数，第一个参数为表达式的值，从第二个参数开始可以传递任意值，字面量或者计算表达式</p>\n<figure class=\"highlight ocaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Vue</span>.filter(<span class=\"symbol\">'wrap'</span>, <span class=\"keyword\">function</span> (<span class=\"keyword\">value</span>, <span class=\"keyword\">begin</span>, <span class=\"keyword\">end</span>) &#123;</div><div class=\"line\">    return <span class=\"keyword\">begin</span> + <span class=\"keyword\">value</span> + <span class=\"keyword\">end</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var vm = <span class=\"keyword\">new</span> <span class=\"type\">Vue</span>(&#123;</div><div class=\"line\">    el: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">   \t   after: <span class=\"symbol\">'last'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 'hello' =&gt; 'before hello after' --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"message | wrap 'before' after\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"一些WEB前端资源分享","layout":"post","date":"2016-11-21T13:44:55.000Z","comments":1,"keywords":"Hexo, Blog","description":"包含pc端,移动端js库,css框架、CSS常用类库,工具等等...在原文基础上添加修改。","_content":"\n# 一些前端开发的干货\n\n标签（空格分隔）： 资料\n#出处:https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web\n#包含pc端,移动端js库,框架,css框架,工具等等...在原文基础上添加修改\n----\n有些虽已经年代久远，但仍然可以学到很多有用的东西,可以整理资料的链接和其他链接资料或许有重复......\n[-->>另外一个链接:分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者](https://github.com/qingniao99/front-end-collect)\n[库](https://github.com/dypsilon/frontend-dev-bookmarks)\n####[常用库查询系统](http://hackr.io/)\n\n###移动端资料\n- [支付宝无线Web开发经验谈](http://am-team.github.io/amg/dev-exp-doc.html)\n- [移动前端系列——移动端页面坑与排坑技巧( 2014-12-08 )](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201411/290576.shtml)\n- [移动web最佳实践（2013）](http://www.ipresst.com/play/528892e11d0495f30f00762e)\n- [移动Web前端框架 ( 2014 ) ](http://www.jingwentian.com/t-135)\n- [移动端自适应方案-lib.flexible,淘宝手机版都是用这个框架](https://github.com/amfe/lib.flexible)\n- [iOS 微信 音频 视频自动播放](http://www.w3ctech.com/topic/1165#rd)\n- [微信JS-SDK说明文档](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)\n- [微信js demo](http://203.195.235.76/jssdk/)\n- [QQ浏览器X5内核问题汇总](http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/)\n- [手机分辨率查询](http://viewportsizes.com/)\n- [移动端响应式框架-测试阶段,不适用于复杂页面](https://github.com/peunzhang/pageResponse)\n## 1、CSS\n\n-  Ihover 鼠标经过时间特效\n\n(http://gudh.github.io/ihover/dist/index.html)\n\n-  SliderBar 侧边栏侧滑效果\nhttps://github.com/christophery/pushy\n\n\n-  Loaders.css 加载效果\nhttps://github.com/ConnorAtherton/loaders.css\n\n-  CSS Spinners \nhttps://github.com/jlong/css-spinners\n\n-  fancybox 图片预览效果\nhttp://fancyapps.com/fancybox/demo/\n-\n图片预览效果\nhttp://codepen.io/dimsemenov/pen/vKrqs\n\n-   分类筛选插件\nhttps://github.com/giotiskl/Filterizr \n-http://www.dowebok.com/demo/211/\n\n\n\n ## [github  icon库大全](https://github.com/lvwzhen/iconpark)\n\n\n [阿里巴巴iconfont](http://www.iconfont.cn)\n [fontello](http://fontello.com/)\n [Font Awesome](http://www.fontawesome.com.cn/)\n [H-ui 前端框架](http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml)\n\n\n:smiley_cat:_These share data are from my usual work and learning，hoping to help you，If you like you can star_\n\n## Javascript\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Javascript深浅拷贝](https://github.com/Wscats/Good-text-Share/issues/57)|[Javascript中的apply和call继承](https://github.com/Wscats/Good-text-Share/issues/56)|\n|[Javascript的jsonp原理](https://github.com/Wscats/Good-text-Share/issues/55)|[Javascript监听触摸事件](https://github.com/Wscats/Good-text-Share/issues/49)|\n|[Javascript中的var self = this](https://github.com/Wscats/Good-text-Share/issues/52)|[Javascript面向对象编程](https://github.com/Wscats/Good-text-Share/issues/32)|\n|[Javascript滑屏切换场景](https://github.com/Wscats/Good-text-Share/issues/14)|[Javascript获取经纬度，关于调用百度API的问题](https://github.com/Wscats/Good-text-Share/issues/16)|\n|[妙用Javascript运算符](https://github.com/Wscats/Good-text-Share/issues/3)|[深入理解Javascript函数编程](https://github.com/Wscats/Good-text-Share/issues/1)|\n|[Javascript的setTimeout详细用例](https://github.com/Wscats/Good-text-Share/issues/4)|[sessionstorage，localstorage和cookie](https://github.com/Wscats/Good-text-Share/issues/42)|\n|[JS日期对比](https://github.com/Wscats/Good-text-Share/issues/11)|[JSONP参考文章](https://github.com/Wscats/Good-text-Share/issues/10)|\n|[Javascript的createElement](https://wscats.github.io/angular-demo/createElement.html)|[Javascript的createDocumentFragment](https://wscats.github.io/angular-demo/createDocumentFragment.html)|\n|[sessionStorage和localStorage](https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html)|[像素帧动画](https://wscats.github.io/angular-demo/像素动画.html)|\n| **Reference** | **Reference** |\n|[JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)|[JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)|\n|[JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book)|[阮一峰 Javascript](http://javascript.ruanyifeng.com)|\n|[前端 TOP 100](https://www.awesomes.cn/rank)|[小白的零基础JavaScript全栈教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)|\n\n## UI\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[WeUI](https://github.com/weui/weui)|[Bootstrap](http://www.bootcss.com)|\n|[MUI-最接近原生APP体验的高性能前端框架](http://dev.dcloud.net.cn/mui/)|[Amaze UI中国首个开源HTML5跨屏前端框架](http://amazeui.org)|\n|[Frozen UI](http://frozenui.github.io/)|[Foundation](http://foundation.zurb.com/)|\n|[SUI](http://sui.taobao.org/sui/docs/)|[ZUI](https://github.com/easysoft/zui)|\n|[淘宝HTML5前端框架](http://m.sui.taobao.org)|[KISSY - 阿里前端JavaScript库](http://docs.kissyui.com)|\n|[网易Nej - Nice Easy Javascript](http://nej.netease.com)|[Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)|\n|[Smart UI](http://smartui.chinamzz.com)|[雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids)|\n\n## CSS\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[CSS Flex布局](https://github.com/Wscats/Good-text-Share/issues/41)|[移动前端开发CSS3](https://github.com/Wscats/Good-text-Share/issues/38)|\n|[响应式布局 媒体查询](https://github.com/Wscats/Good-text-Share/issues/43)|[CSS图片响应式布局](https://github.com/Wscats/Good-text-Share/issues/34)|\n|[lessDemo的less文件](https://wscats.github.io/angular-demo/stylesheets/styles.less)||\n| **Reference** | **Reference** |\n|[CSS 语法参考](http://tympanus.net/codrops/css_reference)|[CSS3动画手册](http://isux.tencent.com/css3/index.html)|\n|[腾讯css3动画制作工具](http://isux.tencent.com/css3/tools.html)|[animate.css](http://daneden.github.io/animate.css)|\n|[Animated Books with CSS 3D Transforms](http://tympanus.net/Development/AnimatedBooks/)|[Browserhacks](http://browserhacks.com/)|\n\n## HTML\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n[HTML5有哪些让你惊艳的demo](http://www.zhihu.com/question/24398907)|[Wallpaperbetter](http://www.wallpaperbetter.com/)|\n\n## Angular\n| Article | Angular文档 |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Angular源码解读publishExternalAPI函数](https://github.com/Wscats/Good-text-Share/issues/26)|[Angular源码解读setupModuleLoader函数](https://github.com/Wscats/Good-text-Share/issues/25)|\n|[Angular的ng-style用法](https://github.com/Wscats/Good-text-Share/issues/35)|[Angular判断在那个浏览器下打开的服务](https://github.com/Wscats/Good-text-Share/issues/29)|\n|[Angular文字折叠展开组件的原理分析](https://github.com/Wscats/Good-text-Share/issues/28)|[Angular服务Request异步请求的详细分析](https://github.com/Wscats/Good-text-Share/issues/21)|\n|[Angular自定义service服务详解](https://github.com/Wscats/Good-text-Share/issues/24)|[Angular自定义判断上一页是否存在的服务](https://github.com/Wscats/Good-text-Share/issues/22)|\n|[Angular操作cookies方法](https://github.com/Wscats/Good-text-Share/issues/19)|[Angular打印错误的minErr函数](https://github.com/Wscats/Good-text-Share/issues/18)|\n|[Angular的fromJson与toJson方法](https://github.com/Wscats/Good-text-Share/issues/17)|[Angular用ng-repeat生成表单并绑定ng-click时的一个细节](https://github.com/Wscats/Good-text-Share/issues/12)|\n|[Angular的run方法巧妙运用](https://github.com/Wscats/Good-text-Share/issues/6)|[Angular处理Html转义问题](https://github.com/Wscats/Good-text-Share/issues/5)|\n|[ng-repeat绑定事件和嵌套](ng-repeat绑定事件和嵌套)|[Angular的post请求后台接受不了数据的解决方法](https://github.com/Wscats/angular-demo/issues/4)|\n|[ionic总结](https://github.com/Wscats/angular-demo/issues/19)|[ui-route和ng-route](https://github.com/Wscats/angular-demo/issues/17)|\n|[ng-options&&ng-switch](https://github.com/Wscats/angular-demo/issues/15)|[directive组件作用域](https://github.com/Wscats/angular-demo/issues/14)|\n|[表单认证](https://github.com/Wscats/angular-demo/issues/13)|[$broadcast,$emit and $on](https://github.com/Wscats/angular-demo/issues/11)|\n|[自定义过滤器](https://github.com/Wscats/angular-demo/issues/9)|[自定义手势指令ng-touch](https://github.com/Wscats/angular-demo/issues/8)|\n|[ng-animate](https://github.com/Wscats/angular-demo/issues/7)|[单页面应用的技术点](https://github.com/Wscats/angular-demo/issues/3)|\n| **Guess you like** |**AppDemo**|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[AngularStovepipe](https://wscats.github.io/angular-demo/spa/Stovepipe/index.html)|[Angular的新闻客户端](https://wscats.github.io/angular-demo/spa/TT/index.html)|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[Angular内联编辑器](https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html)|[Angular即时搜索](https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html)|\n|[Angular导航菜单](https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html)|[Angular订单表单](https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html)|\n|[Angular切换网格](https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html)|[Angular新闻＋WEUI DEMO](https://wscats.github.io/angular-demo/spa/news/index.html) [源码](https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News)|\n| **Controller** |**控制器**|\n|[Angular控制器demo](https://wscats.github.io/angular-demo/view/student.html)||\n| **SPA DEMO** |**单页面应用**|\n|[Angular+Weui单页面应用DEMO-每日笑话](https://wscats.github.io/angular-demo/weui每日笑话.html)||\n| **Service** |**服务**|\n|[Angular自定义服务的常用方法](https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md)|[Angular部分服务demo](https://wscats.github.io/angular-demo/部分服务demo.html)|\n|[Angular自定义Canvas画图服务](https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html)|[Angular自定义http服务 面向对象封装](https://wscats.github.io/angular-demo/自定义http服务.html)|\n| **Directive** |**组件与指令**|\n|[Angular自定义手势指令](https://wscats.github.io/angular-demo/自定义手势事件.html)|[Angular自定义轮播图组件](https://wscats.github.io/angular-demo/自定义directive轮播图.html)|\n|[Angular自定义下拉刷新组件1](https://wscats.github.io/angular-demo/下拉刷新.html)|[Angular自定义下拉刷新组件2](https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html)|\n| **Router** |**路由**|\n|[Angular路由嵌套](https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html)|[Angular路由单页多个ui-view](https://wscats.github.io/angular-demo/uiRoute/index.html)|\n| **Filter** |**过滤器**|\n|[Angular自带过滤器](https://wscats.github.io/angular-demo/angular自带过滤器.html)|[Angular自定义关键词检索过滤器](https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html)|\n| **Animate** |**动画**|\n|[Angular ng-animate动画1](https://wscats.github.io/angular-demo/ng-animate动画.html)|[Angular ng-animate动画2](https://wscats.github.io/angular-demo/ng-animate动画2.html)|\n| **Other** |**其他**|\n|[Angular中使用iframe](https://wscats.github.io/angular-demo/iframesdemo.html)|[Angular三级联动(1)](https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html)|\n|[Angular中使用ng-switch](https://wscats.github.io/angular-demo/ngSwitch.html)|[百度定位DEMO](https://wscats.github.io/angular-demo/百度地图定位DEMO.html)|\n|[Angular三级联动(2)](https://wscats.github.io/angular-demo/三级联动改进.html)|[Angular事件监听](https://wscats.github.io/angular-demo/事件监听.html)|\n|[jQuery模拟ng-repeat](https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html)|[lessDemo](https://wscats.github.io/angular-demo/lessDemo.html)|\n|[Angular自定义cookie服务和ngCookie的使用](https://wscats.github.io/angular-demo/ngCookie.html)|[图灵机器人](https://wscats.github.io/angular-demo/图灵机器人.html)|\n|[Angular利用angular.module()实现模块化](https://wscats.github.io/angular-demo/angular模块化.html)|[Angular的form表单验证](https://wscats.github.io/angular-demo/form表单验证.html)|\n|[Angular的ng-repeat嵌套](https://wscats.github.io/angular-demo/ng-repeat嵌套.html)|[Angular利用angular.module()实现模块化2](https://wscats.github.io/angular-demo/angular模块化2.html)|\n| **PHP** | **PHP** |\n|[PHP CURL请求的小细节](https://github.com/Wscats/Good-text-Share/issues/53)||\n| **Reference** | **Reference** |\n|[最流行的PHP 代码规范](https://segmentfault.com/a/1190000000443795)|[最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)|\n|[Angular.js的一些学习资源](http://blog.aijc.net/AngularLearning/)|[Angularjs中文社区](http://angularjs.cn)|\n|[一些扩展Angular UI组件](https://github.com/angular-ui)|[Angular UI](http://mgcrea.github.io/angular-strap)|\n|[AngularJS在线教程](http://each.sinaapp.com/angular)|[Angular学习笔记](http://www.zouyesheng.com/angular.html)|\n\n## React\n| React | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[React教程 菜鸟教程](http://www.runoob.com/react/react-tutorial.html)|[React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu)|\n|[React开发中文手册-极客学院](http://wiki.jikexueyuan.com/project/react/)|[React教程-汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/)|\n|[React.js快速开始](http://www.phperz.com/article/15/0712/140537.html#)|[Reactjs 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)|\n|[React 入门教程](https://hulufei.gitbooks.io/react-tutorial/content/introduction.html)|[汇智网 React教程](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)|\n|[轻松入门React和Webpack](https://segmentfault.com/a/1190000002767365)|[React中文索引](http://nav.react-china.org/#docs)|\n|[Redux 中文文档](http://cn.redux.js.org/)|[React Router官方文档中文翻译](https://github.com/react-guide/react-router-cn)|\n|[React入门教程](http://www.cnblogs.com/kunyashaw/p/5619256.html)|[React介绍及实践教程](http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html)|\n|[React.js 官方网址](https://facebook.github.io/react/index.html)|[React.js 官方文档](https://facebook.github.io/react/docs/getting-started.html)|\n|[React.js material UI](http://material-ui.com/#)|[React.js TouchstoneJS UI](http://touchstonejs.io)|\n|[React.js amazeui UI](http://amazeui.org/react)|[React 入门实例教程 - 阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)|\n|[React Native 中文版](http://wiki.jikexueyuan.com/project/react-native)|[Webpack 和 React 小书 - gitbook](https://fakefish.github.io/react-webpack-cookbook)|\n\n## Vue\n| Vue |AppDemo|Demo|\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[NewsDemo](https://wscats.github.io/vue-demo/news/index.html)|[vue计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|[vue生命周期](https://wscats.github.io/vue-demo/vue生命周期.html)|\n| **Article** |**Vue文档**||\n|[Vue-cli脚手架](https://github.com/Wscats/vue-demo/issues/2)|[Vue组件](https://github.com/Wscats/vue-demo/issues/3)|[vue自定义指令](https://github.com/Wscats/vue-demo/issues/8)|\n|[Vue过渡动画](https://github.com/Wscats/vue-demo/issues/9)|[Vue指令](https://github.com/Wscats/vue-demo/issues/7)|[Vue api文档](https://github.com/Wscats/vue-demo/issues/6)|\n|[Vue执行ajax请求](https://github.com/Wscats/vue-demo/issues/5)|[vue实现类似angular服务的方法](https://github.com/Wscats/vue-demo/issues/4)|[Vue源码参考文档](https://github.com/Wscats/vue-demo/issues/10)|\n| **Router** |**路由**||\n|[路由demo](https://wscats.github.io/vue-demo/路由.html)|[路由demo2](https://wscats.github.io/vue-demo/路由2.html)||\n| **Directive** |**指令**||\n|[指令demo](https://wscats.github.io/vue-demo/指令.html)|[自定义指令demo](https://wscats.github.io/vue-demo/自定义指令.html)|[滑动手势demo](https://wscats.github.io/vue-demo/滑动手势指令.html)|\n| **Filter** |**过滤器**||\n|[过滤器demo](https://wscats.github.io/vue-demo/过滤器.html)|[过滤器实现分页demo](https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html)|[过滤器读写数据](https://wscats.github.io/vue-demo/vue过滤器读写数据.html)|\n| **Transition** |**过渡**||\n|[过渡demo](https://wscats.github.io/vue-demo/过渡.html)|[过渡demo2](https://wscats.github.io/vue-demo/过渡2.html)||\n| **Form** |**表单**||\n|[获取表单值](https://wscats.github.io/vue-demo/vue获取表单值.html)|||\n| **Computed** |**计算**||\n|[计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|||\n| Component |组件||\n|[组件demo](https://wscats.github.io/vue-demo/组件.html)|||\n| **Reference** | **Reference** | **Reference** |\n|[Vue官网](http://cn.vuejs.org)|[Vue论坛](http://forum.vuejs.org)|[Awesome-vue](https://github.com/vuejs/awesome-vue)|\n\n\n## Node\n| Node | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[node技巧](https://github.com/Wscats/Good-text-Share/issues/44)|[NodeJs静态服务器](https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer)|\n| **Reference** | **Reference** |\n|[Node.js 包教不包会](https://github.com/alsotang/node-lessons)|[七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)|\n|[从零开始nodejs系列文章](http://blog.fens.me/series-nodejs)|[Node入门](http://www.nodebeginner.org/index-zh-cn.html)|\n|[Node初学者入门，一本全面的NodeJS教程](http://ourjs.com/detail/529ca5950cb6498814000005)||\n\n## Gulp \n| Gulp | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Gulp Demo](https://github.com/Wscats/glup)||\n| **Gulp** | **Reference** |\n|[Gulp官网](http://gulpjs.com)|[Gulp中文网](http://www.gulpjs.com.cn)|\n|[Gulp资料收集](https://github.com/Platform-CUF/use-gulp)|[Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)|\n|[Gulp插件](http://gulpjs.com/plugins])|[Gulp不完全入门教程](http://www.ido321.com/1622.html)|\n|[Gulp 入门指南](https://github.com/nimojs/gulp-book)||\n\n## 其他\n| Other | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[关于Pornographic website的一些前端分析](https://github.com/Wscats/node-demo/issues/4)|[微信公众号开发](https://github.com/Wscats/Good-text-Share/issues/50)|\n|[Atom技巧总结](https://github.com/Wscats/Good-text-Share/issues/30)|[Mac小技巧](https://github.com/Wscats/Good-text-Share/issues/46)|\n|[CSDN页面内JS跳转脚本](https://github.com/Wscats/Good-text-Share/issues/9)|[CSDN博客隐藏配置](https://github.com/Wscats/Good-text-Share/issues/8)|\n|[百度设置小度机器人出现](https://github.com/Wscats/Good-text-Share/issues/7)|[前端冷知识，妙用浏览器地址栏](https://github.com/Wscats/Good-text-Share/issues/2)|\n|[Vim笔记](https://github.com/Wscats/Good-text-Share/issues/27)|[Cordova配置&&Ionic配置（WebApp混合开发环境）](https://github.com/Wscats/Good-text-Share/issues/48)|\n|[IE8及以下按钮超链接无法跳转的问题](https://github.com/Wscats/Good-text-Share/issues/33)||\n\n## 分享功能\n| Share | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[百度分享(PC)](http://share.baidu.com)|[JiaThis(PC)](http://jiathis.com)|\n|[社会化分享组件(Mobile)](http://developer.baidu.com/soc/share)|[ShareSDK轻松实现社会化功能(Mobile)](http://www.mob.com)|\n|[友盟分享(Mobile)](http://dev.umeng.com/social/android/quick-integration)||\n\n## 在线演示\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[js 在线编辑 - runjs](http://runjs.cn)|[js 在线编辑 - jsbin](http://jsbin.com)|\n|[js 在线编辑 - codepen](http://codepen.io)|[js 在线编辑 - jsfiddle](http://jsfiddle.net)|\n|[java 在线编辑 - runjs](http://ideone.com)|[js 在线编辑 - hcharts](http://code.hcharts.cn)|\n|[js 在线编辑 - jsdm](http://jsdm.com)|[sql 在线编辑 - sqlfiddle](http://sqlfiddle.com)|\n|[mozilla 在线编辑器](https://thimble.mozilla.org)||\n\n## 富文本编辑器\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[百度ueditor](http://ueditor.baidu.com/website)|[ckeditor](http://ckeditor.com)|\n|[tinymce](https://www.tinymce.com)|[kindeditor](http://kindeditor.net)|\n|[wysiwyg](http://www.bootcss.com/p/bootstrap-wysiwyg)|[BachEditor](http://integ.github.io/BachEditor)|\n|[simditor](https://github.com/mycolorway/simditor)|[summernote](https://github.com/summernote/summernote)|\n|[Squire](http://neilj.github.io/Squire)|[wangEditor](https://github.com/wangfupeng1988/wangEditor)|\n\n## Chrome\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Chrome - 基础](http://www.cnblogs.com/constantince/p/4565261.html)|[Chrome - 进阶](http://www.cnblogs.com/constantince/p/4579121.html)|\n|[Chrome - 性能](http://www.cnblogs.com/constantince/p/4585983.html)|[Chrome - 性能进阶](http://www.cnblogs.com/constantince/p/4607497.html)|\n|[Chrome - 移动](http://www.cnblogs.com/constantince/p/4624241.html)|[Chrome - 使用技巧](http://www.cnblogs.com/liyunhua/p/4544738.html)|\n|[Chrome - Console控制台不完全指南](http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html)|[chrome开发工具快捷键](http://anti-code.com/devtools-cheatsheet)|\n|[Chrome 开发工具 Workspace 使用](http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace)|[Chrome神器Vimium快捷键学习记录](http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html)|\n|[Sass调试-w3cplus](http://www.w3cplus.com/sassguide/debug.html)|[如何更专业的使用Chrome开发者工具-w3cplus](http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html)|\n|[Chrome调试canvas](http://sentsin.com/web/253.html)|[神器——Chrome开发者工具(一)](https://segmentfault.com/a/1190000000683599)|\n|[奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍](https://xinranliu.me/2015-05-22-qiqu-performance)|[Chrome 开发者工具的 15 个小技巧](http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html)|\n|[Chrome开发者工具不完全指南](http://1ke.co/course/361)|[Chrome 开发者工具使用技巧](http://segmentfault.com/a/1190000003882567)|\n\n## 性能优化\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)|[移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)|\n|[给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)|[张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)|\n|[web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)|[Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)|\n|[YSLOW中文介绍](http://www.cnblogs.com/yslow)|[Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)|\n|[加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)|[由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)|\n|[【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html)|[【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css)|\n|[前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)|[前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)|\n|[HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369)|[Yslow](http://uicss.cn/yslow/#more-12319)|\n|[阿里无线前端性能优化指南(Pt.1 加载期优化)](https://github.com/amfe/article/issues/1)|[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)|\n\n## CDN\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Jquery&Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn/jquery)|[Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn)|\n|[新浪CDN](http://lib.sinaapp.com)|[百度静态资源公共库](http://cdn.code.baidu.com)|\n|[开放静态文件 CDN - 七牛](http://staticfile.org)|[CDN加速 - jq22](http://www.jq22.com/cdn)|\n|[微软CDN](http://www.asp.net/ajax/cdn)|[Angular CDN](https://code.angularjs.org/1.5.8/)|\n|[360网站卫士常用前端公共库CDN服务](http://libs.useso.com)||\n\n## Git\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Git操作](https://github.com/Wscats/Good-text-Share/issues/20)|[Git CSDN Blog](http://blog.csdn.net/qq_27080247/article/details/49942991)|\n| **Reference** | **Reference** |\n|[Git-scm](http://git-scm.com)|[Git-for-windows](https://git-for-windows.github.io)|\n|[廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)|[Gogithub](http://www.worldhello.net/gotgithub/index.html)|\n|[Git常规命令练习](http://pcottle.github.io/learnGitBranching)|[Git的资料整理](https://github.com/xirong/my-git)|\n|[我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)|[GitHub 漫游指南](https://github.com/phodal/github-roam)|\n|[GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)|[动画方式练习git](http://onlywei.github.io/explain-git-with-d3)|\n\n## Sass&Less\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Less教程](https://github.com/Wscats/less-demo/issues/1)||\n| **Reference** | **Reference** |\n|[Sass](http://www.w3cplus.com/sassguide)|[Sass中文文档](http://sass.bootcss.com)|\n|[Less](http://less.bootcss.com)||\n\n## Markdown\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown)|[Markdown入门参考](https://github.com/LearnShare/Learning-Markdown/blob/master/README.md)|\n|[Mdeditor(一款国内的在线markdown编辑器)](https://www.zybuluo.com/mdeditor)|[Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)](https://stackedit.io)|\n|[Mditor一款轻量级的markdown编辑器](http://bh-lay.github.io/mditor)|[lepture-editor](https://github.com/lepture/editor)|\n|[Markdown-editor](https://github.com/jbt/markdown-editor)||\n\n## 前端文档\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[前端知识结构](https://github.com/JacksonTian/fks)|[Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)|\n|[免费的编程中文书籍索](https://github.com/justjavac/free-programming-books-zh_CN)|[前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)|\n|[前端免费书籍大全](https://github.com/vhf/free-programming-books)|[重新介绍JavaScript（JS教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)|\n|[Gitbook](https://www.gitbook.com 国外的在线markdown可编辑成书)|[Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)|\n|[前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content)|[大前端工具集](https://github.com/nieweidong/fetool)|\n|[前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content)|[结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)|\n|[2016最新前端学习计划](http://blog.csdn.net/qq_25827845/article/details/53079094)|\n\n## 前端规范\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[通过分析github代码库总结出来的工程师代码书写习惯](http://alloyteam.github.io/CodeGuide/)|[HTML&CSS编码规范 by @mdo](http://codeguide.bootcss.com)|\n|[前端编码规范之js - by yuwenhui](http://yuwenhui.github.io)|[前端编码规范之js - by 李靖](http://www.cnblogs.com/hustskyking/p/javascript-spec.html)|\n|[Airbnb JavaScript 编码规范（简体中文版）](https://github.com/yuche/javascript#table-of-contents)|[AMD与CMD规范的区别](http://www.zhihu.com/question/20351507)|\n|[AMD与CMD规范的区别](http://www.cnblogs.com/tugenhua0707/p/3507957.html)|[KISSY 源码规范](http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html)|\n|[前端代码规范及最佳实践](http://blog.jobbole.com/79075)|[百度前端规范](http://coderlmn.github.io/code-standards)|\n|[JavaScript风格指南/编码规范（Airbnb公司版）](http://blog.jobbole.com/79484)|[网易前端开发规范](http://nec.netease.com/standard)|\n|[前端规范资源列表](https://github.com/ecomfe/spec)|[Web 前端开发规范文档](http://codecloud.net/5622.html)|\n\n## 前端面试\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[2016校招内推 -- 阿里巴巴前端 -- 四面面试经历](http://www.cnblogs.com/imwtr/p/4685546.html)|[那几个月在找工作（百度，网易游戏，华为）](https://www.nowcoder.com/discuss/3196)|\n|[前端开发面试题](https://segmentfault.com/a/1190000000465431)|[Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions)|\n|[5个经典的前端面试问题](http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E)|[Front-end-Developer-Interview-Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese)|\n|[BAT及各大互联网公司2014前端笔试面试题：JavaScript篇](http://blog.jobbole.com/78738/)|[前端开发面试题大收集](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)|\n|[收集的前端面试题和答案](https://github.com/qiu-deqing/FE-interview)|[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md)|\n|[前端面试大全](https://segmentfault.com/a/1190000005947094)|[关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)|\n\n## 前端网站\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[掘金](https://gold.xitu.io/)|[百度FEX](http://fex.baidu.com/)|\n|[阿里UED](http://www.aliued.com/)|[菜鸟教程](http://www.runoob.com/)|\n|[QDFuns](http://www.qdfuns.com/portal.php)|[幕课网](http://www.imooc.com/)|\n|[Codepen](http://codepen.io/)|[Sentsin](http://sentsin.com/daohang/)|\n\n## JS练习\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Codewars](https://www.codewars.com/)|[Javascript-puzzlers](http://javascript-puzzlers.herokuapp.com/)|\n|[Freecodecamp中文版](https://freecodecamp.cn/)|[ES6katas](http://es6katas.org/)|\n|[Now Coder牛客网](https://www.nowcoder.com/ta/js-assessment)|[Leetcode](https://leetcode.com/)|\n|[Nodeschool](https://nodeschool.io/)|[Hackerrank](https://www.hackerrank.com/)|\n\n## 算法\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)|[常见排序算法（JS版）](https://github.com/twobin/twobinSort)|\n|[经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)|[常见排序算法-js版本](https://github.com/hechangmin/jssort)|\n\n## ES\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Exploring-ES6翻译](http://es6-org.github.io/exploring-es6/)|[阮一峰 ES6](http://es6.ruanyifeng.com)|\n|[ECMA-262，第 5 版](http://yanhaijing.com/es5)|[ES5](http://es5.github.io)|\n","source":"_posts/web-share.md","raw":"---\n\ntitle: 一些WEB前端资源分享\nlayout: post\ndate: 2016-11-21 21:44:55\ncomments: true\ncategories: Blog\ntags: [share,CSS]\nkeywords: Hexo, Blog\ndescription: 包含pc端,移动端js库,css框架、CSS常用类库,工具等等...在原文基础上添加修改。\n---\n\n# 一些前端开发的干货\n\n标签（空格分隔）： 资料\n#出处:https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web\n#包含pc端,移动端js库,框架,css框架,工具等等...在原文基础上添加修改\n----\n有些虽已经年代久远，但仍然可以学到很多有用的东西,可以整理资料的链接和其他链接资料或许有重复......\n[-->>另外一个链接:分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者](https://github.com/qingniao99/front-end-collect)\n[库](https://github.com/dypsilon/frontend-dev-bookmarks)\n####[常用库查询系统](http://hackr.io/)\n\n###移动端资料\n- [支付宝无线Web开发经验谈](http://am-team.github.io/amg/dev-exp-doc.html)\n- [移动前端系列——移动端页面坑与排坑技巧( 2014-12-08 )](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201411/290576.shtml)\n- [移动web最佳实践（2013）](http://www.ipresst.com/play/528892e11d0495f30f00762e)\n- [移动Web前端框架 ( 2014 ) ](http://www.jingwentian.com/t-135)\n- [移动端自适应方案-lib.flexible,淘宝手机版都是用这个框架](https://github.com/amfe/lib.flexible)\n- [iOS 微信 音频 视频自动播放](http://www.w3ctech.com/topic/1165#rd)\n- [微信JS-SDK说明文档](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)\n- [微信js demo](http://203.195.235.76/jssdk/)\n- [QQ浏览器X5内核问题汇总](http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/)\n- [手机分辨率查询](http://viewportsizes.com/)\n- [移动端响应式框架-测试阶段,不适用于复杂页面](https://github.com/peunzhang/pageResponse)\n## 1、CSS\n\n-  Ihover 鼠标经过时间特效\n\n(http://gudh.github.io/ihover/dist/index.html)\n\n-  SliderBar 侧边栏侧滑效果\nhttps://github.com/christophery/pushy\n\n\n-  Loaders.css 加载效果\nhttps://github.com/ConnorAtherton/loaders.css\n\n-  CSS Spinners \nhttps://github.com/jlong/css-spinners\n\n-  fancybox 图片预览效果\nhttp://fancyapps.com/fancybox/demo/\n-\n图片预览效果\nhttp://codepen.io/dimsemenov/pen/vKrqs\n\n-   分类筛选插件\nhttps://github.com/giotiskl/Filterizr \n-http://www.dowebok.com/demo/211/\n\n\n\n ## [github  icon库大全](https://github.com/lvwzhen/iconpark)\n\n\n [阿里巴巴iconfont](http://www.iconfont.cn)\n [fontello](http://fontello.com/)\n [Font Awesome](http://www.fontawesome.com.cn/)\n [H-ui 前端框架](http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml)\n\n\n:smiley_cat:_These share data are from my usual work and learning，hoping to help you，If you like you can star_\n\n## Javascript\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Javascript深浅拷贝](https://github.com/Wscats/Good-text-Share/issues/57)|[Javascript中的apply和call继承](https://github.com/Wscats/Good-text-Share/issues/56)|\n|[Javascript的jsonp原理](https://github.com/Wscats/Good-text-Share/issues/55)|[Javascript监听触摸事件](https://github.com/Wscats/Good-text-Share/issues/49)|\n|[Javascript中的var self = this](https://github.com/Wscats/Good-text-Share/issues/52)|[Javascript面向对象编程](https://github.com/Wscats/Good-text-Share/issues/32)|\n|[Javascript滑屏切换场景](https://github.com/Wscats/Good-text-Share/issues/14)|[Javascript获取经纬度，关于调用百度API的问题](https://github.com/Wscats/Good-text-Share/issues/16)|\n|[妙用Javascript运算符](https://github.com/Wscats/Good-text-Share/issues/3)|[深入理解Javascript函数编程](https://github.com/Wscats/Good-text-Share/issues/1)|\n|[Javascript的setTimeout详细用例](https://github.com/Wscats/Good-text-Share/issues/4)|[sessionstorage，localstorage和cookie](https://github.com/Wscats/Good-text-Share/issues/42)|\n|[JS日期对比](https://github.com/Wscats/Good-text-Share/issues/11)|[JSONP参考文章](https://github.com/Wscats/Good-text-Share/issues/10)|\n|[Javascript的createElement](https://wscats.github.io/angular-demo/createElement.html)|[Javascript的createDocumentFragment](https://wscats.github.io/angular-demo/createDocumentFragment.html)|\n|[sessionStorage和localStorage](https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html)|[像素帧动画](https://wscats.github.io/angular-demo/像素动画.html)|\n| **Reference** | **Reference** |\n|[JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)|[JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)|\n|[JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book)|[阮一峰 Javascript](http://javascript.ruanyifeng.com)|\n|[前端 TOP 100](https://www.awesomes.cn/rank)|[小白的零基础JavaScript全栈教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)|\n\n## UI\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[WeUI](https://github.com/weui/weui)|[Bootstrap](http://www.bootcss.com)|\n|[MUI-最接近原生APP体验的高性能前端框架](http://dev.dcloud.net.cn/mui/)|[Amaze UI中国首个开源HTML5跨屏前端框架](http://amazeui.org)|\n|[Frozen UI](http://frozenui.github.io/)|[Foundation](http://foundation.zurb.com/)|\n|[SUI](http://sui.taobao.org/sui/docs/)|[ZUI](https://github.com/easysoft/zui)|\n|[淘宝HTML5前端框架](http://m.sui.taobao.org)|[KISSY - 阿里前端JavaScript库](http://docs.kissyui.com)|\n|[网易Nej - Nice Easy Javascript](http://nej.netease.com)|[Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)|\n|[Smart UI](http://smartui.chinamzz.com)|[雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids)|\n\n## CSS\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[CSS Flex布局](https://github.com/Wscats/Good-text-Share/issues/41)|[移动前端开发CSS3](https://github.com/Wscats/Good-text-Share/issues/38)|\n|[响应式布局 媒体查询](https://github.com/Wscats/Good-text-Share/issues/43)|[CSS图片响应式布局](https://github.com/Wscats/Good-text-Share/issues/34)|\n|[lessDemo的less文件](https://wscats.github.io/angular-demo/stylesheets/styles.less)||\n| **Reference** | **Reference** |\n|[CSS 语法参考](http://tympanus.net/codrops/css_reference)|[CSS3动画手册](http://isux.tencent.com/css3/index.html)|\n|[腾讯css3动画制作工具](http://isux.tencent.com/css3/tools.html)|[animate.css](http://daneden.github.io/animate.css)|\n|[Animated Books with CSS 3D Transforms](http://tympanus.net/Development/AnimatedBooks/)|[Browserhacks](http://browserhacks.com/)|\n\n## HTML\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n[HTML5有哪些让你惊艳的demo](http://www.zhihu.com/question/24398907)|[Wallpaperbetter](http://www.wallpaperbetter.com/)|\n\n## Angular\n| Article | Angular文档 |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Angular源码解读publishExternalAPI函数](https://github.com/Wscats/Good-text-Share/issues/26)|[Angular源码解读setupModuleLoader函数](https://github.com/Wscats/Good-text-Share/issues/25)|\n|[Angular的ng-style用法](https://github.com/Wscats/Good-text-Share/issues/35)|[Angular判断在那个浏览器下打开的服务](https://github.com/Wscats/Good-text-Share/issues/29)|\n|[Angular文字折叠展开组件的原理分析](https://github.com/Wscats/Good-text-Share/issues/28)|[Angular服务Request异步请求的详细分析](https://github.com/Wscats/Good-text-Share/issues/21)|\n|[Angular自定义service服务详解](https://github.com/Wscats/Good-text-Share/issues/24)|[Angular自定义判断上一页是否存在的服务](https://github.com/Wscats/Good-text-Share/issues/22)|\n|[Angular操作cookies方法](https://github.com/Wscats/Good-text-Share/issues/19)|[Angular打印错误的minErr函数](https://github.com/Wscats/Good-text-Share/issues/18)|\n|[Angular的fromJson与toJson方法](https://github.com/Wscats/Good-text-Share/issues/17)|[Angular用ng-repeat生成表单并绑定ng-click时的一个细节](https://github.com/Wscats/Good-text-Share/issues/12)|\n|[Angular的run方法巧妙运用](https://github.com/Wscats/Good-text-Share/issues/6)|[Angular处理Html转义问题](https://github.com/Wscats/Good-text-Share/issues/5)|\n|[ng-repeat绑定事件和嵌套](ng-repeat绑定事件和嵌套)|[Angular的post请求后台接受不了数据的解决方法](https://github.com/Wscats/angular-demo/issues/4)|\n|[ionic总结](https://github.com/Wscats/angular-demo/issues/19)|[ui-route和ng-route](https://github.com/Wscats/angular-demo/issues/17)|\n|[ng-options&&ng-switch](https://github.com/Wscats/angular-demo/issues/15)|[directive组件作用域](https://github.com/Wscats/angular-demo/issues/14)|\n|[表单认证](https://github.com/Wscats/angular-demo/issues/13)|[$broadcast,$emit and $on](https://github.com/Wscats/angular-demo/issues/11)|\n|[自定义过滤器](https://github.com/Wscats/angular-demo/issues/9)|[自定义手势指令ng-touch](https://github.com/Wscats/angular-demo/issues/8)|\n|[ng-animate](https://github.com/Wscats/angular-demo/issues/7)|[单页面应用的技术点](https://github.com/Wscats/angular-demo/issues/3)|\n| **Guess you like** |**AppDemo**|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[AngularStovepipe](https://wscats.github.io/angular-demo/spa/Stovepipe/index.html)|[Angular的新闻客户端](https://wscats.github.io/angular-demo/spa/TT/index.html)|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[Angular内联编辑器](https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html)|[Angular即时搜索](https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html)|\n|[Angular导航菜单](https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html)|[Angular订单表单](https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html)|\n|[Angular切换网格](https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html)|[Angular新闻＋WEUI DEMO](https://wscats.github.io/angular-demo/spa/news/index.html) [源码](https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News)|\n| **Controller** |**控制器**|\n|[Angular控制器demo](https://wscats.github.io/angular-demo/view/student.html)||\n| **SPA DEMO** |**单页面应用**|\n|[Angular+Weui单页面应用DEMO-每日笑话](https://wscats.github.io/angular-demo/weui每日笑话.html)||\n| **Service** |**服务**|\n|[Angular自定义服务的常用方法](https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md)|[Angular部分服务demo](https://wscats.github.io/angular-demo/部分服务demo.html)|\n|[Angular自定义Canvas画图服务](https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html)|[Angular自定义http服务 面向对象封装](https://wscats.github.io/angular-demo/自定义http服务.html)|\n| **Directive** |**组件与指令**|\n|[Angular自定义手势指令](https://wscats.github.io/angular-demo/自定义手势事件.html)|[Angular自定义轮播图组件](https://wscats.github.io/angular-demo/自定义directive轮播图.html)|\n|[Angular自定义下拉刷新组件1](https://wscats.github.io/angular-demo/下拉刷新.html)|[Angular自定义下拉刷新组件2](https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html)|\n| **Router** |**路由**|\n|[Angular路由嵌套](https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html)|[Angular路由单页多个ui-view](https://wscats.github.io/angular-demo/uiRoute/index.html)|\n| **Filter** |**过滤器**|\n|[Angular自带过滤器](https://wscats.github.io/angular-demo/angular自带过滤器.html)|[Angular自定义关键词检索过滤器](https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html)|\n| **Animate** |**动画**|\n|[Angular ng-animate动画1](https://wscats.github.io/angular-demo/ng-animate动画.html)|[Angular ng-animate动画2](https://wscats.github.io/angular-demo/ng-animate动画2.html)|\n| **Other** |**其他**|\n|[Angular中使用iframe](https://wscats.github.io/angular-demo/iframesdemo.html)|[Angular三级联动(1)](https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html)|\n|[Angular中使用ng-switch](https://wscats.github.io/angular-demo/ngSwitch.html)|[百度定位DEMO](https://wscats.github.io/angular-demo/百度地图定位DEMO.html)|\n|[Angular三级联动(2)](https://wscats.github.io/angular-demo/三级联动改进.html)|[Angular事件监听](https://wscats.github.io/angular-demo/事件监听.html)|\n|[jQuery模拟ng-repeat](https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html)|[lessDemo](https://wscats.github.io/angular-demo/lessDemo.html)|\n|[Angular自定义cookie服务和ngCookie的使用](https://wscats.github.io/angular-demo/ngCookie.html)|[图灵机器人](https://wscats.github.io/angular-demo/图灵机器人.html)|\n|[Angular利用angular.module()实现模块化](https://wscats.github.io/angular-demo/angular模块化.html)|[Angular的form表单验证](https://wscats.github.io/angular-demo/form表单验证.html)|\n|[Angular的ng-repeat嵌套](https://wscats.github.io/angular-demo/ng-repeat嵌套.html)|[Angular利用angular.module()实现模块化2](https://wscats.github.io/angular-demo/angular模块化2.html)|\n| **PHP** | **PHP** |\n|[PHP CURL请求的小细节](https://github.com/Wscats/Good-text-Share/issues/53)||\n| **Reference** | **Reference** |\n|[最流行的PHP 代码规范](https://segmentfault.com/a/1190000000443795)|[最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)|\n|[Angular.js的一些学习资源](http://blog.aijc.net/AngularLearning/)|[Angularjs中文社区](http://angularjs.cn)|\n|[一些扩展Angular UI组件](https://github.com/angular-ui)|[Angular UI](http://mgcrea.github.io/angular-strap)|\n|[AngularJS在线教程](http://each.sinaapp.com/angular)|[Angular学习笔记](http://www.zouyesheng.com/angular.html)|\n\n## React\n| React | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[React教程 菜鸟教程](http://www.runoob.com/react/react-tutorial.html)|[React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu)|\n|[React开发中文手册-极客学院](http://wiki.jikexueyuan.com/project/react/)|[React教程-汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/)|\n|[React.js快速开始](http://www.phperz.com/article/15/0712/140537.html#)|[Reactjs 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)|\n|[React 入门教程](https://hulufei.gitbooks.io/react-tutorial/content/introduction.html)|[汇智网 React教程](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)|\n|[轻松入门React和Webpack](https://segmentfault.com/a/1190000002767365)|[React中文索引](http://nav.react-china.org/#docs)|\n|[Redux 中文文档](http://cn.redux.js.org/)|[React Router官方文档中文翻译](https://github.com/react-guide/react-router-cn)|\n|[React入门教程](http://www.cnblogs.com/kunyashaw/p/5619256.html)|[React介绍及实践教程](http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html)|\n|[React.js 官方网址](https://facebook.github.io/react/index.html)|[React.js 官方文档](https://facebook.github.io/react/docs/getting-started.html)|\n|[React.js material UI](http://material-ui.com/#)|[React.js TouchstoneJS UI](http://touchstonejs.io)|\n|[React.js amazeui UI](http://amazeui.org/react)|[React 入门实例教程 - 阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)|\n|[React Native 中文版](http://wiki.jikexueyuan.com/project/react-native)|[Webpack 和 React 小书 - gitbook](https://fakefish.github.io/react-webpack-cookbook)|\n\n## Vue\n| Vue |AppDemo|Demo|\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[NewsDemo](https://wscats.github.io/vue-demo/news/index.html)|[vue计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|[vue生命周期](https://wscats.github.io/vue-demo/vue生命周期.html)|\n| **Article** |**Vue文档**||\n|[Vue-cli脚手架](https://github.com/Wscats/vue-demo/issues/2)|[Vue组件](https://github.com/Wscats/vue-demo/issues/3)|[vue自定义指令](https://github.com/Wscats/vue-demo/issues/8)|\n|[Vue过渡动画](https://github.com/Wscats/vue-demo/issues/9)|[Vue指令](https://github.com/Wscats/vue-demo/issues/7)|[Vue api文档](https://github.com/Wscats/vue-demo/issues/6)|\n|[Vue执行ajax请求](https://github.com/Wscats/vue-demo/issues/5)|[vue实现类似angular服务的方法](https://github.com/Wscats/vue-demo/issues/4)|[Vue源码参考文档](https://github.com/Wscats/vue-demo/issues/10)|\n| **Router** |**路由**||\n|[路由demo](https://wscats.github.io/vue-demo/路由.html)|[路由demo2](https://wscats.github.io/vue-demo/路由2.html)||\n| **Directive** |**指令**||\n|[指令demo](https://wscats.github.io/vue-demo/指令.html)|[自定义指令demo](https://wscats.github.io/vue-demo/自定义指令.html)|[滑动手势demo](https://wscats.github.io/vue-demo/滑动手势指令.html)|\n| **Filter** |**过滤器**||\n|[过滤器demo](https://wscats.github.io/vue-demo/过滤器.html)|[过滤器实现分页demo](https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html)|[过滤器读写数据](https://wscats.github.io/vue-demo/vue过滤器读写数据.html)|\n| **Transition** |**过渡**||\n|[过渡demo](https://wscats.github.io/vue-demo/过渡.html)|[过渡demo2](https://wscats.github.io/vue-demo/过渡2.html)||\n| **Form** |**表单**||\n|[获取表单值](https://wscats.github.io/vue-demo/vue获取表单值.html)|||\n| **Computed** |**计算**||\n|[计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|||\n| Component |组件||\n|[组件demo](https://wscats.github.io/vue-demo/组件.html)|||\n| **Reference** | **Reference** | **Reference** |\n|[Vue官网](http://cn.vuejs.org)|[Vue论坛](http://forum.vuejs.org)|[Awesome-vue](https://github.com/vuejs/awesome-vue)|\n\n\n## Node\n| Node | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[node技巧](https://github.com/Wscats/Good-text-Share/issues/44)|[NodeJs静态服务器](https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer)|\n| **Reference** | **Reference** |\n|[Node.js 包教不包会](https://github.com/alsotang/node-lessons)|[七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)|\n|[从零开始nodejs系列文章](http://blog.fens.me/series-nodejs)|[Node入门](http://www.nodebeginner.org/index-zh-cn.html)|\n|[Node初学者入门，一本全面的NodeJS教程](http://ourjs.com/detail/529ca5950cb6498814000005)||\n\n## Gulp \n| Gulp | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Gulp Demo](https://github.com/Wscats/glup)||\n| **Gulp** | **Reference** |\n|[Gulp官网](http://gulpjs.com)|[Gulp中文网](http://www.gulpjs.com.cn)|\n|[Gulp资料收集](https://github.com/Platform-CUF/use-gulp)|[Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)|\n|[Gulp插件](http://gulpjs.com/plugins])|[Gulp不完全入门教程](http://www.ido321.com/1622.html)|\n|[Gulp 入门指南](https://github.com/nimojs/gulp-book)||\n\n## 其他\n| Other | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[关于Pornographic website的一些前端分析](https://github.com/Wscats/node-demo/issues/4)|[微信公众号开发](https://github.com/Wscats/Good-text-Share/issues/50)|\n|[Atom技巧总结](https://github.com/Wscats/Good-text-Share/issues/30)|[Mac小技巧](https://github.com/Wscats/Good-text-Share/issues/46)|\n|[CSDN页面内JS跳转脚本](https://github.com/Wscats/Good-text-Share/issues/9)|[CSDN博客隐藏配置](https://github.com/Wscats/Good-text-Share/issues/8)|\n|[百度设置小度机器人出现](https://github.com/Wscats/Good-text-Share/issues/7)|[前端冷知识，妙用浏览器地址栏](https://github.com/Wscats/Good-text-Share/issues/2)|\n|[Vim笔记](https://github.com/Wscats/Good-text-Share/issues/27)|[Cordova配置&&Ionic配置（WebApp混合开发环境）](https://github.com/Wscats/Good-text-Share/issues/48)|\n|[IE8及以下按钮超链接无法跳转的问题](https://github.com/Wscats/Good-text-Share/issues/33)||\n\n## 分享功能\n| Share | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[百度分享(PC)](http://share.baidu.com)|[JiaThis(PC)](http://jiathis.com)|\n|[社会化分享组件(Mobile)](http://developer.baidu.com/soc/share)|[ShareSDK轻松实现社会化功能(Mobile)](http://www.mob.com)|\n|[友盟分享(Mobile)](http://dev.umeng.com/social/android/quick-integration)||\n\n## 在线演示\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[js 在线编辑 - runjs](http://runjs.cn)|[js 在线编辑 - jsbin](http://jsbin.com)|\n|[js 在线编辑 - codepen](http://codepen.io)|[js 在线编辑 - jsfiddle](http://jsfiddle.net)|\n|[java 在线编辑 - runjs](http://ideone.com)|[js 在线编辑 - hcharts](http://code.hcharts.cn)|\n|[js 在线编辑 - jsdm](http://jsdm.com)|[sql 在线编辑 - sqlfiddle](http://sqlfiddle.com)|\n|[mozilla 在线编辑器](https://thimble.mozilla.org)||\n\n## 富文本编辑器\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[百度ueditor](http://ueditor.baidu.com/website)|[ckeditor](http://ckeditor.com)|\n|[tinymce](https://www.tinymce.com)|[kindeditor](http://kindeditor.net)|\n|[wysiwyg](http://www.bootcss.com/p/bootstrap-wysiwyg)|[BachEditor](http://integ.github.io/BachEditor)|\n|[simditor](https://github.com/mycolorway/simditor)|[summernote](https://github.com/summernote/summernote)|\n|[Squire](http://neilj.github.io/Squire)|[wangEditor](https://github.com/wangfupeng1988/wangEditor)|\n\n## Chrome\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Chrome - 基础](http://www.cnblogs.com/constantince/p/4565261.html)|[Chrome - 进阶](http://www.cnblogs.com/constantince/p/4579121.html)|\n|[Chrome - 性能](http://www.cnblogs.com/constantince/p/4585983.html)|[Chrome - 性能进阶](http://www.cnblogs.com/constantince/p/4607497.html)|\n|[Chrome - 移动](http://www.cnblogs.com/constantince/p/4624241.html)|[Chrome - 使用技巧](http://www.cnblogs.com/liyunhua/p/4544738.html)|\n|[Chrome - Console控制台不完全指南](http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html)|[chrome开发工具快捷键](http://anti-code.com/devtools-cheatsheet)|\n|[Chrome 开发工具 Workspace 使用](http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace)|[Chrome神器Vimium快捷键学习记录](http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html)|\n|[Sass调试-w3cplus](http://www.w3cplus.com/sassguide/debug.html)|[如何更专业的使用Chrome开发者工具-w3cplus](http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html)|\n|[Chrome调试canvas](http://sentsin.com/web/253.html)|[神器——Chrome开发者工具(一)](https://segmentfault.com/a/1190000000683599)|\n|[奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍](https://xinranliu.me/2015-05-22-qiqu-performance)|[Chrome 开发者工具的 15 个小技巧](http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html)|\n|[Chrome开发者工具不完全指南](http://1ke.co/course/361)|[Chrome 开发者工具使用技巧](http://segmentfault.com/a/1190000003882567)|\n\n## 性能优化\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)|[移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)|\n|[给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)|[张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)|\n|[web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)|[Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)|\n|[YSLOW中文介绍](http://www.cnblogs.com/yslow)|[Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)|\n|[加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)|[由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)|\n|[【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html)|[【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css)|\n|[前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)|[前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)|\n|[HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369)|[Yslow](http://uicss.cn/yslow/#more-12319)|\n|[阿里无线前端性能优化指南(Pt.1 加载期优化)](https://github.com/amfe/article/issues/1)|[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)|\n\n## CDN\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Jquery&Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn/jquery)|[Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn)|\n|[新浪CDN](http://lib.sinaapp.com)|[百度静态资源公共库](http://cdn.code.baidu.com)|\n|[开放静态文件 CDN - 七牛](http://staticfile.org)|[CDN加速 - jq22](http://www.jq22.com/cdn)|\n|[微软CDN](http://www.asp.net/ajax/cdn)|[Angular CDN](https://code.angularjs.org/1.5.8/)|\n|[360网站卫士常用前端公共库CDN服务](http://libs.useso.com)||\n\n## Git\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Git操作](https://github.com/Wscats/Good-text-Share/issues/20)|[Git CSDN Blog](http://blog.csdn.net/qq_27080247/article/details/49942991)|\n| **Reference** | **Reference** |\n|[Git-scm](http://git-scm.com)|[Git-for-windows](https://git-for-windows.github.io)|\n|[廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)|[Gogithub](http://www.worldhello.net/gotgithub/index.html)|\n|[Git常规命令练习](http://pcottle.github.io/learnGitBranching)|[Git的资料整理](https://github.com/xirong/my-git)|\n|[我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)|[GitHub 漫游指南](https://github.com/phodal/github-roam)|\n|[GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)|[动画方式练习git](http://onlywei.github.io/explain-git-with-d3)|\n\n## Sass&Less\n| Article | Article |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Less教程](https://github.com/Wscats/less-demo/issues/1)||\n| **Reference** | **Reference** |\n|[Sass](http://www.w3cplus.com/sassguide)|[Sass中文文档](http://sass.bootcss.com)|\n|[Less](http://less.bootcss.com)||\n\n## Markdown\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown)|[Markdown入门参考](https://github.com/LearnShare/Learning-Markdown/blob/master/README.md)|\n|[Mdeditor(一款国内的在线markdown编辑器)](https://www.zybuluo.com/mdeditor)|[Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)](https://stackedit.io)|\n|[Mditor一款轻量级的markdown编辑器](http://bh-lay.github.io/mditor)|[lepture-editor](https://github.com/lepture/editor)|\n|[Markdown-editor](https://github.com/jbt/markdown-editor)||\n\n## 前端文档\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[前端知识结构](https://github.com/JacksonTian/fks)|[Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)|\n|[免费的编程中文书籍索](https://github.com/justjavac/free-programming-books-zh_CN)|[前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)|\n|[前端免费书籍大全](https://github.com/vhf/free-programming-books)|[重新介绍JavaScript（JS教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)|\n|[Gitbook](https://www.gitbook.com 国外的在线markdown可编辑成书)|[Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)|\n|[前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content)|[大前端工具集](https://github.com/nieweidong/fetool)|\n|[前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content)|[结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)|\n|[2016最新前端学习计划](http://blog.csdn.net/qq_25827845/article/details/53079094)|\n\n## 前端规范\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[通过分析github代码库总结出来的工程师代码书写习惯](http://alloyteam.github.io/CodeGuide/)|[HTML&CSS编码规范 by @mdo](http://codeguide.bootcss.com)|\n|[前端编码规范之js - by yuwenhui](http://yuwenhui.github.io)|[前端编码规范之js - by 李靖](http://www.cnblogs.com/hustskyking/p/javascript-spec.html)|\n|[Airbnb JavaScript 编码规范（简体中文版）](https://github.com/yuche/javascript#table-of-contents)|[AMD与CMD规范的区别](http://www.zhihu.com/question/20351507)|\n|[AMD与CMD规范的区别](http://www.cnblogs.com/tugenhua0707/p/3507957.html)|[KISSY 源码规范](http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html)|\n|[前端代码规范及最佳实践](http://blog.jobbole.com/79075)|[百度前端规范](http://coderlmn.github.io/code-standards)|\n|[JavaScript风格指南/编码规范（Airbnb公司版）](http://blog.jobbole.com/79484)|[网易前端开发规范](http://nec.netease.com/standard)|\n|[前端规范资源列表](https://github.com/ecomfe/spec)|[Web 前端开发规范文档](http://codecloud.net/5622.html)|\n\n## 前端面试\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[2016校招内推 -- 阿里巴巴前端 -- 四面面试经历](http://www.cnblogs.com/imwtr/p/4685546.html)|[那几个月在找工作（百度，网易游戏，华为）](https://www.nowcoder.com/discuss/3196)|\n|[前端开发面试题](https://segmentfault.com/a/1190000000465431)|[Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions)|\n|[5个经典的前端面试问题](http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E)|[Front-end-Developer-Interview-Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese)|\n|[BAT及各大互联网公司2014前端笔试面试题：JavaScript篇](http://blog.jobbole.com/78738/)|[前端开发面试题大收集](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)|\n|[收集的前端面试题和答案](https://github.com/qiu-deqing/FE-interview)|[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md)|\n|[前端面试大全](https://segmentfault.com/a/1190000005947094)|[关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)|\n\n## 前端网站\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[掘金](https://gold.xitu.io/)|[百度FEX](http://fex.baidu.com/)|\n|[阿里UED](http://www.aliued.com/)|[菜鸟教程](http://www.runoob.com/)|\n|[QDFuns](http://www.qdfuns.com/portal.php)|[幕课网](http://www.imooc.com/)|\n|[Codepen](http://codepen.io/)|[Sentsin](http://sentsin.com/daohang/)|\n\n## JS练习\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Codewars](https://www.codewars.com/)|[Javascript-puzzlers](http://javascript-puzzlers.herokuapp.com/)|\n|[Freecodecamp中文版](https://freecodecamp.cn/)|[ES6katas](http://es6katas.org/)|\n|[Now Coder牛客网](https://www.nowcoder.com/ta/js-assessment)|[Leetcode](https://leetcode.com/)|\n|[Nodeschool](https://nodeschool.io/)|[Hackerrank](https://www.hackerrank.com/)|\n\n## 算法\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)|[常见排序算法（JS版）](https://github.com/twobin/twobinSort)|\n|[经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)|[常见排序算法-js版本](https://github.com/hechangmin/jssort)|\n\n## ES\n| Reference | Reference |\n| ------------- |:-------------:| :-------------:| :-------------:| -----:|\n|[Exploring-ES6翻译](http://es6-org.github.io/exploring-es6/)|[阮一峰 ES6](http://es6.ruanyifeng.com)|\n|[ECMA-262，第 5 版](http://yanhaijing.com/es5)|[ES5](http://es5.github.io)|\n","slug":"web-share","published":1,"updated":"2016-12-12T01:09:10.440Z","photos":[],"link":"","_id":"cj4sal69y0015ek5bjubyykiv","content":"<h1 id=\"一些前端开发的干货\"><a href=\"#一些前端开发的干货\" class=\"headerlink\" title=\"一些前端开发的干货\"></a>一些前端开发的干货</h1><p>标签（空格分隔）： 资料</p>\n<p>#出处:<a href=\"https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web\" target=\"_blank\" rel=\"external\">https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web</a></p>\n<h2 id=\"包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改\"><a href=\"#包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改\" class=\"headerlink\" title=\"#包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改\"></a>#包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改</h2><p>有些虽已经年代久远，但仍然可以学到很多有用的东西,可以整理资料的链接和其他链接资料或许有重复……<br><a href=\"https://github.com/qingniao99/front-end-collect\" target=\"_blank\" rel=\"external\">–&gt;&gt;另外一个链接:分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a><br><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\" target=\"_blank\" rel=\"external\">库</a></p>\n<p>####<a href=\"http://hackr.io/\" target=\"_blank\" rel=\"external\">常用库查询系统</a></p>\n<p>###移动端资料</p>\n<ul>\n<li><a href=\"http://am-team.github.io/amg/dev-exp-doc.html\" target=\"_blank\" rel=\"external\">支付宝无线Web开发经验谈</a></li>\n<li><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201411/290576.shtml\" target=\"_blank\" rel=\"external\">移动前端系列——移动端页面坑与排坑技巧( 2014-12-08 )</a></li>\n<li><a href=\"http://www.ipresst.com/play/528892e11d0495f30f00762e\" target=\"_blank\" rel=\"external\">移动web最佳实践（2013）</a></li>\n<li><a href=\"http://www.jingwentian.com/t-135\" target=\"_blank\" rel=\"external\">移动Web前端框架 ( 2014 ) </a></li>\n<li><a href=\"https://github.com/amfe/lib.flexible\" target=\"_blank\" rel=\"external\">移动端自适应方案-lib.flexible,淘宝手机版都是用这个框架</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/1165#rd\" target=\"_blank\" rel=\"external\">iOS 微信 音频 视频自动播放</a></li>\n<li><a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\" target=\"_blank\" rel=\"external\">微信JS-SDK说明文档</a></li>\n<li><a href=\"http://203.195.235.76/jssdk/\" target=\"_blank\" rel=\"external\">微信js demo</a></li>\n<li><a href=\"http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/\" target=\"_blank\" rel=\"external\">QQ浏览器X5内核问题汇总</a></li>\n<li><a href=\"http://viewportsizes.com/\" target=\"_blank\" rel=\"external\">手机分辨率查询</a></li>\n<li><p><a href=\"https://github.com/peunzhang/pageResponse\" target=\"_blank\" rel=\"external\">移动端响应式框架-测试阶段,不适用于复杂页面</a></p>\n<h2 id=\"1、CSS\"><a href=\"#1、CSS\" class=\"headerlink\" title=\"1、CSS\"></a>1、CSS</h2></li>\n<li><p>Ihover 鼠标经过时间特效</p>\n</li>\n</ul>\n<p>(<a href=\"http://gudh.github.io/ihover/dist/index.html\" target=\"_blank\" rel=\"external\">http://gudh.github.io/ihover/dist/index.html</a>)</p>\n<ul>\n<li>SliderBar 侧边栏侧滑效果<br><a href=\"https://github.com/christophery/pushy\" target=\"_blank\" rel=\"external\">https://github.com/christophery/pushy</a></li>\n</ul>\n<ul>\n<li><p>Loaders.css 加载效果<br><a href=\"https://github.com/ConnorAtherton/loaders.css\" target=\"_blank\" rel=\"external\">https://github.com/ConnorAtherton/loaders.css</a></p>\n</li>\n<li><p>CSS Spinners<br><a href=\"https://github.com/jlong/css-spinners\" target=\"_blank\" rel=\"external\">https://github.com/jlong/css-spinners</a></p>\n</li>\n<li><p>fancybox 图片预览效果<br><a href=\"http://fancyapps.com/fancybox/demo/\" target=\"_blank\" rel=\"external\">http://fancyapps.com/fancybox/demo/</a><br>-<br>图片预览效果<br><a href=\"http://codepen.io/dimsemenov/pen/vKrqs\" target=\"_blank\" rel=\"external\">http://codepen.io/dimsemenov/pen/vKrqs</a></p>\n</li>\n<li><p>分类筛选插件<br><a href=\"https://github.com/giotiskl/Filterizr\" target=\"_blank\" rel=\"external\">https://github.com/giotiskl/Filterizr</a><br>-<a href=\"http://www.dowebok.com/demo/211/\" target=\"_blank\" rel=\"external\">http://www.dowebok.com/demo/211/</a></p>\n</li>\n</ul>\n<h2 id=\"github-icon库大全\"><a href=\"#github-icon库大全\" class=\"headerlink\" title=\"github  icon库大全\"></a><a href=\"https://github.com/lvwzhen/iconpark\" target=\"_blank\" rel=\"external\">github  icon库大全</a></h2><p> <a href=\"http://www.iconfont.cn\" target=\"_blank\" rel=\"external\">阿里巴巴iconfont</a><br> <a href=\"http://fontello.com/\" target=\"_blank\" rel=\"external\">fontello</a><br> <a href=\"http://www.fontawesome.com.cn/\" target=\"_blank\" rel=\"external\">Font Awesome</a><br> <a href=\"http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml\" target=\"_blank\" rel=\"external\">H-ui 前端框架</a></p>\n<p>:smiley_cat:<em>These share data are from my usual work and learning，hoping to help you，If you like you can star</em></p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/57\" target=\"_blank\" rel=\"external\">Javascript深浅拷贝</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/56\" target=\"_blank\" rel=\"external\">Javascript中的apply和call继承</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/55\" target=\"_blank\" rel=\"external\">Javascript的jsonp原理</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/49\" target=\"_blank\" rel=\"external\">Javascript监听触摸事件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/52\" target=\"_blank\" rel=\"external\">Javascript中的var self = this</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/32\" target=\"_blank\" rel=\"external\">Javascript面向对象编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/14\" target=\"_blank\" rel=\"external\">Javascript滑屏切换场景</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/16\" target=\"_blank\" rel=\"external\">Javascript获取经纬度，关于调用百度API的问题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/3\" target=\"_blank\" rel=\"external\">妙用Javascript运算符</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/1\" target=\"_blank\" rel=\"external\">深入理解Javascript函数编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/4\" target=\"_blank\" rel=\"external\">Javascript的setTimeout详细用例</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/42\" target=\"_blank\" rel=\"external\">sessionstorage，localstorage和cookie</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/11\" target=\"_blank\" rel=\"external\">JS日期对比</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/10\" target=\"_blank\" rel=\"external\">JSONP参考文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/createElement.html\" target=\"_blank\" rel=\"external\">Javascript的createElement</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/createDocumentFragment.html\" target=\"_blank\" rel=\"external\">Javascript的createDocumentFragment</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html\" target=\"_blank\" rel=\"external\">sessionStorage和localStorage</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/像素动画.html\" target=\"_blank\" rel=\"external\">像素帧动画</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002640298\" target=\"_blank\" rel=\"external\">JavaScript中的this陷阱的最全收集–没有之一</a></td>\n<td style=\"text-align:center\"><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\" target=\"_blank\" rel=\"external\">JS函数式编程指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://liubin.github.io/promises-book\" target=\"_blank\" rel=\"external\">JavaScript Promise迷你书（中文版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript.ruanyifeng.com\" target=\"_blank\" rel=\"external\">阮一峰 Javascript</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.awesomes.cn/rank\" target=\"_blank\" rel=\"external\">前端 TOP 100</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"external\">小白的零基础JavaScript全栈教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/weui/weui\" target=\"_blank\" rel=\"external\">WeUI</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.bootcss.com\" target=\"_blank\" rel=\"external\">Bootstrap</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.dcloud.net.cn/mui/\" target=\"_blank\" rel=\"external\">MUI-最接近原生APP体验的高性能前端框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://amazeui.org\" target=\"_blank\" rel=\"external\">Amaze UI中国首个开源HTML5跨屏前端框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://frozenui.github.io/\" target=\"_blank\" rel=\"external\">Frozen UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"external\">Foundation</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sui.taobao.org/sui/docs/\" target=\"_blank\" rel=\"external\">SUI</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/easysoft/zui\" target=\"_blank\" rel=\"external\">ZUI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://m.sui.taobao.org\" target=\"_blank\" rel=\"external\">淘宝HTML5前端框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://docs.kissyui.com\" target=\"_blank\" rel=\"external\">KISSY - 阿里前端JavaScript库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nej.netease.com\" target=\"_blank\" rel=\"external\">网易Nej - Nice Easy Javascript</a></td>\n<td style=\"text-align:center\"><a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\" target=\"_blank\" rel=\"external\">Kendo UI MVVM Demo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://smartui.chinamzz.com\" target=\"_blank\" rel=\"external\">Smart UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://developer.yahoo.com/yui/grids\" target=\"_blank\" rel=\"external\">雅虎UI - CSS UI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/41\" target=\"_blank\" rel=\"external\">CSS Flex布局</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/38\" target=\"_blank\" rel=\"external\">移动前端开发CSS3</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/43\" target=\"_blank\" rel=\"external\">响应式布局 媒体查询</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/34\" target=\"_blank\" rel=\"external\">CSS图片响应式布局</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/stylesheets/styles.less\" target=\"_blank\" rel=\"external\">lessDemo的less文件</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/codrops/css_reference\" target=\"_blank\" rel=\"external\">CSS 语法参考</a></td>\n<td style=\"text-align:center\"><a href=\"http://isux.tencent.com/css3/index.html\" target=\"_blank\" rel=\"external\">CSS3动画手册</a></td>\n</tr>\n<tr>\n<td><a href=\"http://isux.tencent.com/css3/tools.html\" target=\"_blank\" rel=\"external\">腾讯css3动画制作工具</a></td>\n<td style=\"text-align:center\"><a href=\"http://daneden.github.io/animate.css\" target=\"_blank\" rel=\"external\">animate.css</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/Development/AnimatedBooks/\" target=\"_blank\" rel=\"external\">Animated Books with CSS 3D Transforms</a></td>\n<td style=\"text-align:center\"><a href=\"http://browserhacks.com/\" target=\"_blank\" rel=\"external\">Browserhacks</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://www.zhihu.com/question/24398907\" target=\"_blank\" rel=\"external\">HTML5有哪些让你惊艳的demo</a>|<a href=\"http://www.wallpaperbetter.com/\" target=\"_blank\" rel=\"external\">Wallpaperbetter</a>|</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Angular文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/26\" target=\"_blank\" rel=\"external\">Angular源码解读publishExternalAPI函数</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/25\" target=\"_blank\" rel=\"external\">Angular源码解读setupModuleLoader函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/35\" target=\"_blank\" rel=\"external\">Angular的ng-style用法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/29\" target=\"_blank\" rel=\"external\">Angular判断在那个浏览器下打开的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/28\" target=\"_blank\" rel=\"external\">Angular文字折叠展开组件的原理分析</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/21\" target=\"_blank\" rel=\"external\">Angular服务Request异步请求的详细分析</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/24\" target=\"_blank\" rel=\"external\">Angular自定义service服务详解</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/22\" target=\"_blank\" rel=\"external\">Angular自定义判断上一页是否存在的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/19\" target=\"_blank\" rel=\"external\">Angular操作cookies方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/18\" target=\"_blank\" rel=\"external\">Angular打印错误的minErr函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/17\" target=\"_blank\" rel=\"external\">Angular的fromJson与toJson方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/12\" target=\"_blank\" rel=\"external\">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/6\" target=\"_blank\" rel=\"external\">Angular的run方法巧妙运用</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/5\" target=\"_blank\" rel=\"external\">Angular处理Html转义问题</a></td>\n</tr>\n<tr>\n<td><a href=\"ng-repeat绑定事件和嵌套\">ng-repeat绑定事件和嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/4\" target=\"_blank\" rel=\"external\">Angular的post请求后台接受不了数据的解决方法</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/19\" target=\"_blank\" rel=\"external\">ionic总结</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/17\" target=\"_blank\" rel=\"external\">ui-route和ng-route</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/15\" target=\"_blank\" rel=\"external\">ng-options&amp;&amp;ng-switch</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/14\" target=\"_blank\" rel=\"external\">directive组件作用域</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/13\" target=\"_blank\" rel=\"external\">表单认证</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/11\" target=\"_blank\" rel=\"external\">$broadcast,$emit and $on</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/9\" target=\"_blank\" rel=\"external\">自定义过滤器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/8\" target=\"_blank\" rel=\"external\">自定义手势指令ng-touch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/7\" target=\"_blank\" rel=\"external\">ng-animate</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/3\" target=\"_blank\" rel=\"external\">单页面应用的技术点</a></td>\n</tr>\n<tr>\n<td><strong>Guess you like</strong></td>\n<td style=\"text-align:center\"><strong>AppDemo</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"external\">Angular商城Demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"external\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/Stovepipe/index.html\" target=\"_blank\" rel=\"external\">AngularStovepipe</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/TT/index.html\" target=\"_blank\" rel=\"external\">Angular的新闻客户端</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"external\">Angular商城Demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"external\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html\" target=\"_blank\" rel=\"external\">Angular内联编辑器</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html\" target=\"_blank\" rel=\"external\">Angular即时搜索</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html\" target=\"_blank\" rel=\"external\">Angular导航菜单</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html\" target=\"_blank\" rel=\"external\">Angular订单表单</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html\" target=\"_blank\" rel=\"external\">Angular切换网格</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/news/index.html\" target=\"_blank\" rel=\"external\">Angular新闻＋WEUI DEMO</a> <a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News\" target=\"_blank\" rel=\"external\">源码</a></td>\n</tr>\n<tr>\n<td><strong>Controller</strong></td>\n<td style=\"text-align:center\"><strong>控制器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/view/student.html\" target=\"_blank\" rel=\"external\">Angular控制器demo</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>SPA DEMO</strong></td>\n<td style=\"text-align:center\"><strong>单页面应用</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/weui每日笑话.html\" target=\"_blank\" rel=\"external\">Angular+Weui单页面应用DEMO-每日笑话</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Service</strong></td>\n<td style=\"text-align:center\"><strong>服务</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md\" target=\"_blank\" rel=\"external\">Angular自定义服务的常用方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/部分服务demo.html\" target=\"_blank\" rel=\"external\">Angular部分服务demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html\" target=\"_blank\" rel=\"external\">Angular自定义Canvas画图服务</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义http服务.html\" target=\"_blank\" rel=\"external\">Angular自定义http服务 面向对象封装</a></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td style=\"text-align:center\"><strong>组件与指令</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义手势事件.html\" target=\"_blank\" rel=\"external\">Angular自定义手势指令</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义directive轮播图.html\" target=\"_blank\" rel=\"external\">Angular自定义轮播图组件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/下拉刷新.html\" target=\"_blank\" rel=\"external\">Angular自定义下拉刷新组件1</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html\" target=\"_blank\" rel=\"external\">Angular自定义下拉刷新组件2</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td style=\"text-align:center\"><strong>路由</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html\" target=\"_blank\" rel=\"external\">Angular路由嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/uiRoute/index.html\" target=\"_blank\" rel=\"external\">Angular路由单页多个ui-view</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td style=\"text-align:center\"><strong>过滤器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular自带过滤器.html\" target=\"_blank\" rel=\"external\">Angular自带过滤器</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html\" target=\"_blank\" rel=\"external\">Angular自定义关键词检索过滤器</a></td>\n</tr>\n<tr>\n<td><strong>Animate</strong></td>\n<td style=\"text-align:center\"><strong>动画</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画.html\" target=\"_blank\" rel=\"external\">Angular ng-animate动画1</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/ng-animate动画2.html\" target=\"_blank\" rel=\"external\">Angular ng-animate动画2</a></td>\n</tr>\n<tr>\n<td><strong>Other</strong></td>\n<td style=\"text-align:center\"><strong>其他</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/iframesdemo.html\" target=\"_blank\" rel=\"external\">Angular中使用iframe</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html\" target=\"_blank\" rel=\"external\">Angular三级联动(1)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngSwitch.html\" target=\"_blank\" rel=\"external\">Angular中使用ng-switch</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/百度地图定位DEMO.html\" target=\"_blank\" rel=\"external\">百度定位DEMO</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/三级联动改进.html\" target=\"_blank\" rel=\"external\">Angular三级联动(2)</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/事件监听.html\" target=\"_blank\" rel=\"external\">Angular事件监听</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html\" target=\"_blank\" rel=\"external\">jQuery模拟ng-repeat</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/lessDemo.html\" target=\"_blank\" rel=\"external\">lessDemo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngCookie.html\" target=\"_blank\" rel=\"external\">Angular自定义cookie服务和ngCookie的使用</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/图灵机器人.html\" target=\"_blank\" rel=\"external\">图灵机器人</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化.html\" target=\"_blank\" rel=\"external\">Angular利用angular.module()实现模块化</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/form表单验证.html\" target=\"_blank\" rel=\"external\">Angular的form表单验证</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-repeat嵌套.html\" target=\"_blank\" rel=\"external\">Angular的ng-repeat嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angular模块化2.html\" target=\"_blank\" rel=\"external\">Angular利用angular.module()实现模块化2</a></td>\n</tr>\n<tr>\n<td><strong>PHP</strong></td>\n<td style=\"text-align:center\"><strong>PHP</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/53\" target=\"_blank\" rel=\"external\">PHP CURL请求的小细节</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000443795\" target=\"_blank\" rel=\"external\">最流行的PHP 代码规范</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\" target=\"_blank\" rel=\"external\">最流行的PHP 代码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.aijc.net/AngularLearning/\" target=\"_blank\" rel=\"external\">Angular.js的一些学习资源</a></td>\n<td style=\"text-align:center\"><a href=\"http://angularjs.cn\" target=\"_blank\" rel=\"external\">Angularjs中文社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/angular-ui\" target=\"_blank\" rel=\"external\">一些扩展Angular UI组件</a></td>\n<td style=\"text-align:center\"><a href=\"http://mgcrea.github.io/angular-strap\" target=\"_blank\" rel=\"external\">Angular UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://each.sinaapp.com/angular\" target=\"_blank\" rel=\"external\">AngularJS在线教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zouyesheng.com/angular.html\" target=\"_blank\" rel=\"external\">Angular学习笔记</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><table>\n<thead>\n<tr>\n<th>React</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"external\">React教程 菜鸟教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu\" target=\"_blank\" rel=\"external\">React Router 使用教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react/\" target=\"_blank\" rel=\"external\">React开发中文手册-极客学院</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/\" target=\"_blank\" rel=\"external\">React教程-汇智网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.phperz.com/article/15/0712/140537.html#\" target=\"_blank\" rel=\"external\">React.js快速开始</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\" target=\"_blank\" rel=\"external\">Reactjs 2016最佳实践</a></td>\n</tr>\n<tr>\n<td><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/introduction.html\" target=\"_blank\" rel=\"external\">React 入门教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\" target=\"_blank\" rel=\"external\">汇智网 React教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002767365\" target=\"_blank\" rel=\"external\">轻松入门React和Webpack</a></td>\n<td style=\"text-align:center\"><a href=\"http://nav.react-china.org/#docs\" target=\"_blank\" rel=\"external\">React中文索引</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"external\">Redux 中文文档</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/react-guide/react-router-cn\" target=\"_blank\" rel=\"external\">React Router官方文档中文翻译</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/kunyashaw/p/5619256.html\" target=\"_blank\" rel=\"external\">React入门教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html\" target=\"_blank\" rel=\"external\">React介绍及实践教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://facebook.github.io/react/index.html\" target=\"_blank\" rel=\"external\">React.js 官方网址</a></td>\n<td style=\"text-align:center\"><a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React.js 官方文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://material-ui.com/#\" target=\"_blank\" rel=\"external\">React.js material UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://touchstonejs.io\" target=\"_blank\" rel=\"external\">React.js TouchstoneJS UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://amazeui.org/react\" target=\"_blank\" rel=\"external\">React.js amazeui UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程 - 阮一峰</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react-native\" target=\"_blank\" rel=\"external\">React Native 中文版</a></td>\n<td style=\"text-align:center\"><a href=\"https://fakefish.github.io/react-webpack-cookbook\" target=\"_blank\" rel=\"external\">Webpack 和 React 小书 - gitbook</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><table>\n<thead>\n<tr>\n<th>Vue</th>\n<th style=\"text-align:center\">AppDemo</th>\n<th style=\"text-align:center\">Demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/news/index.html\" target=\"_blank\" rel=\"external\">NewsDemo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"external\">vue计算属性</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue生命周期.html\" target=\"_blank\" rel=\"external\">vue生命周期</a></td>\n</tr>\n<tr>\n<td><strong>Article</strong></td>\n<td style=\"text-align:center\"><strong>Vue文档</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/2\" target=\"_blank\" rel=\"external\">Vue-cli脚手架</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/3\" target=\"_blank\" rel=\"external\">Vue组件</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/8\" target=\"_blank\" rel=\"external\">vue自定义指令</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/9\" target=\"_blank\" rel=\"external\">Vue过渡动画</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/7\" target=\"_blank\" rel=\"external\">Vue指令</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/6\" target=\"_blank\" rel=\"external\">Vue api文档</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/5\" target=\"_blank\" rel=\"external\">Vue执行ajax请求</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/4\" target=\"_blank\" rel=\"external\">vue实现类似angular服务的方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/10\" target=\"_blank\" rel=\"external\">Vue源码参考文档</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td style=\"text-align:center\"><strong>路由</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/路由.html\" target=\"_blank\" rel=\"external\">路由demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/路由2.html\" target=\"_blank\" rel=\"external\">路由demo2</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td style=\"text-align:center\"><strong>指令</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/指令.html\" target=\"_blank\" rel=\"external\">指令demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/自定义指令.html\" target=\"_blank\" rel=\"external\">自定义指令demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/滑动手势指令.html\" target=\"_blank\" rel=\"external\">滑动手势demo</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td style=\"text-align:center\"><strong>过滤器</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过滤器.html\" target=\"_blank\" rel=\"external\">过滤器demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html\" target=\"_blank\" rel=\"external\">过滤器实现分页demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue过滤器读写数据.html\" target=\"_blank\" rel=\"external\">过滤器读写数据</a></td>\n</tr>\n<tr>\n<td><strong>Transition</strong></td>\n<td style=\"text-align:center\"><strong>过渡</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡.html\" target=\"_blank\" rel=\"external\">过渡demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/过渡2.html\" target=\"_blank\" rel=\"external\">过渡demo2</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Form</strong></td>\n<td style=\"text-align:center\"><strong>表单</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue获取表单值.html\" target=\"_blank\" rel=\"external\">获取表单值</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Computed</strong></td>\n<td style=\"text-align:center\"><strong>计算</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"external\">计算属性</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>Component</td>\n<td style=\"text-align:center\">组件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/组件.html\" target=\"_blank\" rel=\"external\">组件demo</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.vuejs.org\" target=\"_blank\" rel=\"external\">Vue官网</a></td>\n<td style=\"text-align:center\"><a href=\"http://forum.vuejs.org\" target=\"_blank\" rel=\"external\">Vue论坛</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"external\">Awesome-vue</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><table>\n<thead>\n<tr>\n<th>Node</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/44\" target=\"_blank\" rel=\"external\">node技巧</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer\" target=\"_blank\" rel=\"external\">NodeJs静态服务器</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alsotang/node-lessons\" target=\"_blank\" rel=\"external\">Node.js 包教不包会</a></td>\n<td style=\"text-align:center\"><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">七天学会NodeJS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.fens.me/series-nodejs\" target=\"_blank\" rel=\"external\">从零开始nodejs系列文章</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.nodebeginner.org/index-zh-cn.html\" target=\"_blank\" rel=\"external\">Node入门</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005\" target=\"_blank\" rel=\"external\">Node初学者入门，一本全面的NodeJS教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><table>\n<thead>\n<tr>\n<th>Gulp</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/glup\" target=\"_blank\" rel=\"external\">Gulp Demo</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Gulp</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com\" target=\"_blank\" rel=\"external\">Gulp官网</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.gulpjs.com.cn\" target=\"_blank\" rel=\"external\">Gulp中文网</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Platform-CUF/use-gulp\" target=\"_blank\" rel=\"external\">Gulp资料收集</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\" target=\"_blank\" rel=\"external\">Gulp：任务自动管理工具 - ruanyifeng</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com/plugins]\" target=\"_blank\" rel=\"external\">Gulp插件</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ido321.com/1622.html\" target=\"_blank\" rel=\"external\">Gulp不完全入门教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"external\">Gulp 入门指南</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>Other</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/node-demo/issues/4\" target=\"_blank\" rel=\"external\">关于Pornographic website的一些前端分析</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/50\" target=\"_blank\" rel=\"external\">微信公众号开发</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/30\" target=\"_blank\" rel=\"external\">Atom技巧总结</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/46\" target=\"_blank\" rel=\"external\">Mac小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/9\" target=\"_blank\" rel=\"external\">CSDN页面内JS跳转脚本</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/8\" target=\"_blank\" rel=\"external\">CSDN博客隐藏配置</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/7\" target=\"_blank\" rel=\"external\">百度设置小度机器人出现</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/2\" target=\"_blank\" rel=\"external\">前端冷知识，妙用浏览器地址栏</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/27\" target=\"_blank\" rel=\"external\">Vim笔记</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/48\" target=\"_blank\" rel=\"external\">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/33\" target=\"_blank\" rel=\"external\">IE8及以下按钮超链接无法跳转的问题</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"分享功能\"></a>分享功能</h2><table>\n<thead>\n<tr>\n<th>Share</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com\" target=\"_blank\" rel=\"external\">百度分享(PC)</a></td>\n<td style=\"text-align:center\"><a href=\"http://jiathis.com\" target=\"_blank\" rel=\"external\">JiaThis(PC)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://developer.baidu.com/soc/share\" target=\"_blank\" rel=\"external\">社会化分享组件(Mobile)</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.mob.com\" target=\"_blank\" rel=\"external\">ShareSDK轻松实现社会化功能(Mobile)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.umeng.com/social/android/quick-integration\" target=\"_blank\" rel=\"external\">友盟分享(Mobile)</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://runjs.cn\" target=\"_blank\" rel=\"external\">js 在线编辑 - runjs</a></td>\n<td style=\"text-align:center\"><a href=\"http://jsbin.com\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsbin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">js 在线编辑 - codepen</a></td>\n<td style=\"text-align:center\"><a href=\"http://jsfiddle.net\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ideone.com\" target=\"_blank\" rel=\"external\">java 在线编辑 - runjs</a></td>\n<td style=\"text-align:center\"><a href=\"http://code.hcharts.cn\" target=\"_blank\" rel=\"external\">js 在线编辑 - hcharts</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jsdm.com\" target=\"_blank\" rel=\"external\">js 在线编辑 - jsdm</a></td>\n<td style=\"text-align:center\"><a href=\"http://sqlfiddle.com\" target=\"_blank\" rel=\"external\">sql 在线编辑 - sqlfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"https://thimble.mozilla.org\" target=\"_blank\" rel=\"external\">mozilla 在线编辑器</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ueditor.baidu.com/website\" target=\"_blank\" rel=\"external\">百度ueditor</a></td>\n<td style=\"text-align:center\"><a href=\"http://ckeditor.com\" target=\"_blank\" rel=\"external\">ckeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.tinymce.com\" target=\"_blank\" rel=\"external\">tinymce</a></td>\n<td style=\"text-align:center\"><a href=\"http://kindeditor.net\" target=\"_blank\" rel=\"external\">kindeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg\" target=\"_blank\" rel=\"external\">wysiwyg</a></td>\n<td style=\"text-align:center\"><a href=\"http://integ.github.io/BachEditor\" target=\"_blank\" rel=\"external\">BachEditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mycolorway/simditor\" target=\"_blank\" rel=\"external\">simditor</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/summernote/summernote\" target=\"_blank\" rel=\"external\">summernote</a></td>\n</tr>\n<tr>\n<td><a href=\"http://neilj.github.io/Squire\" target=\"_blank\" rel=\"external\">Squire</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/wangfupeng1988/wangEditor\" target=\"_blank\" rel=\"external\">wangEditor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4565261.html\" target=\"_blank\" rel=\"external\">Chrome - 基础</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/constantince/p/4579121.html\" target=\"_blank\" rel=\"external\">Chrome - 进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4585983.html\" target=\"_blank\" rel=\"external\">Chrome - 性能</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/constantince/p/4607497.html\" target=\"_blank\" rel=\"external\">Chrome - 性能进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4624241.html\" target=\"_blank\" rel=\"external\">Chrome - 移动</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html\" target=\"_blank\" rel=\"external\">Chrome - 使用技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html\" target=\"_blank\" rel=\"external\">Chrome - Console控制台不完全指南</a></td>\n<td style=\"text-align:center\"><a href=\"http://anti-code.com/devtools-cheatsheet\" target=\"_blank\" rel=\"external\">chrome开发工具快捷键</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace\" target=\"_blank\" rel=\"external\">Chrome 开发工具 Workspace 使用</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html\" target=\"_blank\" rel=\"external\">Chrome神器Vimium快捷键学习记录</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide/debug.html\" target=\"_blank\" rel=\"external\">Sass调试-w3cplus</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html\" target=\"_blank\" rel=\"external\">如何更专业的使用Chrome开发者工具-w3cplus</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sentsin.com/web/253.html\" target=\"_blank\" rel=\"external\">Chrome调试canvas</a></td>\n<td style=\"text-align:center\"><a href=\"https://segmentfault.com/a/1190000000683599\" target=\"_blank\" rel=\"external\">神器——Chrome开发者工具(一)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance\" target=\"_blank\" rel=\"external\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td>\n<td style=\"text-align:center\"><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html\" target=\"_blank\" rel=\"external\">Chrome 开发者工具的 15 个小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://1ke.co/course/361\" target=\"_blank\" rel=\"external\">Chrome开发者工具不完全指南</a></td>\n<td style=\"text-align:center\"><a href=\"http://segmentfault.com/a/1190000003882567\" target=\"_blank\" rel=\"external\">Chrome 开发者工具使用技巧</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\" target=\"_blank\" rel=\"external\">Javascript高性能动画与页面渲染</a></td>\n<td style=\"text-align:center\"><a href=\"http://isux.tencent.com/h5-performance.html\" target=\"_blank\" rel=\"external\">移动H5前端性能优化指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\" target=\"_blank\" rel=\"external\">给网页设计师和前端开发者看的前端性能优化</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\" target=\"_blank\" rel=\"external\">张鑫旭——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\" target=\"_blank\" rel=\"external\">web前端性能优化进阶路</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\" target=\"_blank\" rel=\"external\">Hey——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/yslow\" target=\"_blank\" rel=\"external\">YSLOW中文介绍</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\" target=\"_blank\" rel=\"external\">Yahoo!团队实践分享：网站性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\" target=\"_blank\" rel=\"external\">加载，不只是少一点点</a></td>\n<td style=\"text-align:center\"><a href=\"http://coolshell.cn/articles/6470.html\" target=\"_blank\" rel=\"external\">由12306谈谈网站前端性能和后端性能优化</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-html\" target=\"_blank\" rel=\"external\">【高性能前端1】高性能HTML</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.alloyteam.com/2012/10/high-performance-css\" target=\"_blank\" rel=\"external\">【高性能前端2】高性能CSS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\" target=\"_blank\" rel=\"external\">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\" target=\"_blank\" rel=\"external\">前端工程与性能优化（下）：静态资源管理与模板框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/48369\" target=\"_blank\" rel=\"external\">HTTPS连接的前几毫秒发生了什么</a></td>\n<td style=\"text-align:center\"><a href=\"http://uicss.cn/yslow/#more-12319\" target=\"_blank\" rel=\"external\">Yslow</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/amfe/article/issues/1\" target=\"_blank\" rel=\"external\">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"external\">毫秒必争，前端网页性能最佳实践</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.bootcdn.cn/jquery\" target=\"_blank\" rel=\"external\">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.bootcdn.cn\" target=\"_blank\" rel=\"external\">Bootstrap中文网开源项目免费 CDN 服务</a></td>\n</tr>\n<tr>\n<td><a href=\"http://lib.sinaapp.com\" target=\"_blank\" rel=\"external\">新浪CDN</a></td>\n<td style=\"text-align:center\"><a href=\"http://cdn.code.baidu.com\" target=\"_blank\" rel=\"external\">百度静态资源公共库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://staticfile.org\" target=\"_blank\" rel=\"external\">开放静态文件 CDN - 七牛</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jq22.com/cdn\" target=\"_blank\" rel=\"external\">CDN加速 - jq22</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.asp.net/ajax/cdn\" target=\"_blank\" rel=\"external\">微软CDN</a></td>\n<td style=\"text-align:center\"><a href=\"https://code.angularjs.org/1.5.8/\" target=\"_blank\" rel=\"external\">Angular CDN</a></td>\n</tr>\n<tr>\n<td><a href=\"http://libs.useso.com\" target=\"_blank\" rel=\"external\">360网站卫士常用前端公共库CDN服务</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/20\" target=\"_blank\" rel=\"external\">Git操作</a></td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/qq_27080247/article/details/49942991\" target=\"_blank\" rel=\"external\">Git CSDN Blog</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"external\">Git-scm</a></td>\n<td style=\"text-align:center\"><a href=\"https://git-for-windows.github.io\" target=\"_blank\" rel=\"external\">Git-for-windows</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰-Git教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.worldhello.net/gotgithub/index.html\" target=\"_blank\" rel=\"external\">Gogithub</a></td>\n</tr>\n<tr>\n<td><a href=\"http://pcottle.github.io/learnGitBranching\" target=\"_blank\" rel=\"external\">Git常规命令练习</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"external\">Git的资料整理</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\" target=\"_blank\" rel=\"external\">我所记录的git命令（非常实用）</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/phodal/github-roam\" target=\"_blank\" rel=\"external\">GitHub 漫游指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\" target=\"_blank\" rel=\"external\">GitHub秘籍</a></td>\n<td style=\"text-align:center\"><a href=\"http://onlywei.github.io/explain-git-with-d3\" target=\"_blank\" rel=\"external\">动画方式练习git</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Sass-amp-Less\"><a href=\"#Sass-amp-Less\" class=\"headerlink\" title=\"Sass&amp;Less\"></a>Sass&amp;Less</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/less-demo/issues/1\" target=\"_blank\" rel=\"external\">Less教程</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide\" target=\"_blank\" rel=\"external\">Sass</a></td>\n<td style=\"text-align:center\"><a href=\"http://sass.bootcss.com\" target=\"_blank\" rel=\"external\">Sass中文文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://less.bootcss.com\" target=\"_blank\" rel=\"external\">Less</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md\" target=\"_blank\" rel=\"external\">Markdown入门参考</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">Mdeditor(一款国内的在线markdown编辑器)</a></td>\n<td style=\"text-align:center\"><a href=\"https://stackedit.io\" target=\"_blank\" rel=\"external\">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://bh-lay.github.io/mditor\" target=\"_blank\" rel=\"external\">Mditor一款轻量级的markdown编辑器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lepture/editor\" target=\"_blank\" rel=\"external\">lepture-editor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jbt/markdown-editor\" target=\"_blank\" rel=\"external\">Markdown-editor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端文档\"><a href=\"#前端文档\" class=\"headerlink\" title=\"前端文档\"></a>前端文档</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"external\">前端知识结构</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/unruledboy/WebFrontEndStack\" target=\"_blank\" rel=\"external\">Web前端开发大系概览</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">免费的编程中文书籍索</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\" target=\"_blank\" rel=\"external\">前端书籍</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"external\">前端免费书籍大全</a></td>\n<td style=\"text-align:center\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">重新介绍JavaScript（JS教程）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.gitbook.com 国外的在线markdown可编辑成书\" target=\"_blank\" rel=\"external\">Gitbook</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\" target=\"_blank\" rel=\"external\">Front-End-Develop-Guide 前端开发指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content\" target=\"_blank\" rel=\"external\">前端开发笔记本</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/nieweidong/fetool\" target=\"_blank\" rel=\"external\">大前端工具集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content\" target=\"_blank\" rel=\"external\">前端开发者手册</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/qiu-deqing/FE-learning\" target=\"_blank\" rel=\"external\">结合个人经历总结的前端入门方法</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/qq_25827845/article/details/53079094\" target=\"_blank\" rel=\"external\">2016最新前端学习计划</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端规范\"><a href=\"#前端规范\" class=\"headerlink\" title=\"前端规范\"></a>前端规范</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"external\">通过分析github代码库总结出来的工程师代码书写习惯</a></td>\n<td style=\"text-align:center\"><a href=\"http://codeguide.bootcss.com\" target=\"_blank\" rel=\"external\">HTML&amp;CSS编码规范 by @mdo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yuwenhui.github.io\" target=\"_blank\" rel=\"external\">前端编码规范之js - by yuwenhui</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html\" target=\"_blank\" rel=\"external\">前端编码规范之js - by 李靖</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/yuche/javascript#table-of-contents\" target=\"_blank\" rel=\"external\">Airbnb JavaScript 编码规范（简体中文版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zhihu.com/question/20351507\" target=\"_blank\" rel=\"external\">AMD与CMD规范的区别</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html\" target=\"_blank\" rel=\"external\">AMD与CMD规范的区别</a></td>\n<td style=\"text-align:center\"><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html\" target=\"_blank\" rel=\"external\">KISSY 源码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79075\" target=\"_blank\" rel=\"external\">前端代码规范及最佳实践</a></td>\n<td style=\"text-align:center\"><a href=\"http://coderlmn.github.io/code-standards\" target=\"_blank\" rel=\"external\">百度前端规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79484\" target=\"_blank\" rel=\"external\">JavaScript风格指南/编码规范（Airbnb公司版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://nec.netease.com/standard\" target=\"_blank\" rel=\"external\">网易前端开发规范</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ecomfe/spec\" target=\"_blank\" rel=\"external\">前端规范资源列表</a></td>\n<td style=\"text-align:center\"><a href=\"http://codecloud.net/5622.html\" target=\"_blank\" rel=\"external\">Web 前端开发规范文档</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html\" target=\"_blank\" rel=\"external\">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td>\n<td style=\"text-align:center\"><a href=\"https://www.nowcoder.com/discuss/3196\" target=\"_blank\" rel=\"external\">那几个月在找工作（百度，网易游戏，华为）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000465431\" target=\"_blank\" rel=\"external\">前端开发面试题</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"external\">Front-end-Interview-questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E\" target=\"_blank\" rel=\"external\">5个经典的前端面试问题</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\" target=\"_blank\" rel=\"external\">Front-end-Developer-Interview-Questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/78738/\" target=\"_blank\" rel=\"external\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\" target=\"_blank\" rel=\"external\">前端开发面试题大收集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"external\">收集的前端面试题和答案</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md\" target=\"_blank\" rel=\"external\">前端开发面试题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000005947094\" target=\"_blank\" rel=\"external\">前端面试大全</a></td>\n<td style=\"text-align:center\"><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\" target=\"_blank\" rel=\"external\">关于前端面试</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端网站\"><a href=\"#前端网站\" class=\"headerlink\" title=\"前端网站\"></a>前端网站</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://gold.xitu.io/\" target=\"_blank\" rel=\"external\">掘金</a></td>\n<td style=\"text-align:center\"><a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"external\">百度FEX</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.com/\" target=\"_blank\" rel=\"external\">阿里UED</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">菜鸟教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.qdfuns.com/portal.php\" target=\"_blank\" rel=\"external\">QDFuns</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">幕课网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"external\">Codepen</a></td>\n<td style=\"text-align:center\"><a href=\"http://sentsin.com/daohang/\" target=\"_blank\" rel=\"external\">Sentsin</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JS练习\"><a href=\"#JS练习\" class=\"headerlink\" title=\"JS练习\"></a>JS练习</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"external\">Codewars</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"external\">Javascript-puzzlers</a></td>\n</tr>\n<tr>\n<td><a href=\"https://freecodecamp.cn/\" target=\"_blank\" rel=\"external\">Freecodecamp中文版</a></td>\n<td style=\"text-align:center\"><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"external\">ES6katas</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.nowcoder.com/ta/js-assessment\" target=\"_blank\" rel=\"external\">Now Coder牛客网</a></td>\n<td style=\"text-align:center\"><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"external\">Leetcode</a></td>\n</tr>\n<tr>\n<td><a href=\"https://nodeschool.io/\" target=\"_blank\" rel=\"external\">Nodeschool</a></td>\n<td style=\"text-align:center\"><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"external\">Hackerrank</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Ralph-Wang/algorithm.in.js\" target=\"_blank\" rel=\"external\">数据结构与算法 JavaScript 描述. 章节练习</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/twobin/twobinSort\" target=\"_blank\" rel=\"external\">常见排序算法（JS版）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\" target=\"_blank\" rel=\"external\">经典排序</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hechangmin/jssort\" target=\"_blank\" rel=\"external\">常见排序算法-js版本</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ES\"><a href=\"#ES\" class=\"headerlink\" title=\"ES\"></a>ES</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://es6-org.github.io/exploring-es6/\" target=\"_blank\" rel=\"external\">Exploring-ES6翻译</a></td>\n<td style=\"text-align:center\"><a href=\"http://es6.ruanyifeng.com\" target=\"_blank\" rel=\"external\">阮一峰 ES6</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yanhaijing.com/es5\" target=\"_blank\" rel=\"external\">ECMA-262，第 5 版</a></td>\n<td style=\"text-align:center\"><a href=\"http://es5.github.io\" target=\"_blank\" rel=\"external\">ES5</a></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h1 id=\"一些前端开发的干货\"><a href=\"#一些前端开发的干货\" class=\"headerlink\" title=\"一些前端开发的干货\"></a>一些前端开发的干货</h1><p>标签（空格分隔）： 资料</p>\n<p>#出处:<a href=\"https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web\">https://coding.net/u/f2e/p/Books/git/tree/master/%E7%A7%BB%E5%8A%A8Web</a></p>\n<h2 id=\"包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改\"><a href=\"#包含pc端-移动端js库-框架-css框架-工具等等…在原文基础上添加修改\" class=\"headerlink\" title=\"#包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改\"></a>#包含pc端,移动端js库,框架,css框架,工具等等…在原文基础上添加修改</h2><p>有些虽已经年代久远，但仍然可以学到很多有用的东西,可以整理资料的链接和其他链接资料或许有重复……<br><a href=\"https://github.com/qingniao99/front-end-collect\">–&gt;&gt;另外一个链接:分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a><br><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\">库</a></p>\n<p>####<a href=\"http://hackr.io/\">常用库查询系统</a></p>\n<p>###移动端资料</p>\n<ul>\n<li><a href=\"http://am-team.github.io/amg/dev-exp-doc.html\">支付宝无线Web开发经验谈</a></li>\n<li><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201411/290576.shtml\">移动前端系列——移动端页面坑与排坑技巧( 2014-12-08 )</a></li>\n<li><a href=\"http://www.ipresst.com/play/528892e11d0495f30f00762e\">移动web最佳实践（2013）</a></li>\n<li><a href=\"http://www.jingwentian.com/t-135\">移动Web前端框架 ( 2014 ) </a></li>\n<li><a href=\"https://github.com/amfe/lib.flexible\">移动端自适应方案-lib.flexible,淘宝手机版都是用这个框架</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/1165#rd\">iOS 微信 音频 视频自动播放</a></li>\n<li><a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\">微信JS-SDK说明文档</a></li>\n<li><a href=\"http://203.195.235.76/jssdk/\">微信js demo</a></li>\n<li><a href=\"http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/\">QQ浏览器X5内核问题汇总</a></li>\n<li><a href=\"http://viewportsizes.com/\">手机分辨率查询</a></li>\n<li><p><a href=\"https://github.com/peunzhang/pageResponse\">移动端响应式框架-测试阶段,不适用于复杂页面</a></p>\n<h2 id=\"1、CSS\"><a href=\"#1、CSS\" class=\"headerlink\" title=\"1、CSS\"></a>1、CSS</h2></li>\n<li><p>Ihover 鼠标经过时间特效</p>\n</li>\n</ul>\n<p>(<a href=\"http://gudh.github.io/ihover/dist/index.html\">http://gudh.github.io/ihover/dist/index.html</a>)</p>\n<ul>\n<li>SliderBar 侧边栏侧滑效果<br><a href=\"https://github.com/christophery/pushy\">https://github.com/christophery/pushy</a></li>\n</ul>\n<ul>\n<li><p>Loaders.css 加载效果<br><a href=\"https://github.com/ConnorAtherton/loaders.css\">https://github.com/ConnorAtherton/loaders.css</a></p>\n</li>\n<li><p>CSS Spinners<br><a href=\"https://github.com/jlong/css-spinners\">https://github.com/jlong/css-spinners</a></p>\n</li>\n<li><p>fancybox 图片预览效果<br><a href=\"http://fancyapps.com/fancybox/demo/\">http://fancyapps.com/fancybox/demo/</a><br>-<br>图片预览效果<br><a href=\"http://codepen.io/dimsemenov/pen/vKrqs\">http://codepen.io/dimsemenov/pen/vKrqs</a></p>\n</li>\n<li><p>分类筛选插件<br><a href=\"https://github.com/giotiskl/Filterizr\">https://github.com/giotiskl/Filterizr</a><br>-<a href=\"http://www.dowebok.com/demo/211/\">http://www.dowebok.com/demo/211/</a></p>\n</li>\n</ul>\n<h2 id=\"github-icon库大全\"><a href=\"#github-icon库大全\" class=\"headerlink\" title=\"github  icon库大全\"></a><a href=\"https://github.com/lvwzhen/iconpark\">github  icon库大全</a></h2><p> <a href=\"http://www.iconfont.cn\">阿里巴巴iconfont</a><br> <a href=\"http://fontello.com/\">fontello</a><br> <a href=\"http://www.fontawesome.com.cn/\">Font Awesome</a><br> <a href=\"http://www.h-ui.net/Hui-3.7-Hui-iconfont.shtml\">H-ui 前端框架</a></p>\n<p>:smiley_cat:<em>These share data are from my usual work and learning，hoping to help you，If you like you can star</em></p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/57\">Javascript深浅拷贝</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/56\">Javascript中的apply和call继承</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/55\">Javascript的jsonp原理</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/49\">Javascript监听触摸事件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/52\">Javascript中的var self = this</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/32\">Javascript面向对象编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/14\">Javascript滑屏切换场景</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/16\">Javascript获取经纬度，关于调用百度API的问题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/3\">妙用Javascript运算符</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/1\">深入理解Javascript函数编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/4\">Javascript的setTimeout详细用例</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/42\">sessionstorage，localstorage和cookie</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/11\">JS日期对比</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/10\">JSONP参考文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/createElement.html\">Javascript的createElement</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/createDocumentFragment.html\">Javascript的createDocumentFragment</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html\">sessionStorage和localStorage</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/像素动画.html\">像素帧动画</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002640298\">JavaScript中的this陷阱的最全收集–没有之一</a></td>\n<td style=\"text-align:center\"><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\">JS函数式编程指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://liubin.github.io/promises-book\">JavaScript Promise迷你书（中文版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript.ruanyifeng.com\">阮一峰 Javascript</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.awesomes.cn/rank\">前端 TOP 100</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\">小白的零基础JavaScript全栈教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/weui/weui\">WeUI</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.bootcss.com\">Bootstrap</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.dcloud.net.cn/mui/\">MUI-最接近原生APP体验的高性能前端框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://amazeui.org\">Amaze UI中国首个开源HTML5跨屏前端框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://frozenui.github.io/\">Frozen UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://foundation.zurb.com/\">Foundation</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sui.taobao.org/sui/docs/\">SUI</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/easysoft/zui\">ZUI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://m.sui.taobao.org\">淘宝HTML5前端框架</a></td>\n<td style=\"text-align:center\"><a href=\"http://docs.kissyui.com\">KISSY - 阿里前端JavaScript库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nej.netease.com\">网易Nej - Nice Easy Javascript</a></td>\n<td style=\"text-align:center\"><a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\">Kendo UI MVVM Demo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://smartui.chinamzz.com\">Smart UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://developer.yahoo.com/yui/grids\">雅虎UI - CSS UI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/41\">CSS Flex布局</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/38\">移动前端开发CSS3</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/43\">响应式布局 媒体查询</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/34\">CSS图片响应式布局</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/stylesheets/styles.less\">lessDemo的less文件</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/codrops/css_reference\">CSS 语法参考</a></td>\n<td style=\"text-align:center\"><a href=\"http://isux.tencent.com/css3/index.html\">CSS3动画手册</a></td>\n</tr>\n<tr>\n<td><a href=\"http://isux.tencent.com/css3/tools.html\">腾讯css3动画制作工具</a></td>\n<td style=\"text-align:center\"><a href=\"http://daneden.github.io/animate.css\">animate.css</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/Development/AnimatedBooks/\">Animated Books with CSS 3D Transforms</a></td>\n<td style=\"text-align:center\"><a href=\"http://browserhacks.com/\">Browserhacks</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://www.zhihu.com/question/24398907\">HTML5有哪些让你惊艳的demo</a>|<a href=\"http://www.wallpaperbetter.com/\">Wallpaperbetter</a>|</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Angular文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/26\">Angular源码解读publishExternalAPI函数</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/25\">Angular源码解读setupModuleLoader函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/35\">Angular的ng-style用法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/29\">Angular判断在那个浏览器下打开的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/28\">Angular文字折叠展开组件的原理分析</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/21\">Angular服务Request异步请求的详细分析</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/24\">Angular自定义service服务详解</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/22\">Angular自定义判断上一页是否存在的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/19\">Angular操作cookies方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/18\">Angular打印错误的minErr函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/17\">Angular的fromJson与toJson方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/12\">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/6\">Angular的run方法巧妙运用</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/5\">Angular处理Html转义问题</a></td>\n</tr>\n<tr>\n<td><a href=\"ng-repeat绑定事件和嵌套\">ng-repeat绑定事件和嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/4\">Angular的post请求后台接受不了数据的解决方法</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/19\">ionic总结</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/17\">ui-route和ng-route</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/15\">ng-options&amp;&amp;ng-switch</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/14\">directive组件作用域</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/13\">表单认证</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/11\">$broadcast,$emit and $on</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/9\">自定义过滤器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/8\">自定义手势指令ng-touch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/7\">ng-animate</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/issues/3\">单页面应用的技术点</a></td>\n</tr>\n<tr>\n<td><strong>Guess you like</strong></td>\n<td style=\"text-align:center\"><strong>AppDemo</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\">Angular商城Demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/Stovepipe/index.html\">AngularStovepipe</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/TT/index.html\">Angular的新闻客户端</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\">Angular商城Demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html\">Angular内联编辑器</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html\">Angular即时搜索</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html\">Angular导航菜单</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html\">Angular订单表单</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html\">Angular切换网格</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/spa/news/index.html\">Angular新闻＋WEUI DEMO</a> <a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News\">源码</a></td>\n</tr>\n<tr>\n<td><strong>Controller</strong></td>\n<td style=\"text-align:center\"><strong>控制器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/view/student.html\">Angular控制器demo</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>SPA DEMO</strong></td>\n<td style=\"text-align:center\"><strong>单页面应用</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/weui每日笑话.html\">Angular+Weui单页面应用DEMO-每日笑话</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Service</strong></td>\n<td style=\"text-align:center\"><strong>服务</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md\">Angular自定义服务的常用方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/部分服务demo.html\">Angular部分服务demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html\">Angular自定义Canvas画图服务</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义http服务.html\">Angular自定义http服务 面向对象封装</a></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td style=\"text-align:center\"><strong>组件与指令</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义手势事件.html\">Angular自定义手势指令</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义directive轮播图.html\">Angular自定义轮播图组件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/下拉刷新.html\">Angular自定义下拉刷新组件1</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html\">Angular自定义下拉刷新组件2</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td style=\"text-align:center\"><strong>路由</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html\">Angular路由嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/uiRoute/index.html\">Angular路由单页多个ui-view</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td style=\"text-align:center\"><strong>过滤器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular自带过滤器.html\">Angular自带过滤器</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html\">Angular自定义关键词检索过滤器</a></td>\n</tr>\n<tr>\n<td><strong>Animate</strong></td>\n<td style=\"text-align:center\"><strong>动画</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画.html\">Angular ng-animate动画1</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/ng-animate动画2.html\">Angular ng-animate动画2</a></td>\n</tr>\n<tr>\n<td><strong>Other</strong></td>\n<td style=\"text-align:center\"><strong>其他</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/iframesdemo.html\">Angular中使用iframe</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html\">Angular三级联动(1)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngSwitch.html\">Angular中使用ng-switch</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/百度地图定位DEMO.html\">百度定位DEMO</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/三级联动改进.html\">Angular三级联动(2)</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/事件监听.html\">Angular事件监听</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html\">jQuery模拟ng-repeat</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/lessDemo.html\">lessDemo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngCookie.html\">Angular自定义cookie服务和ngCookie的使用</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/图灵机器人.html\">图灵机器人</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化.html\">Angular利用angular.module()实现模块化</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/form表单验证.html\">Angular的form表单验证</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-repeat嵌套.html\">Angular的ng-repeat嵌套</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/angular-demo/angular模块化2.html\">Angular利用angular.module()实现模块化2</a></td>\n</tr>\n<tr>\n<td><strong>PHP</strong></td>\n<td style=\"text-align:center\"><strong>PHP</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/53\">PHP CURL请求的小细节</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000443795\">最流行的PHP 代码规范</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\">最流行的PHP 代码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.aijc.net/AngularLearning/\">Angular.js的一些学习资源</a></td>\n<td style=\"text-align:center\"><a href=\"http://angularjs.cn\">Angularjs中文社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/angular-ui\">一些扩展Angular UI组件</a></td>\n<td style=\"text-align:center\"><a href=\"http://mgcrea.github.io/angular-strap\">Angular UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://each.sinaapp.com/angular\">AngularJS在线教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zouyesheng.com/angular.html\">Angular学习笔记</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><table>\n<thead>\n<tr>\n<th>React</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/react/react-tutorial.html\">React教程 菜鸟教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu\">React Router 使用教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react/\">React开发中文手册-极客学院</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/\">React教程-汇智网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.phperz.com/article/15/0712/140537.html#\">React.js快速开始</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\">Reactjs 2016最佳实践</a></td>\n</tr>\n<tr>\n<td><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/introduction.html\">React 入门教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\">汇智网 React教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002767365\">轻松入门React和Webpack</a></td>\n<td style=\"text-align:center\"><a href=\"http://nav.react-china.org/#docs\">React中文索引</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.redux.js.org/\">Redux 中文文档</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/react-guide/react-router-cn\">React Router官方文档中文翻译</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/kunyashaw/p/5619256.html\">React入门教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html\">React介绍及实践教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://facebook.github.io/react/index.html\">React.js 官方网址</a></td>\n<td style=\"text-align:center\"><a href=\"https://facebook.github.io/react/docs/getting-started.html\">React.js 官方文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://material-ui.com/#\">React.js material UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://touchstonejs.io\">React.js TouchstoneJS UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://amazeui.org/react\">React.js amazeui UI</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\">React 入门实例教程 - 阮一峰</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react-native\">React Native 中文版</a></td>\n<td style=\"text-align:center\"><a href=\"https://fakefish.github.io/react-webpack-cookbook\">Webpack 和 React 小书 - gitbook</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><table>\n<thead>\n<tr>\n<th>Vue</th>\n<th style=\"text-align:center\">AppDemo</th>\n<th style=\"text-align:center\">Demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/news/index.html\">NewsDemo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\">vue计算属性</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue生命周期.html\">vue生命周期</a></td>\n</tr>\n<tr>\n<td><strong>Article</strong></td>\n<td style=\"text-align:center\"><strong>Vue文档</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/2\">Vue-cli脚手架</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/3\">Vue组件</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/8\">vue自定义指令</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/9\">Vue过渡动画</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/7\">Vue指令</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/6\">Vue api文档</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/5\">Vue执行ajax请求</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/4\">vue实现类似angular服务的方法</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/vue-demo/issues/10\">Vue源码参考文档</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td style=\"text-align:center\"><strong>路由</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/路由.html\">路由demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/路由2.html\">路由demo2</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td style=\"text-align:center\"><strong>指令</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/指令.html\">指令demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/自定义指令.html\">自定义指令demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/滑动手势指令.html\">滑动手势demo</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td style=\"text-align:center\"><strong>过滤器</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过滤器.html\">过滤器demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html\">过滤器实现分页demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/vue过滤器读写数据.html\">过滤器读写数据</a></td>\n</tr>\n<tr>\n<td><strong>Transition</strong></td>\n<td style=\"text-align:center\"><strong>过渡</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡.html\">过渡demo</a></td>\n<td style=\"text-align:center\"><a href=\"https://wscats.github.io/vue-demo/过渡2.html\">过渡demo2</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Form</strong></td>\n<td style=\"text-align:center\"><strong>表单</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue获取表单值.html\">获取表单值</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Computed</strong></td>\n<td style=\"text-align:center\"><strong>计算</strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\">计算属性</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>Component</td>\n<td style=\"text-align:center\">组件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/组件.html\">组件demo</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.vuejs.org\">Vue官网</a></td>\n<td style=\"text-align:center\"><a href=\"http://forum.vuejs.org\">Vue论坛</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/vuejs/awesome-vue\">Awesome-vue</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><table>\n<thead>\n<tr>\n<th>Node</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/44\">node技巧</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer\">NodeJs静态服务器</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alsotang/node-lessons\">Node.js 包教不包会</a></td>\n<td style=\"text-align:center\"><a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.fens.me/series-nodejs\">从零开始nodejs系列文章</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node入门</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005\">Node初学者入门，一本全面的NodeJS教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><table>\n<thead>\n<tr>\n<th>Gulp</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/glup\">Gulp Demo</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Gulp</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com\">Gulp官网</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.gulpjs.com.cn\">Gulp中文网</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Platform-CUF/use-gulp\">Gulp资料收集</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\">Gulp：任务自动管理工具 - ruanyifeng</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com/plugins]\">Gulp插件</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.ido321.com/1622.html\">Gulp不完全入门教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nimojs/gulp-book\">Gulp 入门指南</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>Other</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/node-demo/issues/4\">关于Pornographic website的一些前端分析</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/50\">微信公众号开发</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/30\">Atom技巧总结</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/46\">Mac小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/9\">CSDN页面内JS跳转脚本</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/8\">CSDN博客隐藏配置</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/7\">百度设置小度机器人出现</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/2\">前端冷知识，妙用浏览器地址栏</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/27\">Vim笔记</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Wscats/Good-text-Share/issues/48\">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/33\">IE8及以下按钮超链接无法跳转的问题</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"分享功能\"></a>分享功能</h2><table>\n<thead>\n<tr>\n<th>Share</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com\">百度分享(PC)</a></td>\n<td style=\"text-align:center\"><a href=\"http://jiathis.com\">JiaThis(PC)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://developer.baidu.com/soc/share\">社会化分享组件(Mobile)</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.mob.com\">ShareSDK轻松实现社会化功能(Mobile)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.umeng.com/social/android/quick-integration\">友盟分享(Mobile)</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://runjs.cn\">js 在线编辑 - runjs</a></td>\n<td style=\"text-align:center\"><a href=\"http://jsbin.com\">js 在线编辑 - jsbin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io\">js 在线编辑 - codepen</a></td>\n<td style=\"text-align:center\"><a href=\"http://jsfiddle.net\">js 在线编辑 - jsfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ideone.com\">java 在线编辑 - runjs</a></td>\n<td style=\"text-align:center\"><a href=\"http://code.hcharts.cn\">js 在线编辑 - hcharts</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jsdm.com\">js 在线编辑 - jsdm</a></td>\n<td style=\"text-align:center\"><a href=\"http://sqlfiddle.com\">sql 在线编辑 - sqlfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"https://thimble.mozilla.org\">mozilla 在线编辑器</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ueditor.baidu.com/website\">百度ueditor</a></td>\n<td style=\"text-align:center\"><a href=\"http://ckeditor.com\">ckeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.tinymce.com\">tinymce</a></td>\n<td style=\"text-align:center\"><a href=\"http://kindeditor.net\">kindeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg\">wysiwyg</a></td>\n<td style=\"text-align:center\"><a href=\"http://integ.github.io/BachEditor\">BachEditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mycolorway/simditor\">simditor</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/summernote/summernote\">summernote</a></td>\n</tr>\n<tr>\n<td><a href=\"http://neilj.github.io/Squire\">Squire</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/wangfupeng1988/wangEditor\">wangEditor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4565261.html\">Chrome - 基础</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/constantince/p/4579121.html\">Chrome - 进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4585983.html\">Chrome - 性能</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/constantince/p/4607497.html\">Chrome - 性能进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4624241.html\">Chrome - 移动</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html\">Chrome - 使用技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html\">Chrome - Console控制台不完全指南</a></td>\n<td style=\"text-align:center\"><a href=\"http://anti-code.com/devtools-cheatsheet\">chrome开发工具快捷键</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace\">Chrome 开发工具 Workspace 使用</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html\">Chrome神器Vimium快捷键学习记录</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide/debug.html\">Sass调试-w3cplus</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html\">如何更专业的使用Chrome开发者工具-w3cplus</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sentsin.com/web/253.html\">Chrome调试canvas</a></td>\n<td style=\"text-align:center\"><a href=\"https://segmentfault.com/a/1190000000683599\">神器——Chrome开发者工具(一)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td>\n<td style=\"text-align:center\"><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html\">Chrome 开发者工具的 15 个小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://1ke.co/course/361\">Chrome开发者工具不完全指南</a></td>\n<td style=\"text-align:center\"><a href=\"http://segmentfault.com/a/1190000003882567\">Chrome 开发者工具使用技巧</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\">Javascript高性能动画与页面渲染</a></td>\n<td style=\"text-align:center\"><a href=\"http://isux.tencent.com/h5-performance.html\">移动H5前端性能优化指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\">给网页设计师和前端开发者看的前端性能优化</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\">张鑫旭——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\">web前端性能优化进阶路</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\">Hey——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/yslow\">YSLOW中文介绍</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\">Yahoo!团队实践分享：网站性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\">加载，不只是少一点点</a></td>\n<td style=\"text-align:center\"><a href=\"http://coolshell.cn/articles/6470.html\">由12306谈谈网站前端性能和后端性能优化</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-html\">【高性能前端1】高性能HTML</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.alloyteam.com/2012/10/high-performance-css\">【高性能前端2】高性能CSS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\">前端工程与性能优化（下）：静态资源管理与模板框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/48369\">HTTPS连接的前几毫秒发生了什么</a></td>\n<td style=\"text-align:center\"><a href=\"http://uicss.cn/yslow/#more-12319\">Yslow</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/amfe/article/issues/1\">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\">毫秒必争，前端网页性能最佳实践</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.bootcdn.cn/jquery\">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.bootcdn.cn\">Bootstrap中文网开源项目免费 CDN 服务</a></td>\n</tr>\n<tr>\n<td><a href=\"http://lib.sinaapp.com\">新浪CDN</a></td>\n<td style=\"text-align:center\"><a href=\"http://cdn.code.baidu.com\">百度静态资源公共库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://staticfile.org\">开放静态文件 CDN - 七牛</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.jq22.com/cdn\">CDN加速 - jq22</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.asp.net/ajax/cdn\">微软CDN</a></td>\n<td style=\"text-align:center\"><a href=\"https://code.angularjs.org/1.5.8/\">Angular CDN</a></td>\n</tr>\n<tr>\n<td><a href=\"http://libs.useso.com\">360网站卫士常用前端公共库CDN服务</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/20\">Git操作</a></td>\n<td style=\"text-align:center\"><a href=\"http://blog.csdn.net/qq_27080247/article/details/49942991\">Git CSDN Blog</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://git-scm.com\">Git-scm</a></td>\n<td style=\"text-align:center\"><a href=\"https://git-for-windows.github.io\">Git-for-windows</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰-Git教程</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.worldhello.net/gotgithub/index.html\">Gogithub</a></td>\n</tr>\n<tr>\n<td><a href=\"http://pcottle.github.io/learnGitBranching\">Git常规命令练习</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/xirong/my-git\">Git的资料整理</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\">我所记录的git命令（非常实用）</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/phodal/github-roam\">GitHub 漫游指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\">GitHub秘籍</a></td>\n<td style=\"text-align:center\"><a href=\"http://onlywei.github.io/explain-git-with-d3\">动画方式练习git</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Sass-amp-Less\"><a href=\"#Sass-amp-Less\" class=\"headerlink\" title=\"Sass&amp;Less\"></a>Sass&amp;Less</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th style=\"text-align:center\">Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/less-demo/issues/1\">Less教程</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td style=\"text-align:center\"><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide\">Sass</a></td>\n<td style=\"text-align:center\"><a href=\"http://sass.bootcss.com\">Sass中文文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://less.bootcss.com\">Less</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://wowubuntu.com/markdown\">Markdown 语法说明 (简体中文版)</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md\">Markdown入门参考</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.zybuluo.com/mdeditor\">Mdeditor(一款国内的在线markdown编辑器)</a></td>\n<td style=\"text-align:center\"><a href=\"https://stackedit.io\">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://bh-lay.github.io/mditor\">Mditor一款轻量级的markdown编辑器</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/lepture/editor\">lepture-editor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jbt/markdown-editor\">Markdown-editor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端文档\"><a href=\"#前端文档\" class=\"headerlink\" title=\"前端文档\"></a>前端文档</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JacksonTian/fks\">前端知识结构</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/unruledboy/WebFrontEndStack\">Web前端开发大系概览</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\">免费的编程中文书籍索</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\">前端书籍</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vhf/free-programming-books\">前端免费书籍大全</a></td>\n<td style=\"text-align:center\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">重新介绍JavaScript（JS教程）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.gitbook.com 国外的在线markdown可编辑成书\">Gitbook</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\">Front-End-Develop-Guide 前端开发指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content\">前端开发笔记本</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/nieweidong/fetool\">大前端工具集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content\">前端开发者手册</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/qiu-deqing/FE-learning\">结合个人经历总结的前端入门方法</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/qq_25827845/article/details/53079094\">2016最新前端学习计划</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端规范\"><a href=\"#前端规范\" class=\"headerlink\" title=\"前端规范\"></a>前端规范</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://alloyteam.github.io/CodeGuide/\">通过分析github代码库总结出来的工程师代码书写习惯</a></td>\n<td style=\"text-align:center\"><a href=\"http://codeguide.bootcss.com\">HTML&amp;CSS编码规范 by @mdo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yuwenhui.github.io\">前端编码规范之js - by yuwenhui</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html\">前端编码规范之js - by 李靖</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/yuche/javascript#table-of-contents\">Airbnb JavaScript 编码规范（简体中文版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.zhihu.com/question/20351507\">AMD与CMD规范的区别</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html\">AMD与CMD规范的区别</a></td>\n<td style=\"text-align:center\"><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html\">KISSY 源码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79075\">前端代码规范及最佳实践</a></td>\n<td style=\"text-align:center\"><a href=\"http://coderlmn.github.io/code-standards\">百度前端规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79484\">JavaScript风格指南/编码规范（Airbnb公司版）</a></td>\n<td style=\"text-align:center\"><a href=\"http://nec.netease.com/standard\">网易前端开发规范</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ecomfe/spec\">前端规范资源列表</a></td>\n<td style=\"text-align:center\"><a href=\"http://codecloud.net/5622.html\">Web 前端开发规范文档</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html\">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td>\n<td style=\"text-align:center\"><a href=\"https://www.nowcoder.com/discuss/3196\">那几个月在找工作（百度，网易游戏，华为）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000465431\">前端开发面试题</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\">Front-end-Interview-questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E\">5个经典的前端面试问题</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\">Front-end-Developer-Interview-Questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/78738/\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\">前端开发面试题大收集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/qiu-deqing/FE-interview\">收集的前端面试题和答案</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md\">前端开发面试题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000005947094\">前端面试大全</a></td>\n<td style=\"text-align:center\"><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\">关于前端面试</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端网站\"><a href=\"#前端网站\" class=\"headerlink\" title=\"前端网站\"></a>前端网站</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://gold.xitu.io/\">掘金</a></td>\n<td style=\"text-align:center\"><a href=\"http://fex.baidu.com/\">百度FEX</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.com/\">阿里UED</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.runoob.com/\">菜鸟教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.qdfuns.com/portal.php\">QDFuns</a></td>\n<td style=\"text-align:center\"><a href=\"http://www.imooc.com/\">幕课网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io/\">Codepen</a></td>\n<td style=\"text-align:center\"><a href=\"http://sentsin.com/daohang/\">Sentsin</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JS练习\"><a href=\"#JS练习\" class=\"headerlink\" title=\"JS练习\"></a>JS练习</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.codewars.com/\">Codewars</a></td>\n<td style=\"text-align:center\"><a href=\"http://javascript-puzzlers.herokuapp.com/\">Javascript-puzzlers</a></td>\n</tr>\n<tr>\n<td><a href=\"https://freecodecamp.cn/\">Freecodecamp中文版</a></td>\n<td style=\"text-align:center\"><a href=\"http://es6katas.org/\">ES6katas</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.nowcoder.com/ta/js-assessment\">Now Coder牛客网</a></td>\n<td style=\"text-align:center\"><a href=\"https://leetcode.com/\">Leetcode</a></td>\n</tr>\n<tr>\n<td><a href=\"https://nodeschool.io/\">Nodeschool</a></td>\n<td style=\"text-align:center\"><a href=\"https://www.hackerrank.com/\">Hackerrank</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Ralph-Wang/algorithm.in.js\">数据结构与算法 JavaScript 描述. 章节练习</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/twobin/twobinSort\">常见排序算法（JS版）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\">经典排序</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/hechangmin/jssort\">常见排序算法-js版本</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ES\"><a href=\"#ES\" class=\"headerlink\" title=\"ES\"></a>ES</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th style=\"text-align:center\">Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://es6-org.github.io/exploring-es6/\">Exploring-ES6翻译</a></td>\n<td style=\"text-align:center\"><a href=\"http://es6.ruanyifeng.com\">阮一峰 ES6</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yanhaijing.com/es5\">ECMA-262，第 5 版</a></td>\n<td style=\"text-align:center\"><a href=\"http://es5.github.io\">ES5</a></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"微信小程序相关","date":"2016-12-11T12:34:28.000Z","comments":1,"keywords":null,"description":"微信小程序的一些相关笔记。","_content":"\n## 一、通过事件进行参数传递\n\n\n> 什么是事件?\n\n1.这里是列表文本事件是视图层到逻辑层的通讯方式。\n\n2.这里是列表文本事件可以将用户的行为反馈到逻辑层进行处理。\n\n3.这里是列表文本事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。\n这里是列表文本 事件对象可以携带额外信息，如id, dataset, touches。\n\n```html\n\n <view id=\"tapTest\" data-hi=\"MINA\" bindtap=\"tapName\"> Click me! </view>\n \n```\n\n\n```javascript\nPage({\n  tapName: function(event) {\n    console.log(event.target) \n  }\n})\n\n\n```\n\n\n```javascript\n  //事件处理函数\n  bindViewTap: function(e) {\n\n    var id=e.target.id;\n    console.log(e.target.id);\n      \n   // this.data.id=id,\n    console.log(id);\n\n    wx.navigateTo({\n      url: '../logs/logs?title='+id\n    })\n  },\n\n```\n\n\n ![图片](https://static.oschina.net/uploads/img/201609/29231201_GcPQ.png) \n\n可以看到 dataset 里面就是我们设置的data-hi=\"MINA\"的值了。\n\n现在我们来看下刚刚我们写的， 首先 bindtap,以bind开头的就是要给他绑定个事件，\n\n这个事件的名字就是“=”号后面的数值就是绑定的事件名称，需要在 逻辑【js】层定义上。 \n\n然后就是传值了，注意到的朋友可以看到 我们这里写了data-hi 和我们平时写js的传值是同一个定义方法。\n\n这个data-*就对应事件的属性target里的dataset 值。\n这里我们需要调用的话就是 event.target.dataset.hi就能取到data-hi所对应的值。\n\n\n\n\n\n\n\n\n## 二、navigator 跳转url传参\n\n\n```html\n\n <view class=\"btn-area\">\n  <navigator url=\"navigate?title=navigate\" hover-class=\"navigator-hover\">跳转到新页面</navigator>\n  <navigator url=\"redirect?title=redirect\" redirect hover-class=\"other-navigator-hover\">在当前页打开</navigator>\n</view>\n\n```\n\n>跳转页面的接收代码\n\n*.js 跳到新页面之后在onload里面直接接收参数，接收方法也就是 e.[参数值]\n\n```javascript\n\nPage({\n  data: {\n    logs: [],\n    title:\"\"\n  },\n  onLoad: function (e) {\n        console.log(e)\n    this.setData({\n       title: e.title \n    })\n  }\n})\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/wx-page.md","raw":"---\ntitle: 微信小程序相关\ndate: 2016-12-11 20:34:28\ncomments: true\ncategories: Blog\ntags: [share]\nkeywords: \ndescription: 微信小程序的一些相关笔记。\n\n---\n\n## 一、通过事件进行参数传递\n\n\n> 什么是事件?\n\n1.这里是列表文本事件是视图层到逻辑层的通讯方式。\n\n2.这里是列表文本事件可以将用户的行为反馈到逻辑层进行处理。\n\n3.这里是列表文本事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。\n这里是列表文本 事件对象可以携带额外信息，如id, dataset, touches。\n\n```html\n\n <view id=\"tapTest\" data-hi=\"MINA\" bindtap=\"tapName\"> Click me! </view>\n \n```\n\n\n```javascript\nPage({\n  tapName: function(event) {\n    console.log(event.target) \n  }\n})\n\n\n```\n\n\n```javascript\n  //事件处理函数\n  bindViewTap: function(e) {\n\n    var id=e.target.id;\n    console.log(e.target.id);\n      \n   // this.data.id=id,\n    console.log(id);\n\n    wx.navigateTo({\n      url: '../logs/logs?title='+id\n    })\n  },\n\n```\n\n\n ![图片](https://static.oschina.net/uploads/img/201609/29231201_GcPQ.png) \n\n可以看到 dataset 里面就是我们设置的data-hi=\"MINA\"的值了。\n\n现在我们来看下刚刚我们写的， 首先 bindtap,以bind开头的就是要给他绑定个事件，\n\n这个事件的名字就是“=”号后面的数值就是绑定的事件名称，需要在 逻辑【js】层定义上。 \n\n然后就是传值了，注意到的朋友可以看到 我们这里写了data-hi 和我们平时写js的传值是同一个定义方法。\n\n这个data-*就对应事件的属性target里的dataset 值。\n这里我们需要调用的话就是 event.target.dataset.hi就能取到data-hi所对应的值。\n\n\n\n\n\n\n\n\n## 二、navigator 跳转url传参\n\n\n```html\n\n <view class=\"btn-area\">\n  <navigator url=\"navigate?title=navigate\" hover-class=\"navigator-hover\">跳转到新页面</navigator>\n  <navigator url=\"redirect?title=redirect\" redirect hover-class=\"other-navigator-hover\">在当前页打开</navigator>\n</view>\n\n```\n\n>跳转页面的接收代码\n\n*.js 跳到新页面之后在onload里面直接接收参数，接收方法也就是 e.[参数值]\n\n```javascript\n\nPage({\n  data: {\n    logs: [],\n    title:\"\"\n  },\n  onLoad: function (e) {\n        console.log(e)\n    this.setData({\n       title: e.title \n    })\n  }\n})\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"wx-page","published":1,"updated":"2016-12-12T01:06:25.904Z","layout":"post","photos":[],"link":"","_id":"cj4sal6a10019ek5bw4mryca8","content":"<h2 id=\"一、通过事件进行参数传递\"><a href=\"#一、通过事件进行参数传递\" class=\"headerlink\" title=\"一、通过事件进行参数传递\"></a>一、通过事件进行参数传递</h2><blockquote>\n<p>什么是事件?</p>\n</blockquote>\n<p>1.这里是列表文本事件是视图层到逻辑层的通讯方式。</p>\n<p>2.这里是列表文本事件可以将用户的行为反馈到逻辑层进行处理。</p>\n<p>3.这里是列表文本事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。<br>这里是列表文本 事件对象可以携带额外信息，如id, dataset, touches。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tapTest\"</span> <span class=\"attr\">data-hi</span>=<span class=\"string\">\"MINA\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"tapName\"</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">tapName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event.target) </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//事件处理函数</span></div><div class=\"line\">bindViewTap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> id=e.target.id;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.id);</div><div class=\"line\">    </div><div class=\"line\"> <span class=\"comment\">// this.data.id=id,</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(id);</div><div class=\"line\"></div><div class=\"line\">  wx.navigateTo(&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'../logs/logs?title='</span>+id</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p> <img src=\"https://static.oschina.net/uploads/img/201609/29231201_GcPQ.png\" alt=\"图片\"> </p>\n<p>可以看到 dataset 里面就是我们设置的data-hi=”MINA”的值了。</p>\n<p>现在我们来看下刚刚我们写的， 首先 bindtap,以bind开头的就是要给他绑定个事件，</p>\n<p>这个事件的名字就是“=”号后面的数值就是绑定的事件名称，需要在 逻辑【js】层定义上。 </p>\n<p>然后就是传值了，注意到的朋友可以看到 我们这里写了data-hi 和我们平时写js的传值是同一个定义方法。</p>\n<p>这个data-*就对应事件的属性target里的dataset 值。<br>这里我们需要调用的话就是 event.target.dataset.hi就能取到data-hi所对应的值。</p>\n<h2 id=\"二、navigator-跳转url传参\"><a href=\"#二、navigator-跳转url传参\" class=\"headerlink\" title=\"二、navigator 跳转url传参\"></a>二、navigator 跳转url传参</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-area\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigator</span> <span class=\"attr\">url</span>=<span class=\"string\">\"navigate?title=navigate\"</span> <span class=\"attr\">hover-class</span>=<span class=\"string\">\"navigator-hover\"</span>&gt;</span>跳转到新页面<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigator</span> <span class=\"attr\">url</span>=<span class=\"string\">\"redirect?title=redirect\"</span> <span class=\"attr\">redirect</span> <span class=\"attr\">hover-class</span>=<span class=\"string\">\"other-navigator-hover\"</span>&gt;</span>在当前页打开<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>跳转页面的接收代码</p>\n</blockquote>\n<p>*.js 跳到新页面之后在onload里面直接接收参数，接收方法也就是 e.[参数值]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">logs</span>: [],</div><div class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">\"\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e)</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">       <span class=\"attr\">title</span>: e.title </div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"一、通过事件进行参数传递\"><a href=\"#一、通过事件进行参数传递\" class=\"headerlink\" title=\"一、通过事件进行参数传递\"></a>一、通过事件进行参数传递</h2><blockquote>\n<p>什么是事件?</p>\n</blockquote>\n<p>1.这里是列表文本事件是视图层到逻辑层的通讯方式。</p>\n<p>2.这里是列表文本事件可以将用户的行为反馈到逻辑层进行处理。</p>\n<p>3.这里是列表文本事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。<br>这里是列表文本 事件对象可以携带额外信息，如id, dataset, touches。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tapTest\"</span> <span class=\"attr\">data-hi</span>=<span class=\"string\">\"MINA\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"tapName\"</span>&gt;</span> Click me! <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">tapName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(event.target) </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//事件处理函数</span></div><div class=\"line\">bindViewTap: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> id=e.target.id;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.id);</div><div class=\"line\">    </div><div class=\"line\"> <span class=\"comment\">// this.data.id=id,</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(id);</div><div class=\"line\"></div><div class=\"line\">  wx.navigateTo(&#123;</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">'../logs/logs?title='</span>+id</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p> <img src=\"https://static.oschina.net/uploads/img/201609/29231201_GcPQ.png\" alt=\"图片\"> </p>\n<p>可以看到 dataset 里面就是我们设置的data-hi=”MINA”的值了。</p>\n<p>现在我们来看下刚刚我们写的， 首先 bindtap,以bind开头的就是要给他绑定个事件，</p>\n<p>这个事件的名字就是“=”号后面的数值就是绑定的事件名称，需要在 逻辑【js】层定义上。 </p>\n<p>然后就是传值了，注意到的朋友可以看到 我们这里写了data-hi 和我们平时写js的传值是同一个定义方法。</p>\n<p>这个data-*就对应事件的属性target里的dataset 值。<br>这里我们需要调用的话就是 event.target.dataset.hi就能取到data-hi所对应的值。</p>\n<h2 id=\"二、navigator-跳转url传参\"><a href=\"#二、navigator-跳转url传参\" class=\"headerlink\" title=\"二、navigator 跳转url传参\"></a>二、navigator 跳转url传参</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-area\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigator</span> <span class=\"attr\">url</span>=<span class=\"string\">\"navigate?title=navigate\"</span> <span class=\"attr\">hover-class</span>=<span class=\"string\">\"navigator-hover\"</span>&gt;</span>跳转到新页面<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">navigator</span> <span class=\"attr\">url</span>=<span class=\"string\">\"redirect?title=redirect\"</span> <span class=\"attr\">redirect</span> <span class=\"attr\">hover-class</span>=<span class=\"string\">\"other-navigator-hover\"</span>&gt;</span>在当前页打开<span class=\"tag\">&lt;/<span class=\"name\">navigator</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>跳转页面的接收代码</p>\n</blockquote>\n<p>*.js 跳到新页面之后在onload里面直接接收参数，接收方法也就是 e.[参数值]</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">logs</span>: [],</div><div class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">\"\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e)</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">       <span class=\"attr\">title</span>: e.title </div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"基于Vue2+axios+VueRouter的新闻web单页应用","date":"2017-06-30T06:34:28.000Z","comments":1,"keywords":"T基于Vue2+axios+VueRouter的新闻web单页应用","description":"项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,","_content":"\n\n##vue_news\n项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,\n小Demo还在不断改进中，也敦促自己不断学习前进\n\n> 使用技术:\nVue2.0\naxios+promise 网络请求封装\nVueRouter\nmint-UI\n\n\n浏览地址：\n[Demo Link](http://code.it919.cn/dist)\n\n![二维码](https://dn-coding-net-production-pp.qbox.me/8175c051-daa0-4148-8842-c235c2a398de.png) \n\n\n### Build Setup 安装部署运行\n```\n#clone\ngit clone https://github.com/ecitlm/Vue_news.git\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:800\nnpm run dev\n\n```\n\n### 网络请求封装\n>这里封装了两个网络请求方法  fetchPost，fetchGet以及请求配置，通过\n\nconfig,js\n```\nimport axios from 'axios'\nimport qs from 'qs'\n// axios 配置\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'https://api.it919.cn/public/api';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n    if (config.method === 'post') {\n        config.data = qs.stringify(config.data);\n    }\n    return config;\n}, (error) => {\n    alert(\"错误的传参\")\n    return Promise.reject(error);\n});\n\n/**\n * \n * POST 请求方式\n * @param {string} url     请求URL\n * @param {object} params  请求参数\n * @returns \n */\n\nexport default {\n    //fetchPost  请求方式\n    fetchPost: function(url, params) {\n        return new Promise((resolve, reject) => {\n            axios.post(url, params)\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err);\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        })\n    },\n\n\n    //GET 请求方式\n    fetchGet: function(url, params) {\n        console.log(params)\n        return new Promise((resolve, reject) => {\n            axios.get(url, {\n                    params: params\n                })\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err);\n                })\n                .catch((error) => {\n                    reject(error)\n                });\n        })\n\n    }\n}\n\n```\n>api.js 为所有接口封装,如下面的相关接口\n\n```\nimport fetch from './config'\nexport default {\n    /**\n     * 新闻轮播图\n     * @param {object} params \n     * @returns \n     */\n    banner(params) {\n        return fetch.fetchPost('News/banner', params);\n    },\n    /**\n     * 文章分类列表\n     * @param {object} params {page：分页，type:文章类型}\n     * @returns \n     */\n    new_list(params) {\n        return fetch.fetchGet('News/new_list', params)\n    }\n    }\n```\n\n> 使用请求接口数据\n\n```\n // 获取首页新闻列表\n    [types.FECTH_INDEX_NEWS]({commit}) {\n        var data={\n            page:20,\n            type:0\n        }\n        api.new_list(data)\n            .then(res => {\n                commit(types.TOGGLE_INDEX_NEWS, res.data)\n            }).catch(err => console.log(err))\n    }\n```\n### UI界面\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/index1.jpg) ![图片](https://dn-coding-net-production-pp.qbox.me/a271b902-089f-4a1b-8879-357a113b66e5.png)\n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/master/UI/%25E7%2594%25B5%25E5%25BD%25B11-%25E7%2583%25AD%25E6%2592%25AD%25E5%2588%2597%25E8%25A1%25A8.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%25E7%2594%25B5%25E5%25BD%25B12-%25E8%25AF%25A6%25E6%2583%2585.jpg)\n\n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music1-%E5%88%86%E7%B1%BB.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music2-%E5%88%86%E7%B1%BB%E6%AD%8C%E5%8D%95.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music3-音乐播放.jpg) \n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/photo1-%E5%88%86%E7%B1%BB.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E8%A7%86%E9%A2%911.jpg) \n \n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E7%AC%91%E8%AF%9D%E6%AE%B5%E5%AD%90.jpg ) \n\n\n","source":"_posts/vue-new.md","raw":"---\ntitle: 基于Vue2+axios+VueRouter的新闻web单页应用\ndate: 2017-06-30 14:34:28\ncomments: true\ncategories: vue\ntags: [Vue]\nkeywords: T基于Vue2+axios+VueRouter的新闻web单页应用\ndescription: 项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,\n\n---\n\n\n##vue_news\n项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,\n小Demo还在不断改进中，也敦促自己不断学习前进\n\n> 使用技术:\nVue2.0\naxios+promise 网络请求封装\nVueRouter\nmint-UI\n\n\n浏览地址：\n[Demo Link](http://code.it919.cn/dist)\n\n![二维码](https://dn-coding-net-production-pp.qbox.me/8175c051-daa0-4148-8842-c235c2a398de.png) \n\n\n### Build Setup 安装部署运行\n```\n#clone\ngit clone https://github.com/ecitlm/Vue_news.git\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:800\nnpm run dev\n\n```\n\n### 网络请求封装\n>这里封装了两个网络请求方法  fetchPost，fetchGet以及请求配置，通过\n\nconfig,js\n```\nimport axios from 'axios'\nimport qs from 'qs'\n// axios 配置\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'https://api.it919.cn/public/api';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n    if (config.method === 'post') {\n        config.data = qs.stringify(config.data);\n    }\n    return config;\n}, (error) => {\n    alert(\"错误的传参\")\n    return Promise.reject(error);\n});\n\n/**\n * \n * POST 请求方式\n * @param {string} url     请求URL\n * @param {object} params  请求参数\n * @returns \n */\n\nexport default {\n    //fetchPost  请求方式\n    fetchPost: function(url, params) {\n        return new Promise((resolve, reject) => {\n            axios.post(url, params)\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err);\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        })\n    },\n\n\n    //GET 请求方式\n    fetchGet: function(url, params) {\n        console.log(params)\n        return new Promise((resolve, reject) => {\n            axios.get(url, {\n                    params: params\n                })\n                .then(response => {\n                    resolve(response.data);\n                }, err => {\n                    reject(err);\n                })\n                .catch((error) => {\n                    reject(error)\n                });\n        })\n\n    }\n}\n\n```\n>api.js 为所有接口封装,如下面的相关接口\n\n```\nimport fetch from './config'\nexport default {\n    /**\n     * 新闻轮播图\n     * @param {object} params \n     * @returns \n     */\n    banner(params) {\n        return fetch.fetchPost('News/banner', params);\n    },\n    /**\n     * 文章分类列表\n     * @param {object} params {page：分页，type:文章类型}\n     * @returns \n     */\n    new_list(params) {\n        return fetch.fetchGet('News/new_list', params)\n    }\n    }\n```\n\n> 使用请求接口数据\n\n```\n // 获取首页新闻列表\n    [types.FECTH_INDEX_NEWS]({commit}) {\n        var data={\n            page:20,\n            type:0\n        }\n        api.new_list(data)\n            .then(res => {\n                commit(types.TOGGLE_INDEX_NEWS, res.data)\n            }).catch(err => console.log(err))\n    }\n```\n### UI界面\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/index1.jpg) ![图片](https://dn-coding-net-production-pp.qbox.me/a271b902-089f-4a1b-8879-357a113b66e5.png)\n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/master/UI/%25E7%2594%25B5%25E5%25BD%25B11-%25E7%2583%25AD%25E6%2592%25AD%25E5%2588%2597%25E8%25A1%25A8.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%25E7%2594%25B5%25E5%25BD%25B12-%25E8%25AF%25A6%25E6%2583%2585.jpg)\n\n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music1-%E5%88%86%E7%B1%BB.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music2-%E5%88%86%E7%B1%BB%E6%AD%8C%E5%8D%95.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music3-音乐播放.jpg) \n\n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/photo1-%E5%88%86%E7%B1%BB.jpg) ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E8%A7%86%E9%A2%911.jpg) \n \n ![图片](https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E7%AC%91%E8%AF%9D%E6%AE%B5%E5%AD%90.jpg ) \n\n\n","slug":"vue-new","published":1,"updated":"2017-07-06T10:33:59.946Z","layout":"post","photos":[],"link":"","_id":"cj4sap7me0000ls5bvmi371oq","content":"<p>##vue_news<br>项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,<br>小Demo还在不断改进中，也敦促自己不断学习前进</p>\n<blockquote>\n<p>使用技术:<br>Vue2.0<br>axios+promise 网络请求封装<br>VueRouter<br>mint-UI</p>\n</blockquote>\n<p>浏览地址：<br><a href=\"http://code.it919.cn/dist\">Demo Link</a></p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/8175c051-daa0-4148-8842-c235c2a398de.png\" alt=\"二维码\"> </p>\n<h3 id=\"Build-Setup-安装部署运行\"><a href=\"#Build-Setup-安装部署运行\" class=\"headerlink\" title=\"Build Setup 安装部署运行\"></a>Build Setup 安装部署运行</h3><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#clone</span></div><div class=\"line\">git clone https:<span class=\"comment\">//github.com/ecitlm/Vue_news.git</span></div><div class=\"line\"><span class=\"meta\"># install dependencies</span></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># serve with hot reload at localhost:800</span></div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3 id=\"网络请求封装\"><a href=\"#网络请求封装\" class=\"headerlink\" title=\"网络请求封装\"></a>网络请求封装</h3><blockquote>\n<p>这里封装了两个网络请求方法  fetchPost，fetchGet以及请求配置，通过</p>\n</blockquote>\n<p>config,js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"comment\">// axios 配置</span></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.it919.cn/public/api'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config.method === <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">        config.data = qs.stringify(config.data);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"错误的传参\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * </div><div class=\"line\"> * POST 请求方式</div><div class=\"line\"> * @param &#123;string&#125; url     请求URL</div><div class=\"line\"> * @param &#123;object&#125; params  请求参数</div><div class=\"line\"> * @returns </div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//fetchPost  请求方式</span></div><div class=\"line\">    fetchPost: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, params</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            axios.post(url, params)</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">                    resolve(response.data);</div><div class=\"line\">                &#125;, err =&gt; &#123;</div><div class=\"line\">                    reject(err);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                    reject(error)</div><div class=\"line\">                &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//GET 请求方式</span></div><div class=\"line\">    fetchGet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, params</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(params)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            axios.get(url, &#123;</div><div class=\"line\">                    <span class=\"attr\">params</span>: params</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">                    resolve(response.data);</div><div class=\"line\">                &#125;, err =&gt; &#123;</div><div class=\"line\">                    reject(err);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                    reject(error)</div><div class=\"line\">                &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>api.js 为所有接口封装,如下面的相关接口</p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">import fetch <span class=\"keyword\">from</span> <span class=\"string\">'./config'</span></div><div class=\"line\">export <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 新闻轮播图</div><div class=\"line\">     * @param &#123;object&#125; params </div><div class=\"line\">     * @returns </div><div class=\"line\">     */</div><div class=\"line\">    banner(<span class=\"keyword\">params</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch.fetchPost(<span class=\"string\">'News/banner'</span>, <span class=\"keyword\">params</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 文章分类列表</div><div class=\"line\">     * @param &#123;object&#125; params &#123;page：分页，type:文章类型&#125;</div><div class=\"line\">     * @returns </div><div class=\"line\">     */</div><div class=\"line\">    new_list(<span class=\"keyword\">params</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch.fetchGet(<span class=\"string\">'News/new_list'</span>, <span class=\"keyword\">params</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用请求接口数据</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取首页新闻列表</div><div class=\"line\">   [<span class=\"string\">types.FECTH_INDEX_NEWS</span>](<span class=\"link\">&#123;commit&#125;</span>) &#123;</div><div class=\"line\"><span class=\"code\">       var data=&#123;</span></div><div class=\"line\"><span class=\"code\">           page:20,</span></div><div class=\"line\"><span class=\"code\">           type:0</span></div><div class=\"line\"><span class=\"code\">       &#125;</span></div><div class=\"line\"><span class=\"code\">       api.new_list(data)</span></div><div class=\"line\"><span class=\"code\">           .then(res =&gt; &#123;</span></div><div class=\"line\"><span class=\"code\">               commit(types.TOGGLE_INDEX_NEWS, res.data)</span></div><div class=\"line\"><span class=\"code\">           &#125;).catch(err =&gt; console.log(err))</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UI界面\"><a href=\"#UI界面\" class=\"headerlink\" title=\"UI界面\"></a>UI界面</h3><p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/index1.jpg\" alt=\"图片\"> <img src=\"https://dn-coding-net-production-pp.qbox.me/a271b902-089f-4a1b-8879-357a113b66e5.png\" alt=\"图片\"></p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/master/UI/%25E7%2594%25B5%25E5%25BD%25B11-%25E7%2583%25AD%25E6%2592%25AD%25E5%2588%2597%25E8%25A1%25A8.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%25E7%2594%25B5%25E5%25BD%25B12-%25E8%25AF%25A6%25E6%2583%2585.jpg\" alt=\"图片\"></p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music1-%E5%88%86%E7%B1%BB.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music2-%E5%88%86%E7%B1%BB%E6%AD%8C%E5%8D%95.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music3-音乐播放.jpg\" alt=\"图片\"> </p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/photo1-%E5%88%86%E7%B1%BB.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E8%A7%86%E9%A2%911.jpg\" alt=\"图片\"> </p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E7%AC%91%E8%AF%9D%E6%AE%B5%E5%AD%90.jpg\" alt=\"图片\"> </p>\n","excerpt":"","more":"<p>##vue_news<br>项目基于Vue2+axios+VueRouter的一个小应用,热点新闻展示、歌曲排行展示播放、热播电影详情查看、微信精选、百度美图、搞笑段子,<br>小Demo还在不断改进中，也敦促自己不断学习前进</p>\n<blockquote>\n<p>使用技术:<br>Vue2.0<br>axios+promise 网络请求封装<br>VueRouter<br>mint-UI</p>\n</blockquote>\n<p>浏览地址：<br><a href=\"http://code.it919.cn/dist\">Demo Link</a></p>\n<p><img src=\"https://dn-coding-net-production-pp.qbox.me/8175c051-daa0-4148-8842-c235c2a398de.png\" alt=\"二维码\"> </p>\n<h3 id=\"Build-Setup-安装部署运行\"><a href=\"#Build-Setup-安装部署运行\" class=\"headerlink\" title=\"Build Setup 安装部署运行\"></a>Build Setup 安装部署运行</h3><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#clone</span></div><div class=\"line\">git clone https:<span class=\"comment\">//github.com/ecitlm/Vue_news.git</span></div><div class=\"line\"><span class=\"meta\"># install dependencies</span></div><div class=\"line\">npm install</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># serve with hot reload at localhost:800</span></div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n<h3 id=\"网络请求封装\"><a href=\"#网络请求封装\" class=\"headerlink\" title=\"网络请求封装\"></a>网络请求封装</h3><blockquote>\n<p>这里封装了两个网络请求方法  fetchPost，fetchGet以及请求配置，通过</p>\n</blockquote>\n<p>config,js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"comment\">// axios 配置</span></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.it919.cn/public/api'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config.method === <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">        config.data = qs.stringify(config.data);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"错误的传参\"</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * </div><div class=\"line\"> * POST 请求方式</div><div class=\"line\"> * @param &#123;string&#125; url     请求URL</div><div class=\"line\"> * @param &#123;object&#125; params  请求参数</div><div class=\"line\"> * @returns </div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//fetchPost  请求方式</span></div><div class=\"line\">    fetchPost: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, params</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            axios.post(url, params)</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">                    resolve(response.data);</div><div class=\"line\">                &#125;, err =&gt; &#123;</div><div class=\"line\">                    reject(err);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                    reject(error)</div><div class=\"line\">                &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//GET 请求方式</span></div><div class=\"line\">    fetchGet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, params</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(params)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            axios.get(url, &#123;</div><div class=\"line\">                    <span class=\"attr\">params</span>: params</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</div><div class=\"line\">                    resolve(response.data);</div><div class=\"line\">                &#125;, err =&gt; &#123;</div><div class=\"line\">                    reject(err);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">                    reject(error)</div><div class=\"line\">                &#125;);</div><div class=\"line\">        &#125;)</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>api.js 为所有接口封装,如下面的相关接口</p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">import fetch <span class=\"keyword\">from</span> <span class=\"string\">'./config'</span></div><div class=\"line\">export <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 新闻轮播图</div><div class=\"line\">     * @param &#123;object&#125; params </div><div class=\"line\">     * @returns </div><div class=\"line\">     */</span></div><div class=\"line\">    banner(<span class=\"keyword\">params</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch.fetchPost(<span class=\"string\">'News/banner'</span>, <span class=\"keyword\">params</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 文章分类列表</div><div class=\"line\">     * @param &#123;object&#125; params &#123;page：分页，type:文章类型&#125;</div><div class=\"line\">     * @returns </div><div class=\"line\">     */</span></div><div class=\"line\">    new_list(<span class=\"keyword\">params</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> fetch.fetchGet(<span class=\"string\">'News/new_list'</span>, <span class=\"keyword\">params</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用请求接口数据</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取首页新闻列表</div><div class=\"line\">   [<span class=\"string\">types.FECTH_INDEX_NEWS</span>](<span class=\"link\">&#123;commit&#125;</span>) &#123;</div><div class=\"line\"><span class=\"code\">       var data=&#123;</span></div><div class=\"line\"><span class=\"code\">           page:20,</span></div><div class=\"line\"><span class=\"code\">           type:0</span></div><div class=\"line\"><span class=\"code\">       &#125;</span></div><div class=\"line\"><span class=\"code\">       api.new_list(data)</span></div><div class=\"line\"><span class=\"code\">           .then(res =&gt; &#123;</span></div><div class=\"line\"><span class=\"code\">               commit(types.TOGGLE_INDEX_NEWS, res.data)</span></div><div class=\"line\"><span class=\"code\">           &#125;).catch(err =&gt; console.log(err))</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UI界面\"><a href=\"#UI界面\" class=\"headerlink\" title=\"UI界面\"></a>UI界面</h3><p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/index1.jpg\" alt=\"图片\"> <img src=\"https://dn-coding-net-production-pp.qbox.me/a271b902-089f-4a1b-8879-357a113b66e5.png\" alt=\"图片\"></p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/master/UI/%25E7%2594%25B5%25E5%25BD%25B11-%25E7%2583%25AD%25E6%2592%25AD%25E5%2588%2597%25E8%25A1%25A8.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%25E7%2594%25B5%25E5%25BD%25B12-%25E8%25AF%25A6%25E6%2583%2585.jpg\" alt=\"图片\"></p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music1-%E5%88%86%E7%B1%BB.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music2-%E5%88%86%E7%B1%BB%E6%AD%8C%E5%8D%95.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/music3-音乐播放.jpg\" alt=\"图片\"> </p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/photo1-%E5%88%86%E7%B1%BB.jpg\" alt=\"图片\"> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E8%A7%86%E9%A2%911.jpg\" alt=\"图片\"> </p>\n<p> <img src=\"https://coding.net/u/ecit/p/vue_news/git/raw/898b4a541e6433d131baa5aff72abee62236ed35/UI/%E7%AC%91%E8%AF%9D%E6%AE%B5%E5%AD%90.jpg\" alt=\"图片\"> </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4sal6840000ek5b3uldh4yh","category_id":"cj4sal68e0004ek5b6jtl41at","_id":"cj4sal690000eek5b7j2l5pi5"},{"post_id":"cj4sal68a0002ek5b8jg5i9x6","category_id":"cj4sal68w000aek5biaustsif","_id":"cj4sal697000kek5bennvcsoo"},{"post_id":"cj4sal68j0006ek5b8n2xbmkx","category_id":"cj4sal692000gek5b95nyban2","_id":"cj4sal69e000qek5bh8kugkmp"},{"post_id":"cj4sal69a000nek5bnsx5g8h4","category_id":"cj4sal68e0004ek5b6jtl41at","_id":"cj4sal69m000wek5b11lyk728"},{"post_id":"cj4sal68p0008ek5b3xjxpj5y","category_id":"cj4sal698000lek5b9wuxjg4n","_id":"cj4sal69o000zek5b407b6kym"},{"post_id":"cj4sal69m000xek5bqwr7f9jr","category_id":"cj4sal69g000sek5bx6n1wrmk","_id":"cj4sal69w0014ek5bhw985npd"},{"post_id":"cj4sal68v0009ek5bwzn7r2gn","category_id":"cj4sal69g000sek5bx6n1wrmk","_id":"cj4sal6a10018ek5btldicubr"},{"post_id":"cj4sal69p0010ek5bj8f94zky","category_id":"cj4sal68e0004ek5b6jtl41at","_id":"cj4sal6a3001bek5bs4ilqj7d"},{"post_id":"cj4sal68z000dek5b8x91r7m0","category_id":"cj4sal69g000sek5bx6n1wrmk","_id":"cj4sal6a5001fek5bzpl3b4jf"},{"post_id":"cj4sal6a10019ek5bw4mryca8","category_id":"cj4sal69z0016ek5bpniq5vmj","_id":"cj4sal6a8001hek5b58zixuim"},{"post_id":"cj4sal691000fek5b6cspkese","category_id":"cj4sal69z0016ek5bpniq5vmj","_id":"cj4sal6aa001kek5btjej006i"},{"post_id":"cj4sal694000iek5b403y0xbz","category_id":"cj4sal69g000sek5bx6n1wrmk","_id":"cj4sal6ab001mek5b359takpj"},{"post_id":"cj4sal696000jek5bn0gar53r","category_id":"cj4sal698000lek5b9wuxjg4n","_id":"cj4sal6ae001pek5b4gx77pu7"},{"post_id":"cj4sal69h000uek5blgpdynyo","category_id":"cj4sal69g000sek5bx6n1wrmk","_id":"cj4sal6an001tek5b2hphls61"},{"post_id":"cj4sal69v0013ek5ba2bbxjqb","category_id":"cj4sal6af001qek5bxxluh1vs","_id":"cj4sal6as001yek5beh13vivi"},{"post_id":"cj4sal69y0015ek5bjubyykiv","category_id":"cj4sal69z0016ek5bpniq5vmj","_id":"cj4sal6au0020ek5bya3dtlut"},{"post_id":"cj4sap7me0000ls5bvmi371oq","category_id":"cj4sap7n10001ls5bk0eizfaj","_id":"cj4sap7na0004ls5bncg2plri"}],"PostTag":[{"post_id":"cj4sal6840000ek5b3uldh4yh","tag_id":"cj4sal68i0005ek5b36c49c63","_id":"cj4sal68y000cek5b0nmxunox"},{"post_id":"cj4sal68a0002ek5b8jg5i9x6","tag_id":"cj4sal68x000bek5bbk3hrx6m","_id":"cj4sal69c000oek5byhqhc10f"},{"post_id":"cj4sal68a0002ek5b8jg5i9x6","tag_id":"cj4sal693000hek5bk0fy55ws","_id":"cj4sal69f000rek5bgmf8xaet"},{"post_id":"cj4sal69a000nek5bnsx5g8h4","tag_id":"cj4sal68i0005ek5b36c49c63","_id":"cj4sal69l000vek5bo20f2gqf"},{"post_id":"cj4sal68j0006ek5b8n2xbmkx","tag_id":"cj4sal699000mek5bsdd409i4","_id":"cj4sal69o000yek5b40cj853m"},{"post_id":"cj4sal68p0008ek5b3xjxpj5y","tag_id":"cj4sal69g000tek5bvi3va38d","_id":"cj4sal6a2001aek5bpduprcvu"},{"post_id":"cj4sal68p0008ek5b3xjxpj5y","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6a3001cek5bczt4luqa"},{"post_id":"cj4sal68v0009ek5bwzn7r2gn","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6a7001gek5bymg2gpj5"},{"post_id":"cj4sal68z000dek5b8x91r7m0","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6aa001lek5bi8a9002o"},{"post_id":"cj4sal691000fek5b6cspkese","tag_id":"cj4sal6a9001jek5bt83isg5m","_id":"cj4sal6aj001sek5blohtjyus"},{"post_id":"cj4sal691000fek5b6cspkese","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6ao001uek5bpv6guqiv"},{"post_id":"cj4sal694000iek5b403y0xbz","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6ar001xek5bcd400ku5"},{"post_id":"cj4sal696000jek5bn0gar53r","tag_id":"cj4sal69g000tek5bvi3va38d","_id":"cj4sal6aw0022ek5b3fe82rzn"},{"post_id":"cj4sal696000jek5bn0gar53r","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6ax0023ek5b47l1v46r"},{"post_id":"cj4sal69d000pek5btsatj27r","tag_id":"cj4sal6av0021ek5bhxtybo2m","_id":"cj4sal6az0025ek5bbm09wwzl"},{"post_id":"cj4sal69h000uek5blgpdynyo","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6b20027ek5busw2rfso"},{"post_id":"cj4sal69m000xek5bqwr7f9jr","tag_id":"cj4sal69r0012ek5bdy4qihez","_id":"cj4sal6b30029ek5btt5islsh"},{"post_id":"cj4sal69p0010ek5bj8f94zky","tag_id":"cj4sal68i0005ek5b36c49c63","_id":"cj4sal6b5002bek5bbothwl0i"},{"post_id":"cj4sal69p0010ek5bj8f94zky","tag_id":"cj4sal6b20028ek5b2mlbo39h","_id":"cj4sal6b6002cek5b4i2u4aag"},{"post_id":"cj4sal69v0013ek5ba2bbxjqb","tag_id":"cj4sal6b5002aek5bq7o1ce6w","_id":"cj4sal6b8002eek5bqmzy7tea"},{"post_id":"cj4sal69y0015ek5bjubyykiv","tag_id":"cj4sal6b7002dek5bx1smuz2r","_id":"cj4sal6bb002hek5bvwpazu93"},{"post_id":"cj4sal69y0015ek5bjubyykiv","tag_id":"cj4sal6b9002fek5b6thvltn2","_id":"cj4sal6bb002iek5ba8tpqv75"},{"post_id":"cj4sal6a10019ek5bw4mryca8","tag_id":"cj4sal6b7002dek5bx1smuz2r","_id":"cj4sal6bc002jek5beori4siq"},{"post_id":"cj4sap7me0000ls5bvmi371oq","tag_id":"cj4sap7n70002ls5b7sydyuvf","_id":"cj4sap7n90003ls5b4q0hy22c"}],"Tag":[{"name":"php","_id":"cj4sal68i0005ek5b36c49c63"},{"name":"web","_id":"cj4sal68x000bek5bbk3hrx6m"},{"name":"GitHub","_id":"cj4sal693000hek5bk0fy55ws"},{"name":"git","_id":"cj4sal699000mek5bsdd409i4"},{"name":"node","_id":"cj4sal69g000tek5bvi3va38d"},{"name":"javascript","_id":"cj4sal69r0012ek5bdy4qihez"},{"name":"css","_id":"cj4sal6a9001jek5bt83isg5m"},{"name":"js","_id":"cj4sal6av0021ek5bhxtybo2m"},{"name":"ThinkPHP","_id":"cj4sal6b20028ek5b2mlbo39h"},{"name":"Vue.js","_id":"cj4sal6b5002aek5bq7o1ce6w"},{"name":"share","_id":"cj4sal6b7002dek5bx1smuz2r"},{"name":"CSS","_id":"cj4sal6b9002fek5b6thvltn2"},{"name":"Vue","_id":"cj4sap7n70002ls5b7sydyuvf"}]}}